'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("databases"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class databases
    Inherits Global.System.Data.DataSet
    
    Private tableS_DUEÑO As S_DUEÑODataTable
    
    Private tableS_MÉDICO As S_MÉDICODataTable
    
    Private tableS_REPORTE As S_REPORTEDataTable
    
    Private tableAUDITORIAS As AUDITORIASDataTable
    
    Private tableCIRUGIAS As CIRUGIASDataTable
    
    Private tableCITAS As CITASDataTable
    
    Private tableDUEÑOS As DUEÑOSDataTable
    
    Private tableENFERMEDADES As ENFERMEDADESDataTable
    
    Private tableENFERMEDADXRAZA As ENFERMEDADXRAZADataTable
    
    Private tableESPECIES As ESPECIESDataTable
    
    Private tableFECHA As FECHADataTable
    
    Private tableMEDICINAS As MEDICINASDataTable
    
    Private tableMEDICINAXENFERMEDAD As MEDICINAXENFERMEDADDataTable
    
    Private tableMÉDICOS As MÉDICOSDataTable
    
    Private tablePACIENTES As PACIENTESDataTable
    
    Private tableRAZAS As RAZASDataTable
    
    Private tableREPORTE As REPORTEDataTable
    
    Private tableTEL_DUEÑO As TEL_DUEÑODataTable
    
    Private tableTEL_MÉDICO As TEL_MÉDICODataTable
    
    Private tableTURNOS As TURNOSDataTable
    
    Private tableTURNOXMÉDICO As TURNOXMÉDICODataTable
    
    Private tableUSUARIOS As USUARIOSDataTable
    
    Private relationSYS_C007383 As Global.System.Data.DataRelation
    
    Private relationSYS_C007384 As Global.System.Data.DataRelation
    
    Private relationSYS_C007392 As Global.System.Data.DataRelation
    
    Private relationSYS_C007393 As Global.System.Data.DataRelation
    
    Private relationSYS_C007395 As Global.System.Data.DataRelation
    
    Private relationSYS_C007396 As Global.System.Data.DataRelation
    
    Private relationSYS_C007367 As Global.System.Data.DataRelation
    
    Private relationSYS_C007368 As Global.System.Data.DataRelation
    
    Private relationSYS_C007369 As Global.System.Data.DataRelation
    
    Private relationSYS_C007317 As Global.System.Data.DataRelation
    
    Private relationSYS_C007403 As Global.System.Data.DataRelation
    
    Private relationSYS_C007398 As Global.System.Data.DataRelation
    
    Private relationSYS_C007400 As Global.System.Data.DataRelation
    
    Private relationSYS_C007401 As Global.System.Data.DataRelation
    
    Private relationSYS_C0073951 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("S_DUEÑO")) Is Nothing) Then
                MyBase.Tables.Add(New S_DUEÑODataTable(ds.Tables("S_DUEÑO")))
            End If
            If (Not (ds.Tables("S_MÉDICO")) Is Nothing) Then
                MyBase.Tables.Add(New S_MÉDICODataTable(ds.Tables("S_MÉDICO")))
            End If
            If (Not (ds.Tables("S_REPORTE")) Is Nothing) Then
                MyBase.Tables.Add(New S_REPORTEDataTable(ds.Tables("S_REPORTE")))
            End If
            If (Not (ds.Tables("AUDITORIAS")) Is Nothing) Then
                MyBase.Tables.Add(New AUDITORIASDataTable(ds.Tables("AUDITORIAS")))
            End If
            If (Not (ds.Tables("CIRUGIAS")) Is Nothing) Then
                MyBase.Tables.Add(New CIRUGIASDataTable(ds.Tables("CIRUGIAS")))
            End If
            If (Not (ds.Tables("CITAS")) Is Nothing) Then
                MyBase.Tables.Add(New CITASDataTable(ds.Tables("CITAS")))
            End If
            If (Not (ds.Tables("DUEÑOS")) Is Nothing) Then
                MyBase.Tables.Add(New DUEÑOSDataTable(ds.Tables("DUEÑOS")))
            End If
            If (Not (ds.Tables("ENFERMEDADES")) Is Nothing) Then
                MyBase.Tables.Add(New ENFERMEDADESDataTable(ds.Tables("ENFERMEDADES")))
            End If
            If (Not (ds.Tables("ENFERMEDADXRAZA")) Is Nothing) Then
                MyBase.Tables.Add(New ENFERMEDADXRAZADataTable(ds.Tables("ENFERMEDADXRAZA")))
            End If
            If (Not (ds.Tables("ESPECIES")) Is Nothing) Then
                MyBase.Tables.Add(New ESPECIESDataTable(ds.Tables("ESPECIES")))
            End If
            If (Not (ds.Tables("FECHA")) Is Nothing) Then
                MyBase.Tables.Add(New FECHADataTable(ds.Tables("FECHA")))
            End If
            If (Not (ds.Tables("MEDICINAS")) Is Nothing) Then
                MyBase.Tables.Add(New MEDICINASDataTable(ds.Tables("MEDICINAS")))
            End If
            If (Not (ds.Tables("MEDICINAXENFERMEDAD")) Is Nothing) Then
                MyBase.Tables.Add(New MEDICINAXENFERMEDADDataTable(ds.Tables("MEDICINAXENFERMEDAD")))
            End If
            If (Not (ds.Tables("MÉDICOS")) Is Nothing) Then
                MyBase.Tables.Add(New MÉDICOSDataTable(ds.Tables("MÉDICOS")))
            End If
            If (Not (ds.Tables("PACIENTES")) Is Nothing) Then
                MyBase.Tables.Add(New PACIENTESDataTable(ds.Tables("PACIENTES")))
            End If
            If (Not (ds.Tables("RAZAS")) Is Nothing) Then
                MyBase.Tables.Add(New RAZASDataTable(ds.Tables("RAZAS")))
            End If
            If (Not (ds.Tables("REPORTE")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTEDataTable(ds.Tables("REPORTE")))
            End If
            If (Not (ds.Tables("TEL_DUEÑO")) Is Nothing) Then
                MyBase.Tables.Add(New TEL_DUEÑODataTable(ds.Tables("TEL_DUEÑO")))
            End If
            If (Not (ds.Tables("TEL_MÉDICO")) Is Nothing) Then
                MyBase.Tables.Add(New TEL_MÉDICODataTable(ds.Tables("TEL_MÉDICO")))
            End If
            If (Not (ds.Tables("TURNOS")) Is Nothing) Then
                MyBase.Tables.Add(New TURNOSDataTable(ds.Tables("TURNOS")))
            End If
            If (Not (ds.Tables("TURNOXMÉDICO")) Is Nothing) Then
                MyBase.Tables.Add(New TURNOXMÉDICODataTable(ds.Tables("TURNOXMÉDICO")))
            End If
            If (Not (ds.Tables("USUARIOS")) Is Nothing) Then
                MyBase.Tables.Add(New USUARIOSDataTable(ds.Tables("USUARIOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_DUEÑO() As S_DUEÑODataTable
        Get
            Return Me.tableS_DUEÑO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_MÉDICO() As S_MÉDICODataTable
        Get
            Return Me.tableS_MÉDICO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_REPORTE() As S_REPORTEDataTable
        Get
            Return Me.tableS_REPORTE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AUDITORIAS() As AUDITORIASDataTable
        Get
            Return Me.tableAUDITORIAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CIRUGIAS() As CIRUGIASDataTable
        Get
            Return Me.tableCIRUGIAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CITAS() As CITASDataTable
        Get
            Return Me.tableCITAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DUEÑOS() As DUEÑOSDataTable
        Get
            Return Me.tableDUEÑOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ENFERMEDADES() As ENFERMEDADESDataTable
        Get
            Return Me.tableENFERMEDADES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ENFERMEDADXRAZA() As ENFERMEDADXRAZADataTable
        Get
            Return Me.tableENFERMEDADXRAZA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ESPECIES() As ESPECIESDataTable
        Get
            Return Me.tableESPECIES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FECHA() As FECHADataTable
        Get
            Return Me.tableFECHA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MEDICINAS() As MEDICINASDataTable
        Get
            Return Me.tableMEDICINAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MEDICINAXENFERMEDAD() As MEDICINAXENFERMEDADDataTable
        Get
            Return Me.tableMEDICINAXENFERMEDAD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MÉDICOS() As MÉDICOSDataTable
        Get
            Return Me.tableMÉDICOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PACIENTES() As PACIENTESDataTable
        Get
            Return Me.tablePACIENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RAZAS() As RAZASDataTable
        Get
            Return Me.tableRAZAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE() As REPORTEDataTable
        Get
            Return Me.tableREPORTE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TEL_DUEÑO() As TEL_DUEÑODataTable
        Get
            Return Me.tableTEL_DUEÑO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TEL_MÉDICO() As TEL_MÉDICODataTable
        Get
            Return Me.tableTEL_MÉDICO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TURNOS() As TURNOSDataTable
        Get
            Return Me.tableTURNOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TURNOXMÉDICO() As TURNOXMÉDICODataTable
        Get
            Return Me.tableTURNOXMÉDICO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property USUARIOS() As USUARIOSDataTable
        Get
            Return Me.tableUSUARIOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As databases = CType(MyBase.Clone,databases)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("S_DUEÑO")) Is Nothing) Then
                MyBase.Tables.Add(New S_DUEÑODataTable(ds.Tables("S_DUEÑO")))
            End If
            If (Not (ds.Tables("S_MÉDICO")) Is Nothing) Then
                MyBase.Tables.Add(New S_MÉDICODataTable(ds.Tables("S_MÉDICO")))
            End If
            If (Not (ds.Tables("S_REPORTE")) Is Nothing) Then
                MyBase.Tables.Add(New S_REPORTEDataTable(ds.Tables("S_REPORTE")))
            End If
            If (Not (ds.Tables("AUDITORIAS")) Is Nothing) Then
                MyBase.Tables.Add(New AUDITORIASDataTable(ds.Tables("AUDITORIAS")))
            End If
            If (Not (ds.Tables("CIRUGIAS")) Is Nothing) Then
                MyBase.Tables.Add(New CIRUGIASDataTable(ds.Tables("CIRUGIAS")))
            End If
            If (Not (ds.Tables("CITAS")) Is Nothing) Then
                MyBase.Tables.Add(New CITASDataTable(ds.Tables("CITAS")))
            End If
            If (Not (ds.Tables("DUEÑOS")) Is Nothing) Then
                MyBase.Tables.Add(New DUEÑOSDataTable(ds.Tables("DUEÑOS")))
            End If
            If (Not (ds.Tables("ENFERMEDADES")) Is Nothing) Then
                MyBase.Tables.Add(New ENFERMEDADESDataTable(ds.Tables("ENFERMEDADES")))
            End If
            If (Not (ds.Tables("ENFERMEDADXRAZA")) Is Nothing) Then
                MyBase.Tables.Add(New ENFERMEDADXRAZADataTable(ds.Tables("ENFERMEDADXRAZA")))
            End If
            If (Not (ds.Tables("ESPECIES")) Is Nothing) Then
                MyBase.Tables.Add(New ESPECIESDataTable(ds.Tables("ESPECIES")))
            End If
            If (Not (ds.Tables("FECHA")) Is Nothing) Then
                MyBase.Tables.Add(New FECHADataTable(ds.Tables("FECHA")))
            End If
            If (Not (ds.Tables("MEDICINAS")) Is Nothing) Then
                MyBase.Tables.Add(New MEDICINASDataTable(ds.Tables("MEDICINAS")))
            End If
            If (Not (ds.Tables("MEDICINAXENFERMEDAD")) Is Nothing) Then
                MyBase.Tables.Add(New MEDICINAXENFERMEDADDataTable(ds.Tables("MEDICINAXENFERMEDAD")))
            End If
            If (Not (ds.Tables("MÉDICOS")) Is Nothing) Then
                MyBase.Tables.Add(New MÉDICOSDataTable(ds.Tables("MÉDICOS")))
            End If
            If (Not (ds.Tables("PACIENTES")) Is Nothing) Then
                MyBase.Tables.Add(New PACIENTESDataTable(ds.Tables("PACIENTES")))
            End If
            If (Not (ds.Tables("RAZAS")) Is Nothing) Then
                MyBase.Tables.Add(New RAZASDataTable(ds.Tables("RAZAS")))
            End If
            If (Not (ds.Tables("REPORTE")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTEDataTable(ds.Tables("REPORTE")))
            End If
            If (Not (ds.Tables("TEL_DUEÑO")) Is Nothing) Then
                MyBase.Tables.Add(New TEL_DUEÑODataTable(ds.Tables("TEL_DUEÑO")))
            End If
            If (Not (ds.Tables("TEL_MÉDICO")) Is Nothing) Then
                MyBase.Tables.Add(New TEL_MÉDICODataTable(ds.Tables("TEL_MÉDICO")))
            End If
            If (Not (ds.Tables("TURNOS")) Is Nothing) Then
                MyBase.Tables.Add(New TURNOSDataTable(ds.Tables("TURNOS")))
            End If
            If (Not (ds.Tables("TURNOXMÉDICO")) Is Nothing) Then
                MyBase.Tables.Add(New TURNOXMÉDICODataTable(ds.Tables("TURNOXMÉDICO")))
            End If
            If (Not (ds.Tables("USUARIOS")) Is Nothing) Then
                MyBase.Tables.Add(New USUARIOSDataTable(ds.Tables("USUARIOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableS_DUEÑO = CType(MyBase.Tables("S_DUEÑO"),S_DUEÑODataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_DUEÑO) Is Nothing) Then
                Me.tableS_DUEÑO.InitVars
            End If
        End If
        Me.tableS_MÉDICO = CType(MyBase.Tables("S_MÉDICO"),S_MÉDICODataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_MÉDICO) Is Nothing) Then
                Me.tableS_MÉDICO.InitVars
            End If
        End If
        Me.tableS_REPORTE = CType(MyBase.Tables("S_REPORTE"),S_REPORTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_REPORTE) Is Nothing) Then
                Me.tableS_REPORTE.InitVars
            End If
        End If
        Me.tableAUDITORIAS = CType(MyBase.Tables("AUDITORIAS"),AUDITORIASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAUDITORIAS) Is Nothing) Then
                Me.tableAUDITORIAS.InitVars
            End If
        End If
        Me.tableCIRUGIAS = CType(MyBase.Tables("CIRUGIAS"),CIRUGIASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCIRUGIAS) Is Nothing) Then
                Me.tableCIRUGIAS.InitVars
            End If
        End If
        Me.tableCITAS = CType(MyBase.Tables("CITAS"),CITASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCITAS) Is Nothing) Then
                Me.tableCITAS.InitVars
            End If
        End If
        Me.tableDUEÑOS = CType(MyBase.Tables("DUEÑOS"),DUEÑOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDUEÑOS) Is Nothing) Then
                Me.tableDUEÑOS.InitVars
            End If
        End If
        Me.tableENFERMEDADES = CType(MyBase.Tables("ENFERMEDADES"),ENFERMEDADESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableENFERMEDADES) Is Nothing) Then
                Me.tableENFERMEDADES.InitVars
            End If
        End If
        Me.tableENFERMEDADXRAZA = CType(MyBase.Tables("ENFERMEDADXRAZA"),ENFERMEDADXRAZADataTable)
        If (initTable = true) Then
            If (Not (Me.tableENFERMEDADXRAZA) Is Nothing) Then
                Me.tableENFERMEDADXRAZA.InitVars
            End If
        End If
        Me.tableESPECIES = CType(MyBase.Tables("ESPECIES"),ESPECIESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableESPECIES) Is Nothing) Then
                Me.tableESPECIES.InitVars
            End If
        End If
        Me.tableFECHA = CType(MyBase.Tables("FECHA"),FECHADataTable)
        If (initTable = true) Then
            If (Not (Me.tableFECHA) Is Nothing) Then
                Me.tableFECHA.InitVars
            End If
        End If
        Me.tableMEDICINAS = CType(MyBase.Tables("MEDICINAS"),MEDICINASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMEDICINAS) Is Nothing) Then
                Me.tableMEDICINAS.InitVars
            End If
        End If
        Me.tableMEDICINAXENFERMEDAD = CType(MyBase.Tables("MEDICINAXENFERMEDAD"),MEDICINAXENFERMEDADDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMEDICINAXENFERMEDAD) Is Nothing) Then
                Me.tableMEDICINAXENFERMEDAD.InitVars
            End If
        End If
        Me.tableMÉDICOS = CType(MyBase.Tables("MÉDICOS"),MÉDICOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMÉDICOS) Is Nothing) Then
                Me.tableMÉDICOS.InitVars
            End If
        End If
        Me.tablePACIENTES = CType(MyBase.Tables("PACIENTES"),PACIENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePACIENTES) Is Nothing) Then
                Me.tablePACIENTES.InitVars
            End If
        End If
        Me.tableRAZAS = CType(MyBase.Tables("RAZAS"),RAZASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRAZAS) Is Nothing) Then
                Me.tableRAZAS.InitVars
            End If
        End If
        Me.tableREPORTE = CType(MyBase.Tables("REPORTE"),REPORTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE) Is Nothing) Then
                Me.tableREPORTE.InitVars
            End If
        End If
        Me.tableTEL_DUEÑO = CType(MyBase.Tables("TEL_DUEÑO"),TEL_DUEÑODataTable)
        If (initTable = true) Then
            If (Not (Me.tableTEL_DUEÑO) Is Nothing) Then
                Me.tableTEL_DUEÑO.InitVars
            End If
        End If
        Me.tableTEL_MÉDICO = CType(MyBase.Tables("TEL_MÉDICO"),TEL_MÉDICODataTable)
        If (initTable = true) Then
            If (Not (Me.tableTEL_MÉDICO) Is Nothing) Then
                Me.tableTEL_MÉDICO.InitVars
            End If
        End If
        Me.tableTURNOS = CType(MyBase.Tables("TURNOS"),TURNOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTURNOS) Is Nothing) Then
                Me.tableTURNOS.InitVars
            End If
        End If
        Me.tableTURNOXMÉDICO = CType(MyBase.Tables("TURNOXMÉDICO"),TURNOXMÉDICODataTable)
        If (initTable = true) Then
            If (Not (Me.tableTURNOXMÉDICO) Is Nothing) Then
                Me.tableTURNOXMÉDICO.InitVars
            End If
        End If
        Me.tableUSUARIOS = CType(MyBase.Tables("USUARIOS"),USUARIOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUSUARIOS) Is Nothing) Then
                Me.tableUSUARIOS.InitVars
            End If
        End If
        Me.relationSYS_C007383 = Me.Relations("SYS_C007383")
        Me.relationSYS_C007384 = Me.Relations("SYS_C007384")
        Me.relationSYS_C007392 = Me.Relations("SYS_C007392")
        Me.relationSYS_C007393 = Me.Relations("SYS_C007393")
        Me.relationSYS_C007395 = Me.Relations("SYS_C007395")
        Me.relationSYS_C007396 = Me.Relations("SYS_C007396")
        Me.relationSYS_C007367 = Me.Relations("SYS_C007367")
        Me.relationSYS_C007368 = Me.Relations("SYS_C007368")
        Me.relationSYS_C007369 = Me.Relations("SYS_C007369")
        Me.relationSYS_C007317 = Me.Relations("SYS_C007317")
        Me.relationSYS_C007403 = Me.Relations("SYS_C007403")
        Me.relationSYS_C007398 = Me.Relations("SYS_C007398")
        Me.relationSYS_C007400 = Me.Relations("SYS_C007400")
        Me.relationSYS_C007401 = Me.Relations("SYS_C007401")
        Me.relationSYS_C0073951 = Me.Relations("SYS_C0073951")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "databases"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/databases.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableS_DUEÑO = New S_DUEÑODataTable()
        MyBase.Tables.Add(Me.tableS_DUEÑO)
        Me.tableS_MÉDICO = New S_MÉDICODataTable()
        MyBase.Tables.Add(Me.tableS_MÉDICO)
        Me.tableS_REPORTE = New S_REPORTEDataTable()
        MyBase.Tables.Add(Me.tableS_REPORTE)
        Me.tableAUDITORIAS = New AUDITORIASDataTable()
        MyBase.Tables.Add(Me.tableAUDITORIAS)
        Me.tableCIRUGIAS = New CIRUGIASDataTable()
        MyBase.Tables.Add(Me.tableCIRUGIAS)
        Me.tableCITAS = New CITASDataTable()
        MyBase.Tables.Add(Me.tableCITAS)
        Me.tableDUEÑOS = New DUEÑOSDataTable()
        MyBase.Tables.Add(Me.tableDUEÑOS)
        Me.tableENFERMEDADES = New ENFERMEDADESDataTable()
        MyBase.Tables.Add(Me.tableENFERMEDADES)
        Me.tableENFERMEDADXRAZA = New ENFERMEDADXRAZADataTable()
        MyBase.Tables.Add(Me.tableENFERMEDADXRAZA)
        Me.tableESPECIES = New ESPECIESDataTable()
        MyBase.Tables.Add(Me.tableESPECIES)
        Me.tableFECHA = New FECHADataTable()
        MyBase.Tables.Add(Me.tableFECHA)
        Me.tableMEDICINAS = New MEDICINASDataTable()
        MyBase.Tables.Add(Me.tableMEDICINAS)
        Me.tableMEDICINAXENFERMEDAD = New MEDICINAXENFERMEDADDataTable()
        MyBase.Tables.Add(Me.tableMEDICINAXENFERMEDAD)
        Me.tableMÉDICOS = New MÉDICOSDataTable()
        MyBase.Tables.Add(Me.tableMÉDICOS)
        Me.tablePACIENTES = New PACIENTESDataTable()
        MyBase.Tables.Add(Me.tablePACIENTES)
        Me.tableRAZAS = New RAZASDataTable()
        MyBase.Tables.Add(Me.tableRAZAS)
        Me.tableREPORTE = New REPORTEDataTable()
        MyBase.Tables.Add(Me.tableREPORTE)
        Me.tableTEL_DUEÑO = New TEL_DUEÑODataTable()
        MyBase.Tables.Add(Me.tableTEL_DUEÑO)
        Me.tableTEL_MÉDICO = New TEL_MÉDICODataTable()
        MyBase.Tables.Add(Me.tableTEL_MÉDICO)
        Me.tableTURNOS = New TURNOSDataTable()
        MyBase.Tables.Add(Me.tableTURNOS)
        Me.tableTURNOXMÉDICO = New TURNOXMÉDICODataTable()
        MyBase.Tables.Add(Me.tableTURNOXMÉDICO)
        Me.tableUSUARIOS = New USUARIOSDataTable()
        MyBase.Tables.Add(Me.tableUSUARIOS)
        Me.relationSYS_C007383 = New Global.System.Data.DataRelation("SYS_C007383", New Global.System.Data.DataColumn() {Me.tablePACIENTES.PAC_CODIGOPColumn}, New Global.System.Data.DataColumn() {Me.tableCITAS.PAC_CODIGOPColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007383)
        Me.relationSYS_C007384 = New Global.System.Data.DataRelation("SYS_C007384", New Global.System.Data.DataColumn() {Me.tableCIRUGIAS.CIR_CODIGOCColumn}, New Global.System.Data.DataColumn() {Me.tableCITAS.CIR_CODIGOCColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007384)
        Me.relationSYS_C007392 = New Global.System.Data.DataRelation("SYS_C007392", New Global.System.Data.DataColumn() {Me.tableENFERMEDADES.ENF_CODIGOEColumn}, New Global.System.Data.DataColumn() {Me.tableENFERMEDADXRAZA.ENF_CODIGOEColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007392)
        Me.relationSYS_C007393 = New Global.System.Data.DataRelation("SYS_C007393", New Global.System.Data.DataColumn() {Me.tableRAZAS.RAZ_CODIGORColumn}, New Global.System.Data.DataColumn() {Me.tableENFERMEDADXRAZA.RAZ_CODIGORColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007393)
        Me.relationSYS_C007395 = New Global.System.Data.DataRelation("SYS_C007395", New Global.System.Data.DataColumn() {Me.tableENFERMEDADES.ENF_CODIGOEColumn}, New Global.System.Data.DataColumn() {Me.tableMEDICINAXENFERMEDAD.ENF_CODIGOEColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007395)
        Me.relationSYS_C007396 = New Global.System.Data.DataRelation("SYS_C007396", New Global.System.Data.DataColumn() {Me.tableMEDICINAS.MED_CODIGOMEColumn}, New Global.System.Data.DataColumn() {Me.tableMEDICINAXENFERMEDAD.MED_CODIGOMEColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007396)
        Me.relationSYS_C007367 = New Global.System.Data.DataRelation("SYS_C007367", New Global.System.Data.DataColumn() {Me.tableRAZAS.RAZ_CODIGORColumn}, New Global.System.Data.DataColumn() {Me.tablePACIENTES.RAZ_CODIGORColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007367)
        Me.relationSYS_C007368 = New Global.System.Data.DataRelation("SYS_C007368", New Global.System.Data.DataColumn() {Me.tableDUEÑOS.DUE_CODIGODColumn}, New Global.System.Data.DataColumn() {Me.tablePACIENTES.DUE_CODIGODColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007368)
        Me.relationSYS_C007369 = New Global.System.Data.DataRelation("SYS_C007369", New Global.System.Data.DataColumn() {Me.tableMÉDICOS.MED_CODIGOMColumn}, New Global.System.Data.DataColumn() {Me.tablePACIENTES.MED_CODIGOMColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007369)
        Me.relationSYS_C007317 = New Global.System.Data.DataRelation("SYS_C007317", New Global.System.Data.DataColumn() {Me.tableESPECIES.ESP_CODIGOEColumn}, New Global.System.Data.DataColumn() {Me.tableRAZAS.ESP_CODIGOEColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007317)
        Me.relationSYS_C007403 = New Global.System.Data.DataRelation("SYS_C007403", New Global.System.Data.DataColumn() {Me.tableDUEÑOS.DUE_CODIGODColumn}, New Global.System.Data.DataColumn() {Me.tableTEL_DUEÑO.DUE_CODIGODColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007403)
        Me.relationSYS_C007398 = New Global.System.Data.DataRelation("SYS_C007398", New Global.System.Data.DataColumn() {Me.tableMÉDICOS.MED_CODIGOMColumn}, New Global.System.Data.DataColumn() {Me.tableTEL_MÉDICO.MED_CODIGOMColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007398)
        Me.relationSYS_C007400 = New Global.System.Data.DataRelation("SYS_C007400", New Global.System.Data.DataColumn() {Me.tableMÉDICOS.MED_CODIGOMColumn}, New Global.System.Data.DataColumn() {Me.tableTURNOXMÉDICO.MED_CODIGOMColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007400)
        Me.relationSYS_C007401 = New Global.System.Data.DataRelation("SYS_C007401", New Global.System.Data.DataColumn() {Me.tableTURNOS.TUR_CODIGOTColumn}, New Global.System.Data.DataColumn() {Me.tableTURNOXMÉDICO.TUR_CODIGOTColumn}, false)
        Me.Relations.Add(Me.relationSYS_C007401)
        Me.relationSYS_C0073951 = New Global.System.Data.DataRelation("SYS_C0073951", New Global.System.Data.DataColumn() {Me.tableENFERMEDADXRAZA.ENF_CODIGOEColumn}, New Global.System.Data.DataColumn() {Me.tableMEDICINAXENFERMEDAD.ENF_CODIGOEColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0073951)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeS_DUEÑO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeS_MÉDICO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeS_REPORTE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAUDITORIAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeCIRUGIAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeCITAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeDUEÑOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeENFERMEDADES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeENFERMEDADXRAZA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeESPECIES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeFECHA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeMEDICINAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeMEDICINAXENFERMEDAD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeMÉDICOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializePACIENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeRAZAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeREPORTE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeTEL_DUEÑO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeTEL_MÉDICO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeTURNOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeTURNOXMÉDICO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeUSUARIOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As databases = New databases()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub S_DUEÑORowChangeEventHandler(ByVal sender As Object, ByVal e As S_DUEÑORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub S_MÉDICORowChangeEventHandler(ByVal sender As Object, ByVal e As S_MÉDICORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub S_REPORTERowChangeEventHandler(ByVal sender As Object, ByVal e As S_REPORTERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AUDITORIASRowChangeEventHandler(ByVal sender As Object, ByVal e As AUDITORIASRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub CIRUGIASRowChangeEventHandler(ByVal sender As Object, ByVal e As CIRUGIASRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub CITASRowChangeEventHandler(ByVal sender As Object, ByVal e As CITASRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub DUEÑOSRowChangeEventHandler(ByVal sender As Object, ByVal e As DUEÑOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ENFERMEDADESRowChangeEventHandler(ByVal sender As Object, ByVal e As ENFERMEDADESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ENFERMEDADXRAZARowChangeEventHandler(ByVal sender As Object, ByVal e As ENFERMEDADXRAZARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ESPECIESRowChangeEventHandler(ByVal sender As Object, ByVal e As ESPECIESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub FECHARowChangeEventHandler(ByVal sender As Object, ByVal e As FECHARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub MEDICINASRowChangeEventHandler(ByVal sender As Object, ByVal e As MEDICINASRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub MEDICINAXENFERMEDADRowChangeEventHandler(ByVal sender As Object, ByVal e As MEDICINAXENFERMEDADRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub MÉDICOSRowChangeEventHandler(ByVal sender As Object, ByVal e As MÉDICOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub PACIENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As PACIENTESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub RAZASRowChangeEventHandler(ByVal sender As Object, ByVal e As RAZASRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub REPORTERowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub TEL_DUEÑORowChangeEventHandler(ByVal sender As Object, ByVal e As TEL_DUEÑORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub TEL_MÉDICORowChangeEventHandler(ByVal sender As Object, ByVal e As TEL_MÉDICORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub TURNOSRowChangeEventHandler(ByVal sender As Object, ByVal e As TURNOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub TURNOXMÉDICORowChangeEventHandler(ByVal sender As Object, ByVal e As TURNOXMÉDICORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub USUARIOSRowChangeEventHandler(ByVal sender As Object, ByVal e As USUARIOSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_DUEÑODataTable
        Inherits Global.System.Data.TypedTableBase(Of S_DUEÑORow)
        
        Private columnDUE_CODIGOD As Global.System.Data.DataColumn
        
        Private columnDUE_NOMBRE1 As Global.System.Data.DataColumn
        
        Private columnDUE_NOMBRE2 As Global.System.Data.DataColumn
        
        Private columnDUE_APELLIDO1 As Global.System.Data.DataColumn
        
        Private columnDUE_APELLIDO2 As Global.System.Data.DataColumn
        
        Private columnDUE_IDENTIFICACION As Global.System.Data.DataColumn
        
        Private columnDUE_DIRECCION As Global.System.Data.DataColumn
        
        Private columnTELEFONOSM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_DUEÑO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_CODIGODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_CODIGOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_NOMBRE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_NOMBRE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_NOMBRE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_NOMBRE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_APELLIDO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_APELLIDO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_APELLIDO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_APELLIDO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_IDENTIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_IDENTIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TELEFONOSMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFONOSM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_DUEÑORow
            Get
                Return CType(Me.Rows(index),S_DUEÑORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_DUEÑORowChanging As S_DUEÑORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_DUEÑORowChanged As S_DUEÑORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_DUEÑORowDeleting As S_DUEÑORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_DUEÑORowDeleted As S_DUEÑORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddS_DUEÑORow(ByVal row As S_DUEÑORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddS_DUEÑORow(ByVal DUE_CODIGOD As Decimal, ByVal DUE_NOMBRE1 As String, ByVal DUE_NOMBRE2 As String, ByVal DUE_APELLIDO1 As String, ByVal DUE_APELLIDO2 As String, ByVal DUE_IDENTIFICACION As String, ByVal DUE_DIRECCION As String, ByVal TELEFONOSM As String) As S_DUEÑORow
            Dim rowS_DUEÑORow As S_DUEÑORow = CType(Me.NewRow,S_DUEÑORow)
            Dim columnValuesArray() As Object = New Object() {DUE_CODIGOD, DUE_NOMBRE1, DUE_NOMBRE2, DUE_APELLIDO1, DUE_APELLIDO2, DUE_IDENTIFICACION, DUE_DIRECCION, TELEFONOSM}
            rowS_DUEÑORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_DUEÑORow)
            Return rowS_DUEÑORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_DUEÑODataTable = CType(MyBase.Clone,S_DUEÑODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_DUEÑODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnDUE_CODIGOD = MyBase.Columns("DUE_CODIGOD")
            Me.columnDUE_NOMBRE1 = MyBase.Columns("DUE_NOMBRE1")
            Me.columnDUE_NOMBRE2 = MyBase.Columns("DUE_NOMBRE2")
            Me.columnDUE_APELLIDO1 = MyBase.Columns("DUE_APELLIDO1")
            Me.columnDUE_APELLIDO2 = MyBase.Columns("DUE_APELLIDO2")
            Me.columnDUE_IDENTIFICACION = MyBase.Columns("DUE_IDENTIFICACION")
            Me.columnDUE_DIRECCION = MyBase.Columns("DUE_DIRECCION")
            Me.columnTELEFONOSM = MyBase.Columns("TELEFONOSM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnDUE_CODIGOD = New Global.System.Data.DataColumn("DUE_CODIGOD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_CODIGOD)
            Me.columnDUE_NOMBRE1 = New Global.System.Data.DataColumn("DUE_NOMBRE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_NOMBRE1)
            Me.columnDUE_NOMBRE2 = New Global.System.Data.DataColumn("DUE_NOMBRE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_NOMBRE2)
            Me.columnDUE_APELLIDO1 = New Global.System.Data.DataColumn("DUE_APELLIDO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_APELLIDO1)
            Me.columnDUE_APELLIDO2 = New Global.System.Data.DataColumn("DUE_APELLIDO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_APELLIDO2)
            Me.columnDUE_IDENTIFICACION = New Global.System.Data.DataColumn("DUE_IDENTIFICACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_IDENTIFICACION)
            Me.columnDUE_DIRECCION = New Global.System.Data.DataColumn("DUE_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_DIRECCION)
            Me.columnTELEFONOSM = New Global.System.Data.DataColumn("TELEFONOSM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONOSM)
            Me.columnDUE_CODIGOD.AllowDBNull = false
            Me.columnDUE_NOMBRE1.AllowDBNull = false
            Me.columnDUE_NOMBRE1.MaxLength = 50
            Me.columnDUE_NOMBRE2.AllowDBNull = false
            Me.columnDUE_NOMBRE2.MaxLength = 50
            Me.columnDUE_APELLIDO1.AllowDBNull = false
            Me.columnDUE_APELLIDO1.MaxLength = 50
            Me.columnDUE_APELLIDO2.AllowDBNull = false
            Me.columnDUE_APELLIDO2.MaxLength = 50
            Me.columnDUE_IDENTIFICACION.AllowDBNull = false
            Me.columnDUE_IDENTIFICACION.MaxLength = 20
            Me.columnDUE_DIRECCION.AllowDBNull = false
            Me.columnDUE_DIRECCION.MaxLength = 200
            Me.columnTELEFONOSM.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewS_DUEÑORow() As S_DUEÑORow
            Return CType(Me.NewRow,S_DUEÑORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_DUEÑORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_DUEÑORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_DUEÑORowChangedEvent) Is Nothing) Then
                RaiseEvent S_DUEÑORowChanged(Me, New S_DUEÑORowChangeEvent(CType(e.Row,S_DUEÑORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_DUEÑORowChangingEvent) Is Nothing) Then
                RaiseEvent S_DUEÑORowChanging(Me, New S_DUEÑORowChangeEvent(CType(e.Row,S_DUEÑORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_DUEÑORowDeletedEvent) Is Nothing) Then
                RaiseEvent S_DUEÑORowDeleted(Me, New S_DUEÑORowChangeEvent(CType(e.Row,S_DUEÑORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_DUEÑORowDeletingEvent) Is Nothing) Then
                RaiseEvent S_DUEÑORowDeleting(Me, New S_DUEÑORowChangeEvent(CType(e.Row,S_DUEÑORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveS_DUEÑORow(ByVal row As S_DUEÑORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_DUEÑODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_MÉDICODataTable
        Inherits Global.System.Data.TypedTableBase(Of S_MÉDICORow)
        
        Private columnMED_CODIGOM As Global.System.Data.DataColumn
        
        Private columnMED_NOMBRE1 As Global.System.Data.DataColumn
        
        Private columnMED_NOMBRE2 As Global.System.Data.DataColumn
        
        Private columnMED_APELLIDO1 As Global.System.Data.DataColumn
        
        Private columnMED_APELLIDO2 As Global.System.Data.DataColumn
        
        Private columnMED_DIRECCION As Global.System.Data.DataColumn
        
        Private columnMED_EMERGENCIA As Global.System.Data.DataColumn
        
        Private columnMED_INGRESO As Global.System.Data.DataColumn
        
        Private columnTELEFONOSM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_MÉDICO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_CODIGOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_CODIGOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_NOMBRE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_NOMBRE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_NOMBRE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_NOMBRE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_APELLIDO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_APELLIDO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_APELLIDO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_APELLIDO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_EMERGENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_EMERGENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_INGRESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_INGRESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TELEFONOSMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFONOSM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_MÉDICORow
            Get
                Return CType(Me.Rows(index),S_MÉDICORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_MÉDICORowChanging As S_MÉDICORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_MÉDICORowChanged As S_MÉDICORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_MÉDICORowDeleting As S_MÉDICORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_MÉDICORowDeleted As S_MÉDICORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddS_MÉDICORow(ByVal row As S_MÉDICORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddS_MÉDICORow(ByVal MED_CODIGOM As Decimal, ByVal MED_NOMBRE1 As String, ByVal MED_NOMBRE2 As String, ByVal MED_APELLIDO1 As String, ByVal MED_APELLIDO2 As String, ByVal MED_DIRECCION As String, ByVal MED_EMERGENCIA As String, ByVal MED_INGRESO As Date, ByVal TELEFONOSM As String) As S_MÉDICORow
            Dim rowS_MÉDICORow As S_MÉDICORow = CType(Me.NewRow,S_MÉDICORow)
            Dim columnValuesArray() As Object = New Object() {MED_CODIGOM, MED_NOMBRE1, MED_NOMBRE2, MED_APELLIDO1, MED_APELLIDO2, MED_DIRECCION, MED_EMERGENCIA, MED_INGRESO, TELEFONOSM}
            rowS_MÉDICORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_MÉDICORow)
            Return rowS_MÉDICORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_MÉDICODataTable = CType(MyBase.Clone,S_MÉDICODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_MÉDICODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMED_CODIGOM = MyBase.Columns("MED_CODIGOM")
            Me.columnMED_NOMBRE1 = MyBase.Columns("MED_NOMBRE1")
            Me.columnMED_NOMBRE2 = MyBase.Columns("MED_NOMBRE2")
            Me.columnMED_APELLIDO1 = MyBase.Columns("MED_APELLIDO1")
            Me.columnMED_APELLIDO2 = MyBase.Columns("MED_APELLIDO2")
            Me.columnMED_DIRECCION = MyBase.Columns("MED_DIRECCION")
            Me.columnMED_EMERGENCIA = MyBase.Columns("MED_EMERGENCIA")
            Me.columnMED_INGRESO = MyBase.Columns("MED_INGRESO")
            Me.columnTELEFONOSM = MyBase.Columns("TELEFONOSM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMED_CODIGOM = New Global.System.Data.DataColumn("MED_CODIGOM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_CODIGOM)
            Me.columnMED_NOMBRE1 = New Global.System.Data.DataColumn("MED_NOMBRE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_NOMBRE1)
            Me.columnMED_NOMBRE2 = New Global.System.Data.DataColumn("MED_NOMBRE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_NOMBRE2)
            Me.columnMED_APELLIDO1 = New Global.System.Data.DataColumn("MED_APELLIDO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_APELLIDO1)
            Me.columnMED_APELLIDO2 = New Global.System.Data.DataColumn("MED_APELLIDO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_APELLIDO2)
            Me.columnMED_DIRECCION = New Global.System.Data.DataColumn("MED_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_DIRECCION)
            Me.columnMED_EMERGENCIA = New Global.System.Data.DataColumn("MED_EMERGENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_EMERGENCIA)
            Me.columnMED_INGRESO = New Global.System.Data.DataColumn("MED_INGRESO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_INGRESO)
            Me.columnTELEFONOSM = New Global.System.Data.DataColumn("TELEFONOSM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONOSM)
            Me.columnMED_CODIGOM.AllowDBNull = false
            Me.columnMED_NOMBRE1.AllowDBNull = false
            Me.columnMED_NOMBRE1.MaxLength = 50
            Me.columnMED_NOMBRE2.AllowDBNull = false
            Me.columnMED_NOMBRE2.MaxLength = 50
            Me.columnMED_APELLIDO1.AllowDBNull = false
            Me.columnMED_APELLIDO1.MaxLength = 50
            Me.columnMED_APELLIDO2.AllowDBNull = false
            Me.columnMED_APELLIDO2.MaxLength = 50
            Me.columnMED_DIRECCION.AllowDBNull = false
            Me.columnMED_DIRECCION.MaxLength = 200
            Me.columnMED_EMERGENCIA.AllowDBNull = false
            Me.columnMED_EMERGENCIA.MaxLength = 2
            Me.columnMED_INGRESO.AllowDBNull = false
            Me.columnTELEFONOSM.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewS_MÉDICORow() As S_MÉDICORow
            Return CType(Me.NewRow,S_MÉDICORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_MÉDICORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_MÉDICORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_MÉDICORowChangedEvent) Is Nothing) Then
                RaiseEvent S_MÉDICORowChanged(Me, New S_MÉDICORowChangeEvent(CType(e.Row,S_MÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_MÉDICORowChangingEvent) Is Nothing) Then
                RaiseEvent S_MÉDICORowChanging(Me, New S_MÉDICORowChangeEvent(CType(e.Row,S_MÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_MÉDICORowDeletedEvent) Is Nothing) Then
                RaiseEvent S_MÉDICORowDeleted(Me, New S_MÉDICORowChangeEvent(CType(e.Row,S_MÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_MÉDICORowDeletingEvent) Is Nothing) Then
                RaiseEvent S_MÉDICORowDeleting(Me, New S_MÉDICORowChangeEvent(CType(e.Row,S_MÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveS_MÉDICORow(ByVal row As S_MÉDICORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_MÉDICODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_REPORTEDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_REPORTERow)
        
        Private columnREP_SECUENCIA As Global.System.Data.DataColumn
        
        Private columnREP_MESH As Global.System.Data.DataColumn
        
        Private columnREP_FECHAH As Global.System.Data.DataColumn
        
        Private columnDUE_CODIGOD As Global.System.Data.DataColumn
        
        Private columnNOMBRED As Global.System.Data.DataColumn
        
        Private columnTELEFONOSD As Global.System.Data.DataColumn
        
        Private columnPAC_CODIGOP As Global.System.Data.DataColumn
        
        Private columnPAC_NOMBREP As Global.System.Data.DataColumn
        
        Private columnESP_CODIGOE As Global.System.Data.DataColumn
        
        Private columnESP_ESPECIE As Global.System.Data.DataColumn
        
        Private columnCIT_CODIGOC As Global.System.Data.DataColumn
        
        Private columnCIT_CALENDARIZADO As Global.System.Data.DataColumn
        
        Private columnMED_CODIGOM As Global.System.Data.DataColumn
        
        Private columnNOMBREM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_REPORTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property REP_SECUENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREP_SECUENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property REP_MESHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREP_MESH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property REP_FECHAHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREP_FECHAH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_CODIGODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_CODIGOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NOMBREDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TELEFONOSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFONOSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PAC_CODIGOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAC_CODIGOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PAC_NOMBREPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAC_NOMBREP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ESP_CODIGOEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_CODIGOE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ESP_ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_ESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIT_CODIGOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIT_CODIGOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIT_CALENDARIZADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIT_CALENDARIZADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_CODIGOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_CODIGOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NOMBREMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBREM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_REPORTERow
            Get
                Return CType(Me.Rows(index),S_REPORTERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_REPORTERowChanging As S_REPORTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_REPORTERowChanged As S_REPORTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_REPORTERowDeleting As S_REPORTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event S_REPORTERowDeleted As S_REPORTERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddS_REPORTERow(ByVal row As S_REPORTERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddS_REPORTERow(ByVal REP_SECUENCIA As Decimal, ByVal REP_MESH As String, ByVal REP_FECHAH As Date, ByVal DUE_CODIGOD As Decimal, ByVal NOMBRED As String, ByVal TELEFONOSD As String, ByVal PAC_CODIGOP As Decimal, ByVal PAC_NOMBREP As String, ByVal ESP_CODIGOE As Decimal, ByVal ESP_ESPECIE As String, ByVal CIT_CODIGOC As Decimal, ByVal CIT_CALENDARIZADO As Date, ByVal MED_CODIGOM As Decimal, ByVal NOMBREM As String) As S_REPORTERow
            Dim rowS_REPORTERow As S_REPORTERow = CType(Me.NewRow,S_REPORTERow)
            Dim columnValuesArray() As Object = New Object() {REP_SECUENCIA, REP_MESH, REP_FECHAH, DUE_CODIGOD, NOMBRED, TELEFONOSD, PAC_CODIGOP, PAC_NOMBREP, ESP_CODIGOE, ESP_ESPECIE, CIT_CODIGOC, CIT_CALENDARIZADO, MED_CODIGOM, NOMBREM}
            rowS_REPORTERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_REPORTERow)
            Return rowS_REPORTERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_REPORTEDataTable = CType(MyBase.Clone,S_REPORTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_REPORTEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnREP_SECUENCIA = MyBase.Columns("REP_SECUENCIA")
            Me.columnREP_MESH = MyBase.Columns("REP_MESH")
            Me.columnREP_FECHAH = MyBase.Columns("REP_FECHAH")
            Me.columnDUE_CODIGOD = MyBase.Columns("DUE_CODIGOD")
            Me.columnNOMBRED = MyBase.Columns("NOMBRED")
            Me.columnTELEFONOSD = MyBase.Columns("TELEFONOSD")
            Me.columnPAC_CODIGOP = MyBase.Columns("PAC_CODIGOP")
            Me.columnPAC_NOMBREP = MyBase.Columns("PAC_NOMBREP")
            Me.columnESP_CODIGOE = MyBase.Columns("ESP_CODIGOE")
            Me.columnESP_ESPECIE = MyBase.Columns("ESP_ESPECIE")
            Me.columnCIT_CODIGOC = MyBase.Columns("CIT_CODIGOC")
            Me.columnCIT_CALENDARIZADO = MyBase.Columns("CIT_CALENDARIZADO")
            Me.columnMED_CODIGOM = MyBase.Columns("MED_CODIGOM")
            Me.columnNOMBREM = MyBase.Columns("NOMBREM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnREP_SECUENCIA = New Global.System.Data.DataColumn("REP_SECUENCIA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREP_SECUENCIA)
            Me.columnREP_MESH = New Global.System.Data.DataColumn("REP_MESH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREP_MESH)
            Me.columnREP_FECHAH = New Global.System.Data.DataColumn("REP_FECHAH", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREP_FECHAH)
            Me.columnDUE_CODIGOD = New Global.System.Data.DataColumn("DUE_CODIGOD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_CODIGOD)
            Me.columnNOMBRED = New Global.System.Data.DataColumn("NOMBRED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRED)
            Me.columnTELEFONOSD = New Global.System.Data.DataColumn("TELEFONOSD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONOSD)
            Me.columnPAC_CODIGOP = New Global.System.Data.DataColumn("PAC_CODIGOP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAC_CODIGOP)
            Me.columnPAC_NOMBREP = New Global.System.Data.DataColumn("PAC_NOMBREP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAC_NOMBREP)
            Me.columnESP_CODIGOE = New Global.System.Data.DataColumn("ESP_CODIGOE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_CODIGOE)
            Me.columnESP_ESPECIE = New Global.System.Data.DataColumn("ESP_ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_ESPECIE)
            Me.columnCIT_CODIGOC = New Global.System.Data.DataColumn("CIT_CODIGOC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIT_CODIGOC)
            Me.columnCIT_CALENDARIZADO = New Global.System.Data.DataColumn("CIT_CALENDARIZADO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIT_CALENDARIZADO)
            Me.columnMED_CODIGOM = New Global.System.Data.DataColumn("MED_CODIGOM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_CODIGOM)
            Me.columnNOMBREM = New Global.System.Data.DataColumn("NOMBREM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBREM)
            Me.columnREP_SECUENCIA.AllowDBNull = false
            Me.columnREP_MESH.AllowDBNull = false
            Me.columnREP_MESH.MaxLength = 50
            Me.columnREP_FECHAH.AllowDBNull = false
            Me.columnDUE_CODIGOD.AllowDBNull = false
            Me.columnNOMBRED.MaxLength = 203
            Me.columnTELEFONOSD.MaxLength = 4000
            Me.columnPAC_CODIGOP.AllowDBNull = false
            Me.columnPAC_NOMBREP.AllowDBNull = false
            Me.columnPAC_NOMBREP.MaxLength = 50
            Me.columnESP_CODIGOE.AllowDBNull = false
            Me.columnESP_ESPECIE.AllowDBNull = false
            Me.columnESP_ESPECIE.MaxLength = 50
            Me.columnCIT_CODIGOC.AllowDBNull = false
            Me.columnMED_CODIGOM.AllowDBNull = false
            Me.columnNOMBREM.MaxLength = 203
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewS_REPORTERow() As S_REPORTERow
            Return CType(Me.NewRow,S_REPORTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_REPORTERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_REPORTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_REPORTERowChangedEvent) Is Nothing) Then
                RaiseEvent S_REPORTERowChanged(Me, New S_REPORTERowChangeEvent(CType(e.Row,S_REPORTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_REPORTERowChangingEvent) Is Nothing) Then
                RaiseEvent S_REPORTERowChanging(Me, New S_REPORTERowChangeEvent(CType(e.Row,S_REPORTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_REPORTERowDeletedEvent) Is Nothing) Then
                RaiseEvent S_REPORTERowDeleted(Me, New S_REPORTERowChangeEvent(CType(e.Row,S_REPORTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_REPORTERowDeletingEvent) Is Nothing) Then
                RaiseEvent S_REPORTERowDeleting(Me, New S_REPORTERowChangeEvent(CType(e.Row,S_REPORTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveS_REPORTERow(ByVal row As S_REPORTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_REPORTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AUDITORIASDataTable
        Inherits Global.System.Data.TypedTableBase(Of AUDITORIASRow)
        
        Private columnUSU_USUARIO As Global.System.Data.DataColumn
        
        Private columnAUD_PROCESO As Global.System.Data.DataColumn
        
        Private columnAUD_FECHAHORA As Global.System.Data.DataColumn
        
        Private columnAUD_TABLA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AUDITORIAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USU_USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSU_USUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AUD_PROCESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUD_PROCESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AUD_FECHAHORAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUD_FECHAHORA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AUD_TABLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUD_TABLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AUDITORIASRow
            Get
                Return CType(Me.Rows(index),AUDITORIASRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AUDITORIASRowChanging As AUDITORIASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AUDITORIASRowChanged As AUDITORIASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AUDITORIASRowDeleting As AUDITORIASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AUDITORIASRowDeleted As AUDITORIASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAUDITORIASRow(ByVal row As AUDITORIASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAUDITORIASRow(ByVal USU_USUARIO As String, ByVal AUD_PROCESO As String, ByVal AUD_FECHAHORA As Date, ByVal AUD_TABLA As String) As AUDITORIASRow
            Dim rowAUDITORIASRow As AUDITORIASRow = CType(Me.NewRow,AUDITORIASRow)
            Dim columnValuesArray() As Object = New Object() {USU_USUARIO, AUD_PROCESO, AUD_FECHAHORA, AUD_TABLA}
            rowAUDITORIASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAUDITORIASRow)
            Return rowAUDITORIASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUSU_USUARIOAUD_FECHAHORA(ByVal USU_USUARIO As String, ByVal AUD_FECHAHORA As Date) As AUDITORIASRow
            Return CType(Me.Rows.Find(New Object() {USU_USUARIO, AUD_FECHAHORA}),AUDITORIASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AUDITORIASDataTable = CType(MyBase.Clone,AUDITORIASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AUDITORIASDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnUSU_USUARIO = MyBase.Columns("USU_USUARIO")
            Me.columnAUD_PROCESO = MyBase.Columns("AUD_PROCESO")
            Me.columnAUD_FECHAHORA = MyBase.Columns("AUD_FECHAHORA")
            Me.columnAUD_TABLA = MyBase.Columns("AUD_TABLA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnUSU_USUARIO = New Global.System.Data.DataColumn("USU_USUARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSU_USUARIO)
            Me.columnAUD_PROCESO = New Global.System.Data.DataColumn("AUD_PROCESO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUD_PROCESO)
            Me.columnAUD_FECHAHORA = New Global.System.Data.DataColumn("AUD_FECHAHORA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUD_FECHAHORA)
            Me.columnAUD_TABLA = New Global.System.Data.DataColumn("AUD_TABLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUD_TABLA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUSU_USUARIO, Me.columnAUD_FECHAHORA}, true))
            Me.columnUSU_USUARIO.AllowDBNull = false
            Me.columnUSU_USUARIO.MaxLength = 50
            Me.columnAUD_PROCESO.AllowDBNull = false
            Me.columnAUD_PROCESO.MaxLength = 10
            Me.columnAUD_FECHAHORA.AllowDBNull = false
            Me.columnAUD_TABLA.AllowDBNull = false
            Me.columnAUD_TABLA.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAUDITORIASRow() As AUDITORIASRow
            Return CType(Me.NewRow,AUDITORIASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AUDITORIASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AUDITORIASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AUDITORIASRowChangedEvent) Is Nothing) Then
                RaiseEvent AUDITORIASRowChanged(Me, New AUDITORIASRowChangeEvent(CType(e.Row,AUDITORIASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AUDITORIASRowChangingEvent) Is Nothing) Then
                RaiseEvent AUDITORIASRowChanging(Me, New AUDITORIASRowChangeEvent(CType(e.Row,AUDITORIASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AUDITORIASRowDeletedEvent) Is Nothing) Then
                RaiseEvent AUDITORIASRowDeleted(Me, New AUDITORIASRowChangeEvent(CType(e.Row,AUDITORIASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AUDITORIASRowDeletingEvent) Is Nothing) Then
                RaiseEvent AUDITORIASRowDeleting(Me, New AUDITORIASRowChangeEvent(CType(e.Row,AUDITORIASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAUDITORIASRow(ByVal row As AUDITORIASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AUDITORIASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CIRUGIASDataTable
        Inherits Global.System.Data.TypedTableBase(Of CIRUGIASRow)
        
        Private columnCIR_CODIGOC As Global.System.Data.DataColumn
        
        Private columnCIR_DURACION As Global.System.Data.DataColumn
        
        Private columnCIR_DESCRIPCION As Global.System.Data.DataColumn
        
        Private columnCIR_RIESGO As Global.System.Data.DataColumn
        
        Private columnCIR_NOMBRE As Global.System.Data.DataColumn
        
        Private columnCIR_ANESTESÍA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CIRUGIAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIR_CODIGOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIR_CODIGOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIR_DURACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIR_DURACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIR_DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIR_DESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIR_RIESGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIR_RIESGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIR_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIR_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIR_ANESTESÍAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIR_ANESTESÍA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CIRUGIASRow
            Get
                Return CType(Me.Rows(index),CIRUGIASRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CIRUGIASRowChanging As CIRUGIASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CIRUGIASRowChanged As CIRUGIASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CIRUGIASRowDeleting As CIRUGIASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CIRUGIASRowDeleted As CIRUGIASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddCIRUGIASRow(ByVal row As CIRUGIASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddCIRUGIASRow(ByVal CIR_CODIGOC As Decimal, ByVal CIR_DURACION As String, ByVal CIR_DESCRIPCION As String, ByVal CIR_RIESGO As String, ByVal CIR_NOMBRE As String, ByVal CIR_ANESTESÍA As String) As CIRUGIASRow
            Dim rowCIRUGIASRow As CIRUGIASRow = CType(Me.NewRow,CIRUGIASRow)
            Dim columnValuesArray() As Object = New Object() {CIR_CODIGOC, CIR_DURACION, CIR_DESCRIPCION, CIR_RIESGO, CIR_NOMBRE, CIR_ANESTESÍA}
            rowCIRUGIASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCIRUGIASRow)
            Return rowCIRUGIASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByCIR_CODIGOC(ByVal CIR_CODIGOC As Decimal) As CIRUGIASRow
            Return CType(Me.Rows.Find(New Object() {CIR_CODIGOC}),CIRUGIASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CIRUGIASDataTable = CType(MyBase.Clone,CIRUGIASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CIRUGIASDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCIR_CODIGOC = MyBase.Columns("CIR_CODIGOC")
            Me.columnCIR_DURACION = MyBase.Columns("CIR_DURACION")
            Me.columnCIR_DESCRIPCION = MyBase.Columns("CIR_DESCRIPCION")
            Me.columnCIR_RIESGO = MyBase.Columns("CIR_RIESGO")
            Me.columnCIR_NOMBRE = MyBase.Columns("CIR_NOMBRE")
            Me.columnCIR_ANESTESÍA = MyBase.Columns("CIR_ANESTESÍA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCIR_CODIGOC = New Global.System.Data.DataColumn("CIR_CODIGOC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIR_CODIGOC)
            Me.columnCIR_DURACION = New Global.System.Data.DataColumn("CIR_DURACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIR_DURACION)
            Me.columnCIR_DESCRIPCION = New Global.System.Data.DataColumn("CIR_DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIR_DESCRIPCION)
            Me.columnCIR_RIESGO = New Global.System.Data.DataColumn("CIR_RIESGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIR_RIESGO)
            Me.columnCIR_NOMBRE = New Global.System.Data.DataColumn("CIR_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIR_NOMBRE)
            Me.columnCIR_ANESTESÍA = New Global.System.Data.DataColumn("CIR_ANESTESÍA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIR_ANESTESÍA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCIR_DESCRIPCION}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnCIR_NOMBRE}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint3", New Global.System.Data.DataColumn() {Me.columnCIR_CODIGOC}, true))
            Me.columnCIR_CODIGOC.AllowDBNull = false
            Me.columnCIR_CODIGOC.Unique = true
            Me.columnCIR_DURACION.AllowDBNull = false
            Me.columnCIR_DURACION.MaxLength = 50
            Me.columnCIR_DESCRIPCION.AllowDBNull = false
            Me.columnCIR_DESCRIPCION.Unique = true
            Me.columnCIR_DESCRIPCION.MaxLength = 100
            Me.columnCIR_RIESGO.AllowDBNull = false
            Me.columnCIR_RIESGO.MaxLength = 5
            Me.columnCIR_NOMBRE.AllowDBNull = false
            Me.columnCIR_NOMBRE.Unique = true
            Me.columnCIR_NOMBRE.MaxLength = 50
            Me.columnCIR_ANESTESÍA.AllowDBNull = false
            Me.columnCIR_ANESTESÍA.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewCIRUGIASRow() As CIRUGIASRow
            Return CType(Me.NewRow,CIRUGIASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CIRUGIASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CIRUGIASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CIRUGIASRowChangedEvent) Is Nothing) Then
                RaiseEvent CIRUGIASRowChanged(Me, New CIRUGIASRowChangeEvent(CType(e.Row,CIRUGIASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CIRUGIASRowChangingEvent) Is Nothing) Then
                RaiseEvent CIRUGIASRowChanging(Me, New CIRUGIASRowChangeEvent(CType(e.Row,CIRUGIASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CIRUGIASRowDeletedEvent) Is Nothing) Then
                RaiseEvent CIRUGIASRowDeleted(Me, New CIRUGIASRowChangeEvent(CType(e.Row,CIRUGIASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CIRUGIASRowDeletingEvent) Is Nothing) Then
                RaiseEvent CIRUGIASRowDeleting(Me, New CIRUGIASRowChangeEvent(CType(e.Row,CIRUGIASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveCIRUGIASRow(ByVal row As CIRUGIASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CIRUGIASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CITASDataTable
        Inherits Global.System.Data.TypedTableBase(Of CITASRow)
        
        Private columnCIT_CODIGOC As Global.System.Data.DataColumn
        
        Private columnCIT_CALENDARIZADO As Global.System.Data.DataColumn
        
        Private columnPAC_CODIGOP As Global.System.Data.DataColumn
        
        Private columnCIR_CODIGOC As Global.System.Data.DataColumn
        
        Private columnCIT_HECHA As Global.System.Data.DataColumn
        
        Private columnCIT_DESCRIPCION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CITAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIT_CODIGOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIT_CODIGOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIT_CALENDARIZADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIT_CALENDARIZADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PAC_CODIGOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAC_CODIGOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIR_CODIGOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIR_CODIGOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIT_HECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIT_HECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIT_DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIT_DESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CITASRow
            Get
                Return CType(Me.Rows(index),CITASRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CITASRowChanging As CITASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CITASRowChanged As CITASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CITASRowDeleting As CITASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CITASRowDeleted As CITASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddCITASRow(ByVal row As CITASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddCITASRow(ByVal CIT_CODIGOC As Decimal, ByVal CIT_CALENDARIZADO As Date, ByVal parentPACIENTESRowBySYS_C007383 As PACIENTESRow, ByVal parentCIRUGIASRowBySYS_C007384 As CIRUGIASRow, ByVal CIT_HECHA As Date, ByVal CIT_DESCRIPCION As String) As CITASRow
            Dim rowCITASRow As CITASRow = CType(Me.NewRow,CITASRow)
            Dim columnValuesArray() As Object = New Object() {CIT_CODIGOC, CIT_CALENDARIZADO, Nothing, Nothing, CIT_HECHA, CIT_DESCRIPCION}
            If (Not (parentPACIENTESRowBySYS_C007383) Is Nothing) Then
                columnValuesArray(2) = parentPACIENTESRowBySYS_C007383(0)
            End If
            If (Not (parentCIRUGIASRowBySYS_C007384) Is Nothing) Then
                columnValuesArray(3) = parentCIRUGIASRowBySYS_C007384(0)
            End If
            rowCITASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCITASRow)
            Return rowCITASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByCIT_CODIGOC(ByVal CIT_CODIGOC As Decimal) As CITASRow
            Return CType(Me.Rows.Find(New Object() {CIT_CODIGOC}),CITASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CITASDataTable = CType(MyBase.Clone,CITASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CITASDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCIT_CODIGOC = MyBase.Columns("CIT_CODIGOC")
            Me.columnCIT_CALENDARIZADO = MyBase.Columns("CIT_CALENDARIZADO")
            Me.columnPAC_CODIGOP = MyBase.Columns("PAC_CODIGOP")
            Me.columnCIR_CODIGOC = MyBase.Columns("CIR_CODIGOC")
            Me.columnCIT_HECHA = MyBase.Columns("CIT_HECHA")
            Me.columnCIT_DESCRIPCION = MyBase.Columns("CIT_DESCRIPCION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCIT_CODIGOC = New Global.System.Data.DataColumn("CIT_CODIGOC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIT_CODIGOC)
            Me.columnCIT_CALENDARIZADO = New Global.System.Data.DataColumn("CIT_CALENDARIZADO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIT_CALENDARIZADO)
            Me.columnPAC_CODIGOP = New Global.System.Data.DataColumn("PAC_CODIGOP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAC_CODIGOP)
            Me.columnCIR_CODIGOC = New Global.System.Data.DataColumn("CIR_CODIGOC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIR_CODIGOC)
            Me.columnCIT_HECHA = New Global.System.Data.DataColumn("CIT_HECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIT_HECHA)
            Me.columnCIT_DESCRIPCION = New Global.System.Data.DataColumn("CIT_DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIT_DESCRIPCION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCIT_CODIGOC}, true))
            Me.columnCIT_CODIGOC.AllowDBNull = false
            Me.columnCIT_CODIGOC.Unique = true
            Me.columnCIT_HECHA.AllowDBNull = false
            Me.columnCIT_DESCRIPCION.AllowDBNull = false
            Me.columnCIT_DESCRIPCION.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewCITASRow() As CITASRow
            Return CType(Me.NewRow,CITASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CITASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CITASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CITASRowChangedEvent) Is Nothing) Then
                RaiseEvent CITASRowChanged(Me, New CITASRowChangeEvent(CType(e.Row,CITASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CITASRowChangingEvent) Is Nothing) Then
                RaiseEvent CITASRowChanging(Me, New CITASRowChangeEvent(CType(e.Row,CITASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CITASRowDeletedEvent) Is Nothing) Then
                RaiseEvent CITASRowDeleted(Me, New CITASRowChangeEvent(CType(e.Row,CITASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CITASRowDeletingEvent) Is Nothing) Then
                RaiseEvent CITASRowDeleting(Me, New CITASRowChangeEvent(CType(e.Row,CITASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveCITASRow(ByVal row As CITASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CITASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DUEÑOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of DUEÑOSRow)
        
        Private columnDUE_CODIGOD As Global.System.Data.DataColumn
        
        Private columnDUE_NOMBRE1 As Global.System.Data.DataColumn
        
        Private columnDUE_NOMBRE2 As Global.System.Data.DataColumn
        
        Private columnDUE_APELLIDO1 As Global.System.Data.DataColumn
        
        Private columnDUE_APELLIDO2 As Global.System.Data.DataColumn
        
        Private columnDUE_IDENTIFICACION As Global.System.Data.DataColumn
        
        Private columnDUE_DIRECCION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DUEÑOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_CODIGODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_CODIGOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_NOMBRE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_NOMBRE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_NOMBRE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_NOMBRE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_APELLIDO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_APELLIDO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_APELLIDO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_APELLIDO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_IDENTIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_IDENTIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DUEÑOSRow
            Get
                Return CType(Me.Rows(index),DUEÑOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event DUEÑOSRowChanging As DUEÑOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event DUEÑOSRowChanged As DUEÑOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event DUEÑOSRowDeleting As DUEÑOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event DUEÑOSRowDeleted As DUEÑOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddDUEÑOSRow(ByVal row As DUEÑOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddDUEÑOSRow(ByVal DUE_CODIGOD As Decimal, ByVal DUE_NOMBRE1 As String, ByVal DUE_NOMBRE2 As String, ByVal DUE_APELLIDO1 As String, ByVal DUE_APELLIDO2 As String, ByVal DUE_IDENTIFICACION As String, ByVal DUE_DIRECCION As String) As DUEÑOSRow
            Dim rowDUEÑOSRow As DUEÑOSRow = CType(Me.NewRow,DUEÑOSRow)
            Dim columnValuesArray() As Object = New Object() {DUE_CODIGOD, DUE_NOMBRE1, DUE_NOMBRE2, DUE_APELLIDO1, DUE_APELLIDO2, DUE_IDENTIFICACION, DUE_DIRECCION}
            rowDUEÑOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDUEÑOSRow)
            Return rowDUEÑOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByDUE_CODIGOD(ByVal DUE_CODIGOD As Decimal) As DUEÑOSRow
            Return CType(Me.Rows.Find(New Object() {DUE_CODIGOD}),DUEÑOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DUEÑOSDataTable = CType(MyBase.Clone,DUEÑOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DUEÑOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnDUE_CODIGOD = MyBase.Columns("DUE_CODIGOD")
            Me.columnDUE_NOMBRE1 = MyBase.Columns("DUE_NOMBRE1")
            Me.columnDUE_NOMBRE2 = MyBase.Columns("DUE_NOMBRE2")
            Me.columnDUE_APELLIDO1 = MyBase.Columns("DUE_APELLIDO1")
            Me.columnDUE_APELLIDO2 = MyBase.Columns("DUE_APELLIDO2")
            Me.columnDUE_IDENTIFICACION = MyBase.Columns("DUE_IDENTIFICACION")
            Me.columnDUE_DIRECCION = MyBase.Columns("DUE_DIRECCION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnDUE_CODIGOD = New Global.System.Data.DataColumn("DUE_CODIGOD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_CODIGOD)
            Me.columnDUE_NOMBRE1 = New Global.System.Data.DataColumn("DUE_NOMBRE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_NOMBRE1)
            Me.columnDUE_NOMBRE2 = New Global.System.Data.DataColumn("DUE_NOMBRE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_NOMBRE2)
            Me.columnDUE_APELLIDO1 = New Global.System.Data.DataColumn("DUE_APELLIDO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_APELLIDO1)
            Me.columnDUE_APELLIDO2 = New Global.System.Data.DataColumn("DUE_APELLIDO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_APELLIDO2)
            Me.columnDUE_IDENTIFICACION = New Global.System.Data.DataColumn("DUE_IDENTIFICACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_IDENTIFICACION)
            Me.columnDUE_DIRECCION = New Global.System.Data.DataColumn("DUE_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_DIRECCION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDUE_IDENTIFICACION}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnDUE_CODIGOD}, true))
            Me.columnDUE_CODIGOD.AllowDBNull = false
            Me.columnDUE_CODIGOD.Unique = true
            Me.columnDUE_NOMBRE1.AllowDBNull = false
            Me.columnDUE_NOMBRE1.MaxLength = 50
            Me.columnDUE_NOMBRE2.AllowDBNull = false
            Me.columnDUE_NOMBRE2.MaxLength = 50
            Me.columnDUE_APELLIDO1.AllowDBNull = false
            Me.columnDUE_APELLIDO1.MaxLength = 50
            Me.columnDUE_APELLIDO2.AllowDBNull = false
            Me.columnDUE_APELLIDO2.MaxLength = 50
            Me.columnDUE_IDENTIFICACION.AllowDBNull = false
            Me.columnDUE_IDENTIFICACION.Unique = true
            Me.columnDUE_IDENTIFICACION.MaxLength = 20
            Me.columnDUE_DIRECCION.AllowDBNull = false
            Me.columnDUE_DIRECCION.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewDUEÑOSRow() As DUEÑOSRow
            Return CType(Me.NewRow,DUEÑOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DUEÑOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DUEÑOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DUEÑOSRowChangedEvent) Is Nothing) Then
                RaiseEvent DUEÑOSRowChanged(Me, New DUEÑOSRowChangeEvent(CType(e.Row,DUEÑOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DUEÑOSRowChangingEvent) Is Nothing) Then
                RaiseEvent DUEÑOSRowChanging(Me, New DUEÑOSRowChangeEvent(CType(e.Row,DUEÑOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DUEÑOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent DUEÑOSRowDeleted(Me, New DUEÑOSRowChangeEvent(CType(e.Row,DUEÑOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DUEÑOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent DUEÑOSRowDeleting(Me, New DUEÑOSRowChangeEvent(CType(e.Row,DUEÑOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveDUEÑOSRow(ByVal row As DUEÑOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DUEÑOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ENFERMEDADESDataTable
        Inherits Global.System.Data.TypedTableBase(Of ENFERMEDADESRow)
        
        Private columnENF_CODIGOE As Global.System.Data.DataColumn
        
        Private columnENF_ENFERMEDAD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ENFERMEDADES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ENF_CODIGOEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENF_CODIGOE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ENF_ENFERMEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENF_ENFERMEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ENFERMEDADESRow
            Get
                Return CType(Me.Rows(index),ENFERMEDADESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ENFERMEDADESRowChanging As ENFERMEDADESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ENFERMEDADESRowChanged As ENFERMEDADESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ENFERMEDADESRowDeleting As ENFERMEDADESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ENFERMEDADESRowDeleted As ENFERMEDADESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddENFERMEDADESRow(ByVal row As ENFERMEDADESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddENFERMEDADESRow(ByVal ENF_CODIGOE As Decimal, ByVal ENF_ENFERMEDAD As String) As ENFERMEDADESRow
            Dim rowENFERMEDADESRow As ENFERMEDADESRow = CType(Me.NewRow,ENFERMEDADESRow)
            Dim columnValuesArray() As Object = New Object() {ENF_CODIGOE, ENF_ENFERMEDAD}
            rowENFERMEDADESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowENFERMEDADESRow)
            Return rowENFERMEDADESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByENF_CODIGOE(ByVal ENF_CODIGOE As Decimal) As ENFERMEDADESRow
            Return CType(Me.Rows.Find(New Object() {ENF_CODIGOE}),ENFERMEDADESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ENFERMEDADESDataTable = CType(MyBase.Clone,ENFERMEDADESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ENFERMEDADESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnENF_CODIGOE = MyBase.Columns("ENF_CODIGOE")
            Me.columnENF_ENFERMEDAD = MyBase.Columns("ENF_ENFERMEDAD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnENF_CODIGOE = New Global.System.Data.DataColumn("ENF_CODIGOE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENF_CODIGOE)
            Me.columnENF_ENFERMEDAD = New Global.System.Data.DataColumn("ENF_ENFERMEDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENF_ENFERMEDAD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnENF_ENFERMEDAD}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnENF_CODIGOE}, true))
            Me.columnENF_CODIGOE.AllowDBNull = false
            Me.columnENF_CODIGOE.Unique = true
            Me.columnENF_ENFERMEDAD.AllowDBNull = false
            Me.columnENF_ENFERMEDAD.Unique = true
            Me.columnENF_ENFERMEDAD.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewENFERMEDADESRow() As ENFERMEDADESRow
            Return CType(Me.NewRow,ENFERMEDADESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ENFERMEDADESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ENFERMEDADESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ENFERMEDADESRowChangedEvent) Is Nothing) Then
                RaiseEvent ENFERMEDADESRowChanged(Me, New ENFERMEDADESRowChangeEvent(CType(e.Row,ENFERMEDADESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ENFERMEDADESRowChangingEvent) Is Nothing) Then
                RaiseEvent ENFERMEDADESRowChanging(Me, New ENFERMEDADESRowChangeEvent(CType(e.Row,ENFERMEDADESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ENFERMEDADESRowDeletedEvent) Is Nothing) Then
                RaiseEvent ENFERMEDADESRowDeleted(Me, New ENFERMEDADESRowChangeEvent(CType(e.Row,ENFERMEDADESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ENFERMEDADESRowDeletingEvent) Is Nothing) Then
                RaiseEvent ENFERMEDADESRowDeleting(Me, New ENFERMEDADESRowChangeEvent(CType(e.Row,ENFERMEDADESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveENFERMEDADESRow(ByVal row As ENFERMEDADESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ENFERMEDADESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ENFERMEDADXRAZADataTable
        Inherits Global.System.Data.TypedTableBase(Of ENFERMEDADXRAZARow)
        
        Private columnENF_CODIGOE As Global.System.Data.DataColumn
        
        Private columnRAZ_CODIGOR As Global.System.Data.DataColumn
        
        Private columnENF_ENFERMEDAD As Global.System.Data.DataColumn
        
        Private columnRAZ_RAZA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ENFERMEDADXRAZA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ENF_CODIGOEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENF_CODIGOE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RAZ_CODIGORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAZ_CODIGOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ENF_ENFERMEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENF_ENFERMEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RAZ_RAZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAZ_RAZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ENFERMEDADXRAZARow
            Get
                Return CType(Me.Rows(index),ENFERMEDADXRAZARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ENFERMEDADXRAZARowChanging As ENFERMEDADXRAZARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ENFERMEDADXRAZARowChanged As ENFERMEDADXRAZARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ENFERMEDADXRAZARowDeleting As ENFERMEDADXRAZARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ENFERMEDADXRAZARowDeleted As ENFERMEDADXRAZARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddENFERMEDADXRAZARow(ByVal row As ENFERMEDADXRAZARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddENFERMEDADXRAZARow(ByVal parentENFERMEDADESRowBySYS_C007392 As ENFERMEDADESRow, ByVal parentRAZASRowBySYS_C007393 As RAZASRow, ByVal ENF_ENFERMEDAD As String, ByVal RAZ_RAZA As String) As ENFERMEDADXRAZARow
            Dim rowENFERMEDADXRAZARow As ENFERMEDADXRAZARow = CType(Me.NewRow,ENFERMEDADXRAZARow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, ENF_ENFERMEDAD, RAZ_RAZA}
            If (Not (parentENFERMEDADESRowBySYS_C007392) Is Nothing) Then
                columnValuesArray(0) = parentENFERMEDADESRowBySYS_C007392(0)
            End If
            If (Not (parentRAZASRowBySYS_C007393) Is Nothing) Then
                columnValuesArray(1) = parentRAZASRowBySYS_C007393(0)
            End If
            rowENFERMEDADXRAZARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowENFERMEDADXRAZARow)
            Return rowENFERMEDADXRAZARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByENF_CODIGOERAZ_CODIGOR(ByVal ENF_CODIGOE As Decimal, ByVal RAZ_CODIGOR As Decimal) As ENFERMEDADXRAZARow
            Return CType(Me.Rows.Find(New Object() {ENF_CODIGOE, RAZ_CODIGOR}),ENFERMEDADXRAZARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ENFERMEDADXRAZADataTable = CType(MyBase.Clone,ENFERMEDADXRAZADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ENFERMEDADXRAZADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnENF_CODIGOE = MyBase.Columns("ENF_CODIGOE")
            Me.columnRAZ_CODIGOR = MyBase.Columns("RAZ_CODIGOR")
            Me.columnENF_ENFERMEDAD = MyBase.Columns("ENF_ENFERMEDAD")
            Me.columnRAZ_RAZA = MyBase.Columns("RAZ_RAZA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnENF_CODIGOE = New Global.System.Data.DataColumn("ENF_CODIGOE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENF_CODIGOE)
            Me.columnRAZ_CODIGOR = New Global.System.Data.DataColumn("RAZ_CODIGOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAZ_CODIGOR)
            Me.columnENF_ENFERMEDAD = New Global.System.Data.DataColumn("ENF_ENFERMEDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENF_ENFERMEDAD)
            Me.columnRAZ_RAZA = New Global.System.Data.DataColumn("RAZ_RAZA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAZ_RAZA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnENF_CODIGOE, Me.columnRAZ_CODIGOR}, true))
            Me.columnENF_CODIGOE.AllowDBNull = false
            Me.columnRAZ_CODIGOR.AllowDBNull = false
            Me.columnENF_ENFERMEDAD.AllowDBNull = false
            Me.columnENF_ENFERMEDAD.MaxLength = 50
            Me.columnRAZ_RAZA.AllowDBNull = false
            Me.columnRAZ_RAZA.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewENFERMEDADXRAZARow() As ENFERMEDADXRAZARow
            Return CType(Me.NewRow,ENFERMEDADXRAZARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ENFERMEDADXRAZARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ENFERMEDADXRAZARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ENFERMEDADXRAZARowChangedEvent) Is Nothing) Then
                RaiseEvent ENFERMEDADXRAZARowChanged(Me, New ENFERMEDADXRAZARowChangeEvent(CType(e.Row,ENFERMEDADXRAZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ENFERMEDADXRAZARowChangingEvent) Is Nothing) Then
                RaiseEvent ENFERMEDADXRAZARowChanging(Me, New ENFERMEDADXRAZARowChangeEvent(CType(e.Row,ENFERMEDADXRAZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ENFERMEDADXRAZARowDeletedEvent) Is Nothing) Then
                RaiseEvent ENFERMEDADXRAZARowDeleted(Me, New ENFERMEDADXRAZARowChangeEvent(CType(e.Row,ENFERMEDADXRAZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ENFERMEDADXRAZARowDeletingEvent) Is Nothing) Then
                RaiseEvent ENFERMEDADXRAZARowDeleting(Me, New ENFERMEDADXRAZARowChangeEvent(CType(e.Row,ENFERMEDADXRAZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveENFERMEDADXRAZARow(ByVal row As ENFERMEDADXRAZARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ENFERMEDADXRAZADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ESPECIESDataTable
        Inherits Global.System.Data.TypedTableBase(Of ESPECIESRow)
        
        Private columnESP_CODIGOE As Global.System.Data.DataColumn
        
        Private columnESP_ESPECIE As Global.System.Data.DataColumn
        
        Private columnESP_FAMILIA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ESPECIES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ESP_CODIGOEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_CODIGOE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ESP_ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_ESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ESP_FAMILIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_FAMILIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ESPECIESRow
            Get
                Return CType(Me.Rows(index),ESPECIESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ESPECIESRowChanging As ESPECIESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ESPECIESRowChanged As ESPECIESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ESPECIESRowDeleting As ESPECIESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ESPECIESRowDeleted As ESPECIESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddESPECIESRow(ByVal row As ESPECIESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddESPECIESRow(ByVal ESP_CODIGOE As Decimal, ByVal ESP_ESPECIE As String, ByVal ESP_FAMILIA As String) As ESPECIESRow
            Dim rowESPECIESRow As ESPECIESRow = CType(Me.NewRow,ESPECIESRow)
            Dim columnValuesArray() As Object = New Object() {ESP_CODIGOE, ESP_ESPECIE, ESP_FAMILIA}
            rowESPECIESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowESPECIESRow)
            Return rowESPECIESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByESP_CODIGOE(ByVal ESP_CODIGOE As Decimal) As ESPECIESRow
            Return CType(Me.Rows.Find(New Object() {ESP_CODIGOE}),ESPECIESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ESPECIESDataTable = CType(MyBase.Clone,ESPECIESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ESPECIESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnESP_CODIGOE = MyBase.Columns("ESP_CODIGOE")
            Me.columnESP_ESPECIE = MyBase.Columns("ESP_ESPECIE")
            Me.columnESP_FAMILIA = MyBase.Columns("ESP_FAMILIA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnESP_CODIGOE = New Global.System.Data.DataColumn("ESP_CODIGOE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_CODIGOE)
            Me.columnESP_ESPECIE = New Global.System.Data.DataColumn("ESP_ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_ESPECIE)
            Me.columnESP_FAMILIA = New Global.System.Data.DataColumn("ESP_FAMILIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_FAMILIA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnESP_ESPECIE}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnESP_CODIGOE}, true))
            Me.columnESP_CODIGOE.AllowDBNull = false
            Me.columnESP_CODIGOE.Unique = true
            Me.columnESP_ESPECIE.AllowDBNull = false
            Me.columnESP_ESPECIE.Unique = true
            Me.columnESP_ESPECIE.MaxLength = 50
            Me.columnESP_FAMILIA.AllowDBNull = false
            Me.columnESP_FAMILIA.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewESPECIESRow() As ESPECIESRow
            Return CType(Me.NewRow,ESPECIESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ESPECIESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ESPECIESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ESPECIESRowChangedEvent) Is Nothing) Then
                RaiseEvent ESPECIESRowChanged(Me, New ESPECIESRowChangeEvent(CType(e.Row,ESPECIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ESPECIESRowChangingEvent) Is Nothing) Then
                RaiseEvent ESPECIESRowChanging(Me, New ESPECIESRowChangeEvent(CType(e.Row,ESPECIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ESPECIESRowDeletedEvent) Is Nothing) Then
                RaiseEvent ESPECIESRowDeleted(Me, New ESPECIESRowChangeEvent(CType(e.Row,ESPECIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ESPECIESRowDeletingEvent) Is Nothing) Then
                RaiseEvent ESPECIESRowDeleting(Me, New ESPECIESRowChangeEvent(CType(e.Row,ESPECIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveESPECIESRow(ByVal row As ESPECIESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ESPECIESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FECHADataTable
        Inherits Global.System.Data.TypedTableBase(Of FECHARow)
        
        Private columnFEC_CODIGO As Global.System.Data.DataColumn
        
        Private columnFEC_FECHAHORA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FECHA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FEC_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FEC_FECHAHORAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_FECHAHORA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FECHARow
            Get
                Return CType(Me.Rows(index),FECHARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FECHARowChanging As FECHARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FECHARowChanged As FECHARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FECHARowDeleting As FECHARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FECHARowDeleted As FECHARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddFECHARow(ByVal row As FECHARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddFECHARow(ByVal FEC_CODIGO As Decimal, ByVal FEC_FECHAHORA As Date) As FECHARow
            Dim rowFECHARow As FECHARow = CType(Me.NewRow,FECHARow)
            Dim columnValuesArray() As Object = New Object() {FEC_CODIGO, FEC_FECHAHORA}
            rowFECHARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFECHARow)
            Return rowFECHARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByFEC_CODIGO(ByVal FEC_CODIGO As Decimal) As FECHARow
            Return CType(Me.Rows.Find(New Object() {FEC_CODIGO}),FECHARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FECHADataTable = CType(MyBase.Clone,FECHADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FECHADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFEC_CODIGO = MyBase.Columns("FEC_CODIGO")
            Me.columnFEC_FECHAHORA = MyBase.Columns("FEC_FECHAHORA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFEC_CODIGO = New Global.System.Data.DataColumn("FEC_CODIGO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_CODIGO)
            Me.columnFEC_FECHAHORA = New Global.System.Data.DataColumn("FEC_FECHAHORA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_FECHAHORA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFEC_CODIGO}, true))
            Me.columnFEC_CODIGO.AllowDBNull = false
            Me.columnFEC_CODIGO.Unique = true
            Me.columnFEC_FECHAHORA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewFECHARow() As FECHARow
            Return CType(Me.NewRow,FECHARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FECHARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FECHARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FECHARowChangedEvent) Is Nothing) Then
                RaiseEvent FECHARowChanged(Me, New FECHARowChangeEvent(CType(e.Row,FECHARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FECHARowChangingEvent) Is Nothing) Then
                RaiseEvent FECHARowChanging(Me, New FECHARowChangeEvent(CType(e.Row,FECHARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FECHARowDeletedEvent) Is Nothing) Then
                RaiseEvent FECHARowDeleted(Me, New FECHARowChangeEvent(CType(e.Row,FECHARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FECHARowDeletingEvent) Is Nothing) Then
                RaiseEvent FECHARowDeleting(Me, New FECHARowChangeEvent(CType(e.Row,FECHARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveFECHARow(ByVal row As FECHARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FECHADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MEDICINASDataTable
        Inherits Global.System.Data.TypedTableBase(Of MEDICINASRow)
        
        Private columnMED_CODIGOME As Global.System.Data.DataColumn
        
        Private columnMED_NOMBRE As Global.System.Data.DataColumn
        
        Private columnMED_DOSIS As Global.System.Data.DataColumn
        
        Private columnMED_INTERVALO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MEDICINAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_CODIGOMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_CODIGOME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_DOSISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_DOSIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_INTERVALOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_INTERVALO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MEDICINASRow
            Get
                Return CType(Me.Rows(index),MEDICINASRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MEDICINASRowChanging As MEDICINASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MEDICINASRowChanged As MEDICINASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MEDICINASRowDeleting As MEDICINASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MEDICINASRowDeleted As MEDICINASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddMEDICINASRow(ByVal row As MEDICINASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddMEDICINASRow(ByVal MED_CODIGOME As Decimal, ByVal MED_NOMBRE As String, ByVal MED_DOSIS As String, ByVal MED_INTERVALO As String) As MEDICINASRow
            Dim rowMEDICINASRow As MEDICINASRow = CType(Me.NewRow,MEDICINASRow)
            Dim columnValuesArray() As Object = New Object() {MED_CODIGOME, MED_NOMBRE, MED_DOSIS, MED_INTERVALO}
            rowMEDICINASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMEDICINASRow)
            Return rowMEDICINASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByMED_CODIGOME(ByVal MED_CODIGOME As Decimal) As MEDICINASRow
            Return CType(Me.Rows.Find(New Object() {MED_CODIGOME}),MEDICINASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MEDICINASDataTable = CType(MyBase.Clone,MEDICINASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MEDICINASDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMED_CODIGOME = MyBase.Columns("MED_CODIGOME")
            Me.columnMED_NOMBRE = MyBase.Columns("MED_NOMBRE")
            Me.columnMED_DOSIS = MyBase.Columns("MED_DOSIS")
            Me.columnMED_INTERVALO = MyBase.Columns("MED_INTERVALO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMED_CODIGOME = New Global.System.Data.DataColumn("MED_CODIGOME", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_CODIGOME)
            Me.columnMED_NOMBRE = New Global.System.Data.DataColumn("MED_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_NOMBRE)
            Me.columnMED_DOSIS = New Global.System.Data.DataColumn("MED_DOSIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_DOSIS)
            Me.columnMED_INTERVALO = New Global.System.Data.DataColumn("MED_INTERVALO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_INTERVALO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMED_NOMBRE}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnMED_CODIGOME}, true))
            Me.columnMED_CODIGOME.AllowDBNull = false
            Me.columnMED_CODIGOME.Unique = true
            Me.columnMED_NOMBRE.AllowDBNull = false
            Me.columnMED_NOMBRE.Unique = true
            Me.columnMED_NOMBRE.MaxLength = 50
            Me.columnMED_DOSIS.AllowDBNull = false
            Me.columnMED_DOSIS.MaxLength = 50
            Me.columnMED_INTERVALO.AllowDBNull = false
            Me.columnMED_INTERVALO.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewMEDICINASRow() As MEDICINASRow
            Return CType(Me.NewRow,MEDICINASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MEDICINASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MEDICINASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MEDICINASRowChangedEvent) Is Nothing) Then
                RaiseEvent MEDICINASRowChanged(Me, New MEDICINASRowChangeEvent(CType(e.Row,MEDICINASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MEDICINASRowChangingEvent) Is Nothing) Then
                RaiseEvent MEDICINASRowChanging(Me, New MEDICINASRowChangeEvent(CType(e.Row,MEDICINASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MEDICINASRowDeletedEvent) Is Nothing) Then
                RaiseEvent MEDICINASRowDeleted(Me, New MEDICINASRowChangeEvent(CType(e.Row,MEDICINASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MEDICINASRowDeletingEvent) Is Nothing) Then
                RaiseEvent MEDICINASRowDeleting(Me, New MEDICINASRowChangeEvent(CType(e.Row,MEDICINASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveMEDICINASRow(ByVal row As MEDICINASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MEDICINASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MEDICINAXENFERMEDADDataTable
        Inherits Global.System.Data.TypedTableBase(Of MEDICINAXENFERMEDADRow)
        
        Private columnMED_CODIGOME As Global.System.Data.DataColumn
        
        Private columnENF_CODIGOE As Global.System.Data.DataColumn
        
        Private columnMED_NOMBRE As Global.System.Data.DataColumn
        
        Private columnMED_DOSIS As Global.System.Data.DataColumn
        
        Private columnMED_INTERVALO As Global.System.Data.DataColumn
        
        Private columnENF_ENFERMEDAD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MEDICINAXENFERMEDAD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_CODIGOMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_CODIGOME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ENF_CODIGOEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENF_CODIGOE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_DOSISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_DOSIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_INTERVALOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_INTERVALO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ENF_ENFERMEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENF_ENFERMEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MEDICINAXENFERMEDADRow
            Get
                Return CType(Me.Rows(index),MEDICINAXENFERMEDADRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MEDICINAXENFERMEDADRowChanging As MEDICINAXENFERMEDADRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MEDICINAXENFERMEDADRowChanged As MEDICINAXENFERMEDADRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MEDICINAXENFERMEDADRowDeleting As MEDICINAXENFERMEDADRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MEDICINAXENFERMEDADRowDeleted As MEDICINAXENFERMEDADRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddMEDICINAXENFERMEDADRow(ByVal row As MEDICINAXENFERMEDADRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddMEDICINAXENFERMEDADRow(ByVal parentMEDICINASRowBySYS_C007396 As MEDICINASRow, ByVal parentENFERMEDADESRowBySYS_C007395 As ENFERMEDADESRow, ByVal MED_NOMBRE As String, ByVal MED_DOSIS As String, ByVal MED_INTERVALO As String, ByVal ENF_ENFERMEDAD As String) As MEDICINAXENFERMEDADRow
            Dim rowMEDICINAXENFERMEDADRow As MEDICINAXENFERMEDADRow = CType(Me.NewRow,MEDICINAXENFERMEDADRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, MED_NOMBRE, MED_DOSIS, MED_INTERVALO, ENF_ENFERMEDAD}
            If (Not (parentMEDICINASRowBySYS_C007396) Is Nothing) Then
                columnValuesArray(0) = parentMEDICINASRowBySYS_C007396(0)
            End If
            If (Not (parentENFERMEDADESRowBySYS_C007395) Is Nothing) Then
                columnValuesArray(1) = parentENFERMEDADESRowBySYS_C007395(0)
            End If
            rowMEDICINAXENFERMEDADRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMEDICINAXENFERMEDADRow)
            Return rowMEDICINAXENFERMEDADRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByMED_CODIGOMEENF_CODIGOE(ByVal MED_CODIGOME As Decimal, ByVal ENF_CODIGOE As Decimal) As MEDICINAXENFERMEDADRow
            Return CType(Me.Rows.Find(New Object() {MED_CODIGOME, ENF_CODIGOE}),MEDICINAXENFERMEDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MEDICINAXENFERMEDADDataTable = CType(MyBase.Clone,MEDICINAXENFERMEDADDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MEDICINAXENFERMEDADDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMED_CODIGOME = MyBase.Columns("MED_CODIGOME")
            Me.columnENF_CODIGOE = MyBase.Columns("ENF_CODIGOE")
            Me.columnMED_NOMBRE = MyBase.Columns("MED_NOMBRE")
            Me.columnMED_DOSIS = MyBase.Columns("MED_DOSIS")
            Me.columnMED_INTERVALO = MyBase.Columns("MED_INTERVALO")
            Me.columnENF_ENFERMEDAD = MyBase.Columns("ENF_ENFERMEDAD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMED_CODIGOME = New Global.System.Data.DataColumn("MED_CODIGOME", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_CODIGOME)
            Me.columnENF_CODIGOE = New Global.System.Data.DataColumn("ENF_CODIGOE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENF_CODIGOE)
            Me.columnMED_NOMBRE = New Global.System.Data.DataColumn("MED_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_NOMBRE)
            Me.columnMED_DOSIS = New Global.System.Data.DataColumn("MED_DOSIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_DOSIS)
            Me.columnMED_INTERVALO = New Global.System.Data.DataColumn("MED_INTERVALO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_INTERVALO)
            Me.columnENF_ENFERMEDAD = New Global.System.Data.DataColumn("ENF_ENFERMEDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENF_ENFERMEDAD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMED_CODIGOME, Me.columnENF_CODIGOE}, true))
            Me.columnMED_CODIGOME.AllowDBNull = false
            Me.columnENF_CODIGOE.AllowDBNull = false
            Me.columnMED_NOMBRE.AllowDBNull = false
            Me.columnMED_NOMBRE.MaxLength = 50
            Me.columnMED_DOSIS.AllowDBNull = false
            Me.columnMED_DOSIS.MaxLength = 50
            Me.columnMED_INTERVALO.AllowDBNull = false
            Me.columnMED_INTERVALO.MaxLength = 50
            Me.columnENF_ENFERMEDAD.AllowDBNull = false
            Me.columnENF_ENFERMEDAD.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewMEDICINAXENFERMEDADRow() As MEDICINAXENFERMEDADRow
            Return CType(Me.NewRow,MEDICINAXENFERMEDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MEDICINAXENFERMEDADRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MEDICINAXENFERMEDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MEDICINAXENFERMEDADRowChangedEvent) Is Nothing) Then
                RaiseEvent MEDICINAXENFERMEDADRowChanged(Me, New MEDICINAXENFERMEDADRowChangeEvent(CType(e.Row,MEDICINAXENFERMEDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MEDICINAXENFERMEDADRowChangingEvent) Is Nothing) Then
                RaiseEvent MEDICINAXENFERMEDADRowChanging(Me, New MEDICINAXENFERMEDADRowChangeEvent(CType(e.Row,MEDICINAXENFERMEDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MEDICINAXENFERMEDADRowDeletedEvent) Is Nothing) Then
                RaiseEvent MEDICINAXENFERMEDADRowDeleted(Me, New MEDICINAXENFERMEDADRowChangeEvent(CType(e.Row,MEDICINAXENFERMEDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MEDICINAXENFERMEDADRowDeletingEvent) Is Nothing) Then
                RaiseEvent MEDICINAXENFERMEDADRowDeleting(Me, New MEDICINAXENFERMEDADRowChangeEvent(CType(e.Row,MEDICINAXENFERMEDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveMEDICINAXENFERMEDADRow(ByVal row As MEDICINAXENFERMEDADRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MEDICINAXENFERMEDADDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MÉDICOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of MÉDICOSRow)
        
        Private columnMED_CODIGOM As Global.System.Data.DataColumn
        
        Private columnMED_NOMBRE1 As Global.System.Data.DataColumn
        
        Private columnMED_NOMBRE2 As Global.System.Data.DataColumn
        
        Private columnMED_APELLIDO1 As Global.System.Data.DataColumn
        
        Private columnMED_APELLIDO2 As Global.System.Data.DataColumn
        
        Private columnMED_DIRECCION As Global.System.Data.DataColumn
        
        Private columnMED_EMERGENCIA As Global.System.Data.DataColumn
        
        Private columnMED_INGRESO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MÉDICOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_CODIGOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_CODIGOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_NOMBRE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_NOMBRE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_NOMBRE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_NOMBRE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_APELLIDO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_APELLIDO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_APELLIDO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_APELLIDO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_EMERGENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_EMERGENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_INGRESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_INGRESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MÉDICOSRow
            Get
                Return CType(Me.Rows(index),MÉDICOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MÉDICOSRowChanging As MÉDICOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MÉDICOSRowChanged As MÉDICOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MÉDICOSRowDeleting As MÉDICOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MÉDICOSRowDeleted As MÉDICOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddMÉDICOSRow(ByVal row As MÉDICOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddMÉDICOSRow(ByVal MED_CODIGOM As Decimal, ByVal MED_NOMBRE1 As String, ByVal MED_NOMBRE2 As String, ByVal MED_APELLIDO1 As String, ByVal MED_APELLIDO2 As String, ByVal MED_DIRECCION As String, ByVal MED_EMERGENCIA As String, ByVal MED_INGRESO As Date) As MÉDICOSRow
            Dim rowMÉDICOSRow As MÉDICOSRow = CType(Me.NewRow,MÉDICOSRow)
            Dim columnValuesArray() As Object = New Object() {MED_CODIGOM, MED_NOMBRE1, MED_NOMBRE2, MED_APELLIDO1, MED_APELLIDO2, MED_DIRECCION, MED_EMERGENCIA, MED_INGRESO}
            rowMÉDICOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMÉDICOSRow)
            Return rowMÉDICOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByMED_CODIGOM(ByVal MED_CODIGOM As Decimal) As MÉDICOSRow
            Return CType(Me.Rows.Find(New Object() {MED_CODIGOM}),MÉDICOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MÉDICOSDataTable = CType(MyBase.Clone,MÉDICOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MÉDICOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMED_CODIGOM = MyBase.Columns("MED_CODIGOM")
            Me.columnMED_NOMBRE1 = MyBase.Columns("MED_NOMBRE1")
            Me.columnMED_NOMBRE2 = MyBase.Columns("MED_NOMBRE2")
            Me.columnMED_APELLIDO1 = MyBase.Columns("MED_APELLIDO1")
            Me.columnMED_APELLIDO2 = MyBase.Columns("MED_APELLIDO2")
            Me.columnMED_DIRECCION = MyBase.Columns("MED_DIRECCION")
            Me.columnMED_EMERGENCIA = MyBase.Columns("MED_EMERGENCIA")
            Me.columnMED_INGRESO = MyBase.Columns("MED_INGRESO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMED_CODIGOM = New Global.System.Data.DataColumn("MED_CODIGOM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_CODIGOM)
            Me.columnMED_NOMBRE1 = New Global.System.Data.DataColumn("MED_NOMBRE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_NOMBRE1)
            Me.columnMED_NOMBRE2 = New Global.System.Data.DataColumn("MED_NOMBRE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_NOMBRE2)
            Me.columnMED_APELLIDO1 = New Global.System.Data.DataColumn("MED_APELLIDO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_APELLIDO1)
            Me.columnMED_APELLIDO2 = New Global.System.Data.DataColumn("MED_APELLIDO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_APELLIDO2)
            Me.columnMED_DIRECCION = New Global.System.Data.DataColumn("MED_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_DIRECCION)
            Me.columnMED_EMERGENCIA = New Global.System.Data.DataColumn("MED_EMERGENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_EMERGENCIA)
            Me.columnMED_INGRESO = New Global.System.Data.DataColumn("MED_INGRESO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_INGRESO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMED_CODIGOM}, true))
            Me.columnMED_CODIGOM.AllowDBNull = false
            Me.columnMED_CODIGOM.Unique = true
            Me.columnMED_NOMBRE1.AllowDBNull = false
            Me.columnMED_NOMBRE1.MaxLength = 50
            Me.columnMED_NOMBRE2.AllowDBNull = false
            Me.columnMED_NOMBRE2.MaxLength = 50
            Me.columnMED_APELLIDO1.AllowDBNull = false
            Me.columnMED_APELLIDO1.MaxLength = 50
            Me.columnMED_APELLIDO2.AllowDBNull = false
            Me.columnMED_APELLIDO2.MaxLength = 50
            Me.columnMED_DIRECCION.AllowDBNull = false
            Me.columnMED_DIRECCION.MaxLength = 200
            Me.columnMED_EMERGENCIA.AllowDBNull = false
            Me.columnMED_EMERGENCIA.MaxLength = 2
            Me.columnMED_INGRESO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewMÉDICOSRow() As MÉDICOSRow
            Return CType(Me.NewRow,MÉDICOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MÉDICOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MÉDICOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MÉDICOSRowChangedEvent) Is Nothing) Then
                RaiseEvent MÉDICOSRowChanged(Me, New MÉDICOSRowChangeEvent(CType(e.Row,MÉDICOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MÉDICOSRowChangingEvent) Is Nothing) Then
                RaiseEvent MÉDICOSRowChanging(Me, New MÉDICOSRowChangeEvent(CType(e.Row,MÉDICOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MÉDICOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent MÉDICOSRowDeleted(Me, New MÉDICOSRowChangeEvent(CType(e.Row,MÉDICOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MÉDICOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent MÉDICOSRowDeleting(Me, New MÉDICOSRowChangeEvent(CType(e.Row,MÉDICOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveMÉDICOSRow(ByVal row As MÉDICOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MÉDICOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PACIENTESDataTable
        Inherits Global.System.Data.TypedTableBase(Of PACIENTESRow)
        
        Private columnPAC_CODIGOP As Global.System.Data.DataColumn
        
        Private columnPAC_NOMBREP As Global.System.Data.DataColumn
        
        Private columnRAZ_CODIGOR As Global.System.Data.DataColumn
        
        Private columnDUE_CODIGOD As Global.System.Data.DataColumn
        
        Private columnMED_CODIGOM As Global.System.Data.DataColumn
        
        Private columnPAC_FOTOP As Global.System.Data.DataColumn
        
        Private columnPAC_FECHA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PACIENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PAC_CODIGOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAC_CODIGOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PAC_NOMBREPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAC_NOMBREP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RAZ_CODIGORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAZ_CODIGOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_CODIGODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_CODIGOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_CODIGOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_CODIGOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PAC_FOTOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAC_FOTOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PAC_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAC_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PACIENTESRow
            Get
                Return CType(Me.Rows(index),PACIENTESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event PACIENTESRowChanging As PACIENTESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event PACIENTESRowChanged As PACIENTESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event PACIENTESRowDeleting As PACIENTESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event PACIENTESRowDeleted As PACIENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddPACIENTESRow(ByVal row As PACIENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddPACIENTESRow(ByVal PAC_CODIGOP As Decimal, ByVal PAC_NOMBREP As String, ByVal parentRAZASRowBySYS_C007367 As RAZASRow, ByVal parentDUEÑOSRowBySYS_C007368 As DUEÑOSRow, ByVal parentMÉDICOSRowBySYS_C007369 As MÉDICOSRow, ByVal PAC_FOTOP() As Byte, ByVal PAC_FECHA As Date) As PACIENTESRow
            Dim rowPACIENTESRow As PACIENTESRow = CType(Me.NewRow,PACIENTESRow)
            Dim columnValuesArray() As Object = New Object() {PAC_CODIGOP, PAC_NOMBREP, Nothing, Nothing, Nothing, PAC_FOTOP, PAC_FECHA}
            If (Not (parentRAZASRowBySYS_C007367) Is Nothing) Then
                columnValuesArray(2) = parentRAZASRowBySYS_C007367(0)
            End If
            If (Not (parentDUEÑOSRowBySYS_C007368) Is Nothing) Then
                columnValuesArray(3) = parentDUEÑOSRowBySYS_C007368(0)
            End If
            If (Not (parentMÉDICOSRowBySYS_C007369) Is Nothing) Then
                columnValuesArray(4) = parentMÉDICOSRowBySYS_C007369(0)
            End If
            rowPACIENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPACIENTESRow)
            Return rowPACIENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByPAC_CODIGOP(ByVal PAC_CODIGOP As Decimal) As PACIENTESRow
            Return CType(Me.Rows.Find(New Object() {PAC_CODIGOP}),PACIENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PACIENTESDataTable = CType(MyBase.Clone,PACIENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PACIENTESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPAC_CODIGOP = MyBase.Columns("PAC_CODIGOP")
            Me.columnPAC_NOMBREP = MyBase.Columns("PAC_NOMBREP")
            Me.columnRAZ_CODIGOR = MyBase.Columns("RAZ_CODIGOR")
            Me.columnDUE_CODIGOD = MyBase.Columns("DUE_CODIGOD")
            Me.columnMED_CODIGOM = MyBase.Columns("MED_CODIGOM")
            Me.columnPAC_FOTOP = MyBase.Columns("PAC_FOTOP")
            Me.columnPAC_FECHA = MyBase.Columns("PAC_FECHA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPAC_CODIGOP = New Global.System.Data.DataColumn("PAC_CODIGOP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAC_CODIGOP)
            Me.columnPAC_NOMBREP = New Global.System.Data.DataColumn("PAC_NOMBREP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAC_NOMBREP)
            Me.columnRAZ_CODIGOR = New Global.System.Data.DataColumn("RAZ_CODIGOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAZ_CODIGOR)
            Me.columnDUE_CODIGOD = New Global.System.Data.DataColumn("DUE_CODIGOD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_CODIGOD)
            Me.columnMED_CODIGOM = New Global.System.Data.DataColumn("MED_CODIGOM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_CODIGOM)
            Me.columnPAC_FOTOP = New Global.System.Data.DataColumn("PAC_FOTOP", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAC_FOTOP)
            Me.columnPAC_FECHA = New Global.System.Data.DataColumn("PAC_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAC_FECHA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPAC_CODIGOP}, true))
            Me.columnPAC_CODIGOP.AllowDBNull = false
            Me.columnPAC_CODIGOP.Unique = true
            Me.columnPAC_NOMBREP.AllowDBNull = false
            Me.columnPAC_NOMBREP.MaxLength = 50
            Me.columnRAZ_CODIGOR.AllowDBNull = false
            Me.columnDUE_CODIGOD.AllowDBNull = false
            Me.columnMED_CODIGOM.AllowDBNull = false
            Me.columnPAC_FECHA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewPACIENTESRow() As PACIENTESRow
            Return CType(Me.NewRow,PACIENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PACIENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PACIENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PACIENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent PACIENTESRowChanged(Me, New PACIENTESRowChangeEvent(CType(e.Row,PACIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PACIENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent PACIENTESRowChanging(Me, New PACIENTESRowChangeEvent(CType(e.Row,PACIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PACIENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent PACIENTESRowDeleted(Me, New PACIENTESRowChangeEvent(CType(e.Row,PACIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PACIENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent PACIENTESRowDeleting(Me, New PACIENTESRowChangeEvent(CType(e.Row,PACIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovePACIENTESRow(ByVal row As PACIENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PACIENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RAZASDataTable
        Inherits Global.System.Data.TypedTableBase(Of RAZASRow)
        
        Private columnRAZ_CODIGOR As Global.System.Data.DataColumn
        
        Private columnRAZ_RAZA As Global.System.Data.DataColumn
        
        Private columnESP_CODIGOE As Global.System.Data.DataColumn
        
        Private columnESP_ESPECIE As Global.System.Data.DataColumn
        
        Private columnESP_FAMILIA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RAZAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RAZ_CODIGORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAZ_CODIGOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RAZ_RAZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAZ_RAZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ESP_CODIGOEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_CODIGOE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ESP_ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_ESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ESP_FAMILIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_FAMILIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RAZASRow
            Get
                Return CType(Me.Rows(index),RAZASRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event RAZASRowChanging As RAZASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event RAZASRowChanged As RAZASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event RAZASRowDeleting As RAZASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event RAZASRowDeleted As RAZASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddRAZASRow(ByVal row As RAZASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddRAZASRow(ByVal RAZ_CODIGOR As Decimal, ByVal RAZ_RAZA As String, ByVal parentESPECIESRowBySYS_C007317 As ESPECIESRow, ByVal ESP_ESPECIE As String, ByVal ESP_FAMILIA As String) As RAZASRow
            Dim rowRAZASRow As RAZASRow = CType(Me.NewRow,RAZASRow)
            Dim columnValuesArray() As Object = New Object() {RAZ_CODIGOR, RAZ_RAZA, Nothing, ESP_ESPECIE, ESP_FAMILIA}
            If (Not (parentESPECIESRowBySYS_C007317) Is Nothing) Then
                columnValuesArray(2) = parentESPECIESRowBySYS_C007317(0)
            End If
            rowRAZASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRAZASRow)
            Return rowRAZASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByRAZ_CODIGOR(ByVal RAZ_CODIGOR As Decimal) As RAZASRow
            Return CType(Me.Rows.Find(New Object() {RAZ_CODIGOR}),RAZASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RAZASDataTable = CType(MyBase.Clone,RAZASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RAZASDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnRAZ_CODIGOR = MyBase.Columns("RAZ_CODIGOR")
            Me.columnRAZ_RAZA = MyBase.Columns("RAZ_RAZA")
            Me.columnESP_CODIGOE = MyBase.Columns("ESP_CODIGOE")
            Me.columnESP_ESPECIE = MyBase.Columns("ESP_ESPECIE")
            Me.columnESP_FAMILIA = MyBase.Columns("ESP_FAMILIA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnRAZ_CODIGOR = New Global.System.Data.DataColumn("RAZ_CODIGOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAZ_CODIGOR)
            Me.columnRAZ_RAZA = New Global.System.Data.DataColumn("RAZ_RAZA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAZ_RAZA)
            Me.columnESP_CODIGOE = New Global.System.Data.DataColumn("ESP_CODIGOE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_CODIGOE)
            Me.columnESP_ESPECIE = New Global.System.Data.DataColumn("ESP_ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_ESPECIE)
            Me.columnESP_FAMILIA = New Global.System.Data.DataColumn("ESP_FAMILIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_FAMILIA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRAZ_RAZA}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnRAZ_CODIGOR}, true))
            Me.columnRAZ_CODIGOR.AllowDBNull = false
            Me.columnRAZ_CODIGOR.Unique = true
            Me.columnRAZ_RAZA.AllowDBNull = false
            Me.columnRAZ_RAZA.Unique = true
            Me.columnRAZ_RAZA.MaxLength = 50
            Me.columnESP_CODIGOE.AllowDBNull = false
            Me.columnESP_ESPECIE.AllowDBNull = false
            Me.columnESP_ESPECIE.MaxLength = 50
            Me.columnESP_FAMILIA.AllowDBNull = false
            Me.columnESP_FAMILIA.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewRAZASRow() As RAZASRow
            Return CType(Me.NewRow,RAZASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RAZASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RAZASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RAZASRowChangedEvent) Is Nothing) Then
                RaiseEvent RAZASRowChanged(Me, New RAZASRowChangeEvent(CType(e.Row,RAZASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RAZASRowChangingEvent) Is Nothing) Then
                RaiseEvent RAZASRowChanging(Me, New RAZASRowChangeEvent(CType(e.Row,RAZASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RAZASRowDeletedEvent) Is Nothing) Then
                RaiseEvent RAZASRowDeleted(Me, New RAZASRowChangeEvent(CType(e.Row,RAZASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RAZASRowDeletingEvent) Is Nothing) Then
                RaiseEvent RAZASRowDeleting(Me, New RAZASRowChangeEvent(CType(e.Row,RAZASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveRAZASRow(ByVal row As RAZASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RAZASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTEDataTable
        Inherits Global.System.Data.TypedTableBase(Of REPORTERow)
        
        Private columnREP_SECUENCIA As Global.System.Data.DataColumn
        
        Private columnREP_MESH As Global.System.Data.DataColumn
        
        Private columnREP_FECHAH As Global.System.Data.DataColumn
        
        Private columnDUE_CODIGOD As Global.System.Data.DataColumn
        
        Private columnPAC_CODIGOP As Global.System.Data.DataColumn
        
        Private columnESP_CODIGOE As Global.System.Data.DataColumn
        
        Private columnCIT_CODIGOC As Global.System.Data.DataColumn
        
        Private columnMED_CODIGOM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property REP_SECUENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREP_SECUENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property REP_MESHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREP_MESH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property REP_FECHAHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREP_FECHAH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_CODIGODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_CODIGOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PAC_CODIGOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAC_CODIGOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ESP_CODIGOEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_CODIGOE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CIT_CODIGOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIT_CODIGOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_CODIGOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_CODIGOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTERow
            Get
                Return CType(Me.Rows(index),REPORTERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event REPORTERowChanging As REPORTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event REPORTERowChanged As REPORTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event REPORTERowDeleting As REPORTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event REPORTERowDeleted As REPORTERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddREPORTERow(ByVal row As REPORTERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddREPORTERow(ByVal REP_SECUENCIA As Decimal, ByVal REP_MESH As String, ByVal REP_FECHAH As Date, ByVal DUE_CODIGOD As Decimal, ByVal PAC_CODIGOP As Decimal, ByVal ESP_CODIGOE As Decimal, ByVal CIT_CODIGOC As Decimal, ByVal MED_CODIGOM As Decimal) As REPORTERow
            Dim rowREPORTERow As REPORTERow = CType(Me.NewRow,REPORTERow)
            Dim columnValuesArray() As Object = New Object() {REP_SECUENCIA, REP_MESH, REP_FECHAH, DUE_CODIGOD, PAC_CODIGOP, ESP_CODIGOE, CIT_CODIGOC, MED_CODIGOM}
            rowREPORTERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTERow)
            Return rowREPORTERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByREP_SECUENCIAREP_FECHAH(ByVal REP_SECUENCIA As Decimal, ByVal REP_FECHAH As Date) As REPORTERow
            Return CType(Me.Rows.Find(New Object() {REP_SECUENCIA, REP_FECHAH}),REPORTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTEDataTable = CType(MyBase.Clone,REPORTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnREP_SECUENCIA = MyBase.Columns("REP_SECUENCIA")
            Me.columnREP_MESH = MyBase.Columns("REP_MESH")
            Me.columnREP_FECHAH = MyBase.Columns("REP_FECHAH")
            Me.columnDUE_CODIGOD = MyBase.Columns("DUE_CODIGOD")
            Me.columnPAC_CODIGOP = MyBase.Columns("PAC_CODIGOP")
            Me.columnESP_CODIGOE = MyBase.Columns("ESP_CODIGOE")
            Me.columnCIT_CODIGOC = MyBase.Columns("CIT_CODIGOC")
            Me.columnMED_CODIGOM = MyBase.Columns("MED_CODIGOM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnREP_SECUENCIA = New Global.System.Data.DataColumn("REP_SECUENCIA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREP_SECUENCIA)
            Me.columnREP_MESH = New Global.System.Data.DataColumn("REP_MESH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREP_MESH)
            Me.columnREP_FECHAH = New Global.System.Data.DataColumn("REP_FECHAH", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREP_FECHAH)
            Me.columnDUE_CODIGOD = New Global.System.Data.DataColumn("DUE_CODIGOD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_CODIGOD)
            Me.columnPAC_CODIGOP = New Global.System.Data.DataColumn("PAC_CODIGOP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAC_CODIGOP)
            Me.columnESP_CODIGOE = New Global.System.Data.DataColumn("ESP_CODIGOE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_CODIGOE)
            Me.columnCIT_CODIGOC = New Global.System.Data.DataColumn("CIT_CODIGOC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIT_CODIGOC)
            Me.columnMED_CODIGOM = New Global.System.Data.DataColumn("MED_CODIGOM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_CODIGOM)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnREP_SECUENCIA, Me.columnREP_FECHAH}, true))
            Me.columnREP_SECUENCIA.AllowDBNull = false
            Me.columnREP_MESH.AllowDBNull = false
            Me.columnREP_MESH.MaxLength = 50
            Me.columnREP_FECHAH.AllowDBNull = false
            Me.columnDUE_CODIGOD.AllowDBNull = false
            Me.columnPAC_CODIGOP.AllowDBNull = false
            Me.columnESP_CODIGOE.AllowDBNull = false
            Me.columnCIT_CODIGOC.AllowDBNull = false
            Me.columnMED_CODIGOM.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewREPORTERow() As REPORTERow
            Return CType(Me.NewRow,REPORTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTERowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTERowChanged(Me, New REPORTERowChangeEvent(CType(e.Row,REPORTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTERowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTERowChanging(Me, New REPORTERowChangeEvent(CType(e.Row,REPORTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTERowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTERowDeleted(Me, New REPORTERowChangeEvent(CType(e.Row,REPORTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTERowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTERowDeleting(Me, New REPORTERowChangeEvent(CType(e.Row,REPORTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveREPORTERow(ByVal row As REPORTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TEL_DUEÑODataTable
        Inherits Global.System.Data.TypedTableBase(Of TEL_DUEÑORow)
        
        Private columnDUE_CODIGOD As Global.System.Data.DataColumn
        
        Private columnTEDU_TEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TEL_DUEÑO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DUE_CODIGODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUE_CODIGOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TEDU_TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEDU_TEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TEL_DUEÑORow
            Get
                Return CType(Me.Rows(index),TEL_DUEÑORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TEL_DUEÑORowChanging As TEL_DUEÑORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TEL_DUEÑORowChanged As TEL_DUEÑORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TEL_DUEÑORowDeleting As TEL_DUEÑORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TEL_DUEÑORowDeleted As TEL_DUEÑORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddTEL_DUEÑORow(ByVal row As TEL_DUEÑORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddTEL_DUEÑORow(ByVal parentDUEÑOSRowBySYS_C007403 As DUEÑOSRow, ByVal TEDU_TEL As String) As TEL_DUEÑORow
            Dim rowTEL_DUEÑORow As TEL_DUEÑORow = CType(Me.NewRow,TEL_DUEÑORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TEDU_TEL}
            If (Not (parentDUEÑOSRowBySYS_C007403) Is Nothing) Then
                columnValuesArray(0) = parentDUEÑOSRowBySYS_C007403(0)
            End If
            rowTEL_DUEÑORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTEL_DUEÑORow)
            Return rowTEL_DUEÑORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByDUE_CODIGODTEDU_TEL(ByVal DUE_CODIGOD As Decimal, ByVal TEDU_TEL As String) As TEL_DUEÑORow
            Return CType(Me.Rows.Find(New Object() {DUE_CODIGOD, TEDU_TEL}),TEL_DUEÑORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TEL_DUEÑODataTable = CType(MyBase.Clone,TEL_DUEÑODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TEL_DUEÑODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnDUE_CODIGOD = MyBase.Columns("DUE_CODIGOD")
            Me.columnTEDU_TEL = MyBase.Columns("TEDU_TEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnDUE_CODIGOD = New Global.System.Data.DataColumn("DUE_CODIGOD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUE_CODIGOD)
            Me.columnTEDU_TEL = New Global.System.Data.DataColumn("TEDU_TEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEDU_TEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDUE_CODIGOD, Me.columnTEDU_TEL}, true))
            Me.columnDUE_CODIGOD.AllowDBNull = false
            Me.columnTEDU_TEL.AllowDBNull = false
            Me.columnTEDU_TEL.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewTEL_DUEÑORow() As TEL_DUEÑORow
            Return CType(Me.NewRow,TEL_DUEÑORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TEL_DUEÑORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TEL_DUEÑORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TEL_DUEÑORowChangedEvent) Is Nothing) Then
                RaiseEvent TEL_DUEÑORowChanged(Me, New TEL_DUEÑORowChangeEvent(CType(e.Row,TEL_DUEÑORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TEL_DUEÑORowChangingEvent) Is Nothing) Then
                RaiseEvent TEL_DUEÑORowChanging(Me, New TEL_DUEÑORowChangeEvent(CType(e.Row,TEL_DUEÑORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TEL_DUEÑORowDeletedEvent) Is Nothing) Then
                RaiseEvent TEL_DUEÑORowDeleted(Me, New TEL_DUEÑORowChangeEvent(CType(e.Row,TEL_DUEÑORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TEL_DUEÑORowDeletingEvent) Is Nothing) Then
                RaiseEvent TEL_DUEÑORowDeleting(Me, New TEL_DUEÑORowChangeEvent(CType(e.Row,TEL_DUEÑORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveTEL_DUEÑORow(ByVal row As TEL_DUEÑORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TEL_DUEÑODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TEL_MÉDICODataTable
        Inherits Global.System.Data.TypedTableBase(Of TEL_MÉDICORow)
        
        Private columnMED_CODIGOM As Global.System.Data.DataColumn
        
        Private columnTEME_TEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TEL_MÉDICO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_CODIGOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_CODIGOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TEME_TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEME_TEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TEL_MÉDICORow
            Get
                Return CType(Me.Rows(index),TEL_MÉDICORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TEL_MÉDICORowChanging As TEL_MÉDICORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TEL_MÉDICORowChanged As TEL_MÉDICORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TEL_MÉDICORowDeleting As TEL_MÉDICORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TEL_MÉDICORowDeleted As TEL_MÉDICORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddTEL_MÉDICORow(ByVal row As TEL_MÉDICORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddTEL_MÉDICORow(ByVal parentMÉDICOSRowBySYS_C007398 As MÉDICOSRow, ByVal TEME_TEL As String) As TEL_MÉDICORow
            Dim rowTEL_MÉDICORow As TEL_MÉDICORow = CType(Me.NewRow,TEL_MÉDICORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TEME_TEL}
            If (Not (parentMÉDICOSRowBySYS_C007398) Is Nothing) Then
                columnValuesArray(0) = parentMÉDICOSRowBySYS_C007398(0)
            End If
            rowTEL_MÉDICORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTEL_MÉDICORow)
            Return rowTEL_MÉDICORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByMED_CODIGOMTEME_TEL(ByVal MED_CODIGOM As Decimal, ByVal TEME_TEL As String) As TEL_MÉDICORow
            Return CType(Me.Rows.Find(New Object() {MED_CODIGOM, TEME_TEL}),TEL_MÉDICORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TEL_MÉDICODataTable = CType(MyBase.Clone,TEL_MÉDICODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TEL_MÉDICODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMED_CODIGOM = MyBase.Columns("MED_CODIGOM")
            Me.columnTEME_TEL = MyBase.Columns("TEME_TEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMED_CODIGOM = New Global.System.Data.DataColumn("MED_CODIGOM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_CODIGOM)
            Me.columnTEME_TEL = New Global.System.Data.DataColumn("TEME_TEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEME_TEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMED_CODIGOM, Me.columnTEME_TEL}, true))
            Me.columnMED_CODIGOM.AllowDBNull = false
            Me.columnTEME_TEL.AllowDBNull = false
            Me.columnTEME_TEL.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewTEL_MÉDICORow() As TEL_MÉDICORow
            Return CType(Me.NewRow,TEL_MÉDICORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TEL_MÉDICORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TEL_MÉDICORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TEL_MÉDICORowChangedEvent) Is Nothing) Then
                RaiseEvent TEL_MÉDICORowChanged(Me, New TEL_MÉDICORowChangeEvent(CType(e.Row,TEL_MÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TEL_MÉDICORowChangingEvent) Is Nothing) Then
                RaiseEvent TEL_MÉDICORowChanging(Me, New TEL_MÉDICORowChangeEvent(CType(e.Row,TEL_MÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TEL_MÉDICORowDeletedEvent) Is Nothing) Then
                RaiseEvent TEL_MÉDICORowDeleted(Me, New TEL_MÉDICORowChangeEvent(CType(e.Row,TEL_MÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TEL_MÉDICORowDeletingEvent) Is Nothing) Then
                RaiseEvent TEL_MÉDICORowDeleting(Me, New TEL_MÉDICORowChangeEvent(CType(e.Row,TEL_MÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveTEL_MÉDICORow(ByVal row As TEL_MÉDICORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TEL_MÉDICODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TURNOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of TURNOSRow)
        
        Private columnTUR_CODIGOT As Global.System.Data.DataColumn
        
        Private columnTUR_HORAI As Global.System.Data.DataColumn
        
        Private columnTUR_HORAF As Global.System.Data.DataColumn
        
        Private columnTUR_TIPO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TURNOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TUR_CODIGOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTUR_CODIGOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TUR_HORAIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTUR_HORAI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TUR_HORAFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTUR_HORAF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TUR_TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTUR_TIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TURNOSRow
            Get
                Return CType(Me.Rows(index),TURNOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TURNOSRowChanging As TURNOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TURNOSRowChanged As TURNOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TURNOSRowDeleting As TURNOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TURNOSRowDeleted As TURNOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddTURNOSRow(ByVal row As TURNOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddTURNOSRow(ByVal TUR_CODIGOT As Decimal, ByVal TUR_HORAI As Date, ByVal TUR_HORAF As Date, ByVal TUR_TIPO As String) As TURNOSRow
            Dim rowTURNOSRow As TURNOSRow = CType(Me.NewRow,TURNOSRow)
            Dim columnValuesArray() As Object = New Object() {TUR_CODIGOT, TUR_HORAI, TUR_HORAF, TUR_TIPO}
            rowTURNOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTURNOSRow)
            Return rowTURNOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByTUR_CODIGOT(ByVal TUR_CODIGOT As Decimal) As TURNOSRow
            Return CType(Me.Rows.Find(New Object() {TUR_CODIGOT}),TURNOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TURNOSDataTable = CType(MyBase.Clone,TURNOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TURNOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnTUR_CODIGOT = MyBase.Columns("TUR_CODIGOT")
            Me.columnTUR_HORAI = MyBase.Columns("TUR_HORAI")
            Me.columnTUR_HORAF = MyBase.Columns("TUR_HORAF")
            Me.columnTUR_TIPO = MyBase.Columns("TUR_TIPO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnTUR_CODIGOT = New Global.System.Data.DataColumn("TUR_CODIGOT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTUR_CODIGOT)
            Me.columnTUR_HORAI = New Global.System.Data.DataColumn("TUR_HORAI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTUR_HORAI)
            Me.columnTUR_HORAF = New Global.System.Data.DataColumn("TUR_HORAF", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTUR_HORAF)
            Me.columnTUR_TIPO = New Global.System.Data.DataColumn("TUR_TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTUR_TIPO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTUR_CODIGOT}, true))
            Me.columnTUR_CODIGOT.AllowDBNull = false
            Me.columnTUR_CODIGOT.Unique = true
            Me.columnTUR_HORAI.AllowDBNull = false
            Me.columnTUR_HORAF.AllowDBNull = false
            Me.columnTUR_TIPO.AllowDBNull = false
            Me.columnTUR_TIPO.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewTURNOSRow() As TURNOSRow
            Return CType(Me.NewRow,TURNOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TURNOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TURNOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TURNOSRowChangedEvent) Is Nothing) Then
                RaiseEvent TURNOSRowChanged(Me, New TURNOSRowChangeEvent(CType(e.Row,TURNOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TURNOSRowChangingEvent) Is Nothing) Then
                RaiseEvent TURNOSRowChanging(Me, New TURNOSRowChangeEvent(CType(e.Row,TURNOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TURNOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TURNOSRowDeleted(Me, New TURNOSRowChangeEvent(CType(e.Row,TURNOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TURNOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TURNOSRowDeleting(Me, New TURNOSRowChangeEvent(CType(e.Row,TURNOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveTURNOSRow(ByVal row As TURNOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TURNOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TURNOXMÉDICODataTable
        Inherits Global.System.Data.TypedTableBase(Of TURNOXMÉDICORow)
        
        Private columnMED_CODIGOM As Global.System.Data.DataColumn
        
        Private columnTUME_FECHA As Global.System.Data.DataColumn
        
        Private columnTUR_CODIGOT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TURNOXMÉDICO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MED_CODIGOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMED_CODIGOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TUME_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTUME_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TUR_CODIGOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTUR_CODIGOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TURNOXMÉDICORow
            Get
                Return CType(Me.Rows(index),TURNOXMÉDICORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TURNOXMÉDICORowChanging As TURNOXMÉDICORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TURNOXMÉDICORowChanged As TURNOXMÉDICORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TURNOXMÉDICORowDeleting As TURNOXMÉDICORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TURNOXMÉDICORowDeleted As TURNOXMÉDICORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddTURNOXMÉDICORow(ByVal row As TURNOXMÉDICORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddTURNOXMÉDICORow(ByVal parentMÉDICOSRowBySYS_C007400 As MÉDICOSRow, ByVal TUME_FECHA As Date, ByVal parentTURNOSRowBySYS_C007401 As TURNOSRow) As TURNOXMÉDICORow
            Dim rowTURNOXMÉDICORow As TURNOXMÉDICORow = CType(Me.NewRow,TURNOXMÉDICORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TUME_FECHA, Nothing}
            If (Not (parentMÉDICOSRowBySYS_C007400) Is Nothing) Then
                columnValuesArray(0) = parentMÉDICOSRowBySYS_C007400(0)
            End If
            If (Not (parentTURNOSRowBySYS_C007401) Is Nothing) Then
                columnValuesArray(2) = parentTURNOSRowBySYS_C007401(0)
            End If
            rowTURNOXMÉDICORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTURNOXMÉDICORow)
            Return rowTURNOXMÉDICORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByMED_CODIGOMTUME_FECHATUR_CODIGOT(ByVal MED_CODIGOM As Decimal, ByVal TUME_FECHA As Date, ByVal TUR_CODIGOT As Decimal) As TURNOXMÉDICORow
            Return CType(Me.Rows.Find(New Object() {MED_CODIGOM, TUME_FECHA, TUR_CODIGOT}),TURNOXMÉDICORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TURNOXMÉDICODataTable = CType(MyBase.Clone,TURNOXMÉDICODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TURNOXMÉDICODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMED_CODIGOM = MyBase.Columns("MED_CODIGOM")
            Me.columnTUME_FECHA = MyBase.Columns("TUME_FECHA")
            Me.columnTUR_CODIGOT = MyBase.Columns("TUR_CODIGOT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMED_CODIGOM = New Global.System.Data.DataColumn("MED_CODIGOM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMED_CODIGOM)
            Me.columnTUME_FECHA = New Global.System.Data.DataColumn("TUME_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTUME_FECHA)
            Me.columnTUR_CODIGOT = New Global.System.Data.DataColumn("TUR_CODIGOT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTUR_CODIGOT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMED_CODIGOM, Me.columnTUME_FECHA, Me.columnTUR_CODIGOT}, true))
            Me.columnMED_CODIGOM.AllowDBNull = false
            Me.columnTUME_FECHA.AllowDBNull = false
            Me.columnTUR_CODIGOT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewTURNOXMÉDICORow() As TURNOXMÉDICORow
            Return CType(Me.NewRow,TURNOXMÉDICORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TURNOXMÉDICORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TURNOXMÉDICORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TURNOXMÉDICORowChangedEvent) Is Nothing) Then
                RaiseEvent TURNOXMÉDICORowChanged(Me, New TURNOXMÉDICORowChangeEvent(CType(e.Row,TURNOXMÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TURNOXMÉDICORowChangingEvent) Is Nothing) Then
                RaiseEvent TURNOXMÉDICORowChanging(Me, New TURNOXMÉDICORowChangeEvent(CType(e.Row,TURNOXMÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TURNOXMÉDICORowDeletedEvent) Is Nothing) Then
                RaiseEvent TURNOXMÉDICORowDeleted(Me, New TURNOXMÉDICORowChangeEvent(CType(e.Row,TURNOXMÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TURNOXMÉDICORowDeletingEvent) Is Nothing) Then
                RaiseEvent TURNOXMÉDICORowDeleting(Me, New TURNOXMÉDICORowChangeEvent(CType(e.Row,TURNOXMÉDICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveTURNOXMÉDICORow(ByVal row As TURNOXMÉDICORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TURNOXMÉDICODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class USUARIOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of USUARIOSRow)
        
        Private columnUSU_USUARIO As Global.System.Data.DataColumn
        
        Private columnUSU_NOMBRE1 As Global.System.Data.DataColumn
        
        Private columnUSU_NOMBRE2 As Global.System.Data.DataColumn
        
        Private columnUSU_APELLIDO1 As Global.System.Data.DataColumn
        
        Private columnUSU_APELLIDO2 As Global.System.Data.DataColumn
        
        Private columnUSU_TEL As Global.System.Data.DataColumn
        
        Private columnUSU_DIRECCION As Global.System.Data.DataColumn
        
        Private columnUSU_CONTRASEÑA As Global.System.Data.DataColumn
        
        Private columnUSU_TIPO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "USUARIOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USU_USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSU_USUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USU_NOMBRE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSU_NOMBRE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USU_NOMBRE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSU_NOMBRE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USU_APELLIDO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSU_APELLIDO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USU_APELLIDO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSU_APELLIDO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USU_TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSU_TEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USU_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSU_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USU_CONTRASEÑAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSU_CONTRASEÑA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USU_TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSU_TIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As USUARIOSRow
            Get
                Return CType(Me.Rows(index),USUARIOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event USUARIOSRowChanging As USUARIOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event USUARIOSRowChanged As USUARIOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event USUARIOSRowDeleting As USUARIOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event USUARIOSRowDeleted As USUARIOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddUSUARIOSRow(ByVal row As USUARIOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddUSUARIOSRow(ByVal USU_USUARIO As String, ByVal USU_NOMBRE1 As String, ByVal USU_NOMBRE2 As String, ByVal USU_APELLIDO1 As String, ByVal USU_APELLIDO2 As String, ByVal USU_TEL As String, ByVal USU_DIRECCION As String, ByVal USU_CONTRASEÑA As String, ByVal USU_TIPO As String) As USUARIOSRow
            Dim rowUSUARIOSRow As USUARIOSRow = CType(Me.NewRow,USUARIOSRow)
            Dim columnValuesArray() As Object = New Object() {USU_USUARIO, USU_NOMBRE1, USU_NOMBRE2, USU_APELLIDO1, USU_APELLIDO2, USU_TEL, USU_DIRECCION, USU_CONTRASEÑA, USU_TIPO}
            rowUSUARIOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUSUARIOSRow)
            Return rowUSUARIOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUSU_USUARIO(ByVal USU_USUARIO As String) As USUARIOSRow
            Return CType(Me.Rows.Find(New Object() {USU_USUARIO}),USUARIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As USUARIOSDataTable = CType(MyBase.Clone,USUARIOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New USUARIOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnUSU_USUARIO = MyBase.Columns("USU_USUARIO")
            Me.columnUSU_NOMBRE1 = MyBase.Columns("USU_NOMBRE1")
            Me.columnUSU_NOMBRE2 = MyBase.Columns("USU_NOMBRE2")
            Me.columnUSU_APELLIDO1 = MyBase.Columns("USU_APELLIDO1")
            Me.columnUSU_APELLIDO2 = MyBase.Columns("USU_APELLIDO2")
            Me.columnUSU_TEL = MyBase.Columns("USU_TEL")
            Me.columnUSU_DIRECCION = MyBase.Columns("USU_DIRECCION")
            Me.columnUSU_CONTRASEÑA = MyBase.Columns("USU_CONTRASEÑA")
            Me.columnUSU_TIPO = MyBase.Columns("USU_TIPO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnUSU_USUARIO = New Global.System.Data.DataColumn("USU_USUARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSU_USUARIO)
            Me.columnUSU_NOMBRE1 = New Global.System.Data.DataColumn("USU_NOMBRE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSU_NOMBRE1)
            Me.columnUSU_NOMBRE2 = New Global.System.Data.DataColumn("USU_NOMBRE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSU_NOMBRE2)
            Me.columnUSU_APELLIDO1 = New Global.System.Data.DataColumn("USU_APELLIDO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSU_APELLIDO1)
            Me.columnUSU_APELLIDO2 = New Global.System.Data.DataColumn("USU_APELLIDO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSU_APELLIDO2)
            Me.columnUSU_TEL = New Global.System.Data.DataColumn("USU_TEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSU_TEL)
            Me.columnUSU_DIRECCION = New Global.System.Data.DataColumn("USU_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSU_DIRECCION)
            Me.columnUSU_CONTRASEÑA = New Global.System.Data.DataColumn("USU_CONTRASEÑA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSU_CONTRASEÑA)
            Me.columnUSU_TIPO = New Global.System.Data.DataColumn("USU_TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSU_TIPO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUSU_USUARIO}, true))
            Me.columnUSU_USUARIO.AllowDBNull = false
            Me.columnUSU_USUARIO.Unique = true
            Me.columnUSU_USUARIO.MaxLength = 50
            Me.columnUSU_NOMBRE1.AllowDBNull = false
            Me.columnUSU_NOMBRE1.MaxLength = 50
            Me.columnUSU_NOMBRE2.AllowDBNull = false
            Me.columnUSU_NOMBRE2.MaxLength = 50
            Me.columnUSU_APELLIDO1.AllowDBNull = false
            Me.columnUSU_APELLIDO1.MaxLength = 50
            Me.columnUSU_APELLIDO2.AllowDBNull = false
            Me.columnUSU_APELLIDO2.MaxLength = 50
            Me.columnUSU_TEL.AllowDBNull = false
            Me.columnUSU_TEL.MaxLength = 10
            Me.columnUSU_DIRECCION.AllowDBNull = false
            Me.columnUSU_DIRECCION.MaxLength = 200
            Me.columnUSU_CONTRASEÑA.AllowDBNull = false
            Me.columnUSU_CONTRASEÑA.MaxLength = 50
            Me.columnUSU_TIPO.AllowDBNull = false
            Me.columnUSU_TIPO.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewUSUARIOSRow() As USUARIOSRow
            Return CType(Me.NewRow,USUARIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New USUARIOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(USUARIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.USUARIOSRowChangedEvent) Is Nothing) Then
                RaiseEvent USUARIOSRowChanged(Me, New USUARIOSRowChangeEvent(CType(e.Row,USUARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.USUARIOSRowChangingEvent) Is Nothing) Then
                RaiseEvent USUARIOSRowChanging(Me, New USUARIOSRowChangeEvent(CType(e.Row,USUARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.USUARIOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent USUARIOSRowDeleted(Me, New USUARIOSRowChangeEvent(CType(e.Row,USUARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.USUARIOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent USUARIOSRowDeleting(Me, New USUARIOSRowChangeEvent(CType(e.Row,USUARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveUSUARIOSRow(ByVal row As USUARIOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As databases = New databases()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "USUARIOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class S_DUEÑORow
        Inherits Global.System.Data.DataRow
        
        Private tableS_DUEÑO As S_DUEÑODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_DUEÑO = CType(Me.Table,S_DUEÑODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_CODIGOD() As Decimal
            Get
                Return CType(Me(Me.tableS_DUEÑO.DUE_CODIGODColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_DUEÑO.DUE_CODIGODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_NOMBRE1() As String
            Get
                Return CType(Me(Me.tableS_DUEÑO.DUE_NOMBRE1Column),String)
            End Get
            Set
                Me(Me.tableS_DUEÑO.DUE_NOMBRE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_NOMBRE2() As String
            Get
                Return CType(Me(Me.tableS_DUEÑO.DUE_NOMBRE2Column),String)
            End Get
            Set
                Me(Me.tableS_DUEÑO.DUE_NOMBRE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_APELLIDO1() As String
            Get
                Return CType(Me(Me.tableS_DUEÑO.DUE_APELLIDO1Column),String)
            End Get
            Set
                Me(Me.tableS_DUEÑO.DUE_APELLIDO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_APELLIDO2() As String
            Get
                Return CType(Me(Me.tableS_DUEÑO.DUE_APELLIDO2Column),String)
            End Get
            Set
                Me(Me.tableS_DUEÑO.DUE_APELLIDO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_IDENTIFICACION() As String
            Get
                Return CType(Me(Me.tableS_DUEÑO.DUE_IDENTIFICACIONColumn),String)
            End Get
            Set
                Me(Me.tableS_DUEÑO.DUE_IDENTIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_DIRECCION() As String
            Get
                Return CType(Me(Me.tableS_DUEÑO.DUE_DIRECCIONColumn),String)
            End Get
            Set
                Me(Me.tableS_DUEÑO.DUE_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TELEFONOSM() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_DUEÑO.TELEFONOSMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TELEFONOSM' de la tabla 'S_DUEÑO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_DUEÑO.TELEFONOSMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTELEFONOSMNull() As Boolean
            Return Me.IsNull(Me.tableS_DUEÑO.TELEFONOSMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTELEFONOSMNull()
            Me(Me.tableS_DUEÑO.TELEFONOSMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class S_MÉDICORow
        Inherits Global.System.Data.DataRow
        
        Private tableS_MÉDICO As S_MÉDICODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_MÉDICO = CType(Me.Table,S_MÉDICODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_CODIGOM() As Decimal
            Get
                Return CType(Me(Me.tableS_MÉDICO.MED_CODIGOMColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_MÉDICO.MED_CODIGOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_NOMBRE1() As String
            Get
                Return CType(Me(Me.tableS_MÉDICO.MED_NOMBRE1Column),String)
            End Get
            Set
                Me(Me.tableS_MÉDICO.MED_NOMBRE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_NOMBRE2() As String
            Get
                Return CType(Me(Me.tableS_MÉDICO.MED_NOMBRE2Column),String)
            End Get
            Set
                Me(Me.tableS_MÉDICO.MED_NOMBRE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_APELLIDO1() As String
            Get
                Return CType(Me(Me.tableS_MÉDICO.MED_APELLIDO1Column),String)
            End Get
            Set
                Me(Me.tableS_MÉDICO.MED_APELLIDO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_APELLIDO2() As String
            Get
                Return CType(Me(Me.tableS_MÉDICO.MED_APELLIDO2Column),String)
            End Get
            Set
                Me(Me.tableS_MÉDICO.MED_APELLIDO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_DIRECCION() As String
            Get
                Return CType(Me(Me.tableS_MÉDICO.MED_DIRECCIONColumn),String)
            End Get
            Set
                Me(Me.tableS_MÉDICO.MED_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_EMERGENCIA() As String
            Get
                Return CType(Me(Me.tableS_MÉDICO.MED_EMERGENCIAColumn),String)
            End Get
            Set
                Me(Me.tableS_MÉDICO.MED_EMERGENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_INGRESO() As Date
            Get
                Return CType(Me(Me.tableS_MÉDICO.MED_INGRESOColumn),Date)
            End Get
            Set
                Me(Me.tableS_MÉDICO.MED_INGRESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TELEFONOSM() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_MÉDICO.TELEFONOSMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TELEFONOSM' de la tabla 'S_MÉDICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_MÉDICO.TELEFONOSMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTELEFONOSMNull() As Boolean
            Return Me.IsNull(Me.tableS_MÉDICO.TELEFONOSMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTELEFONOSMNull()
            Me(Me.tableS_MÉDICO.TELEFONOSMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class S_REPORTERow
        Inherits Global.System.Data.DataRow
        
        Private tableS_REPORTE As S_REPORTEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_REPORTE = CType(Me.Table,S_REPORTEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property REP_SECUENCIA() As Decimal
            Get
                Return CType(Me(Me.tableS_REPORTE.REP_SECUENCIAColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_REPORTE.REP_SECUENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property REP_MESH() As String
            Get
                Return CType(Me(Me.tableS_REPORTE.REP_MESHColumn),String)
            End Get
            Set
                Me(Me.tableS_REPORTE.REP_MESHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property REP_FECHAH() As Date
            Get
                Return CType(Me(Me.tableS_REPORTE.REP_FECHAHColumn),Date)
            End Get
            Set
                Me(Me.tableS_REPORTE.REP_FECHAHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_CODIGOD() As Decimal
            Get
                Return CType(Me(Me.tableS_REPORTE.DUE_CODIGODColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_REPORTE.DUE_CODIGODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NOMBRED() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_REPORTE.NOMBREDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRED' de la tabla 'S_REPORTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_REPORTE.NOMBREDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TELEFONOSD() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_REPORTE.TELEFONOSDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TELEFONOSD' de la tabla 'S_REPORTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_REPORTE.TELEFONOSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PAC_CODIGOP() As Decimal
            Get
                Return CType(Me(Me.tableS_REPORTE.PAC_CODIGOPColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_REPORTE.PAC_CODIGOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PAC_NOMBREP() As String
            Get
                Return CType(Me(Me.tableS_REPORTE.PAC_NOMBREPColumn),String)
            End Get
            Set
                Me(Me.tableS_REPORTE.PAC_NOMBREPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ESP_CODIGOE() As Decimal
            Get
                Return CType(Me(Me.tableS_REPORTE.ESP_CODIGOEColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_REPORTE.ESP_CODIGOEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ESP_ESPECIE() As String
            Get
                Return CType(Me(Me.tableS_REPORTE.ESP_ESPECIEColumn),String)
            End Get
            Set
                Me(Me.tableS_REPORTE.ESP_ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIT_CODIGOC() As Decimal
            Get
                Return CType(Me(Me.tableS_REPORTE.CIT_CODIGOCColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_REPORTE.CIT_CODIGOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIT_CALENDARIZADO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableS_REPORTE.CIT_CALENDARIZADOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIT_CALENDARIZADO' de la tabla 'S_REPORTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_REPORTE.CIT_CALENDARIZADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_CODIGOM() As Decimal
            Get
                Return CType(Me(Me.tableS_REPORTE.MED_CODIGOMColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_REPORTE.MED_CODIGOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NOMBREM() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_REPORTE.NOMBREMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBREM' de la tabla 'S_REPORTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_REPORTE.NOMBREMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNOMBREDNull() As Boolean
            Return Me.IsNull(Me.tableS_REPORTE.NOMBREDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNOMBREDNull()
            Me(Me.tableS_REPORTE.NOMBREDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTELEFONOSDNull() As Boolean
            Return Me.IsNull(Me.tableS_REPORTE.TELEFONOSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTELEFONOSDNull()
            Me(Me.tableS_REPORTE.TELEFONOSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCIT_CALENDARIZADONull() As Boolean
            Return Me.IsNull(Me.tableS_REPORTE.CIT_CALENDARIZADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCIT_CALENDARIZADONull()
            Me(Me.tableS_REPORTE.CIT_CALENDARIZADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNOMBREMNull() As Boolean
            Return Me.IsNull(Me.tableS_REPORTE.NOMBREMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNOMBREMNull()
            Me(Me.tableS_REPORTE.NOMBREMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AUDITORIASRow
        Inherits Global.System.Data.DataRow
        
        Private tableAUDITORIAS As AUDITORIASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAUDITORIAS = CType(Me.Table,AUDITORIASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USU_USUARIO() As String
            Get
                Return CType(Me(Me.tableAUDITORIAS.USU_USUARIOColumn),String)
            End Get
            Set
                Me(Me.tableAUDITORIAS.USU_USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AUD_PROCESO() As String
            Get
                Return CType(Me(Me.tableAUDITORIAS.AUD_PROCESOColumn),String)
            End Get
            Set
                Me(Me.tableAUDITORIAS.AUD_PROCESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AUD_FECHAHORA() As Date
            Get
                Return CType(Me(Me.tableAUDITORIAS.AUD_FECHAHORAColumn),Date)
            End Get
            Set
                Me(Me.tableAUDITORIAS.AUD_FECHAHORAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AUD_TABLA() As String
            Get
                Return CType(Me(Me.tableAUDITORIAS.AUD_TABLAColumn),String)
            End Get
            Set
                Me(Me.tableAUDITORIAS.AUD_TABLAColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CIRUGIASRow
        Inherits Global.System.Data.DataRow
        
        Private tableCIRUGIAS As CIRUGIASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCIRUGIAS = CType(Me.Table,CIRUGIASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIR_CODIGOC() As Decimal
            Get
                Return CType(Me(Me.tableCIRUGIAS.CIR_CODIGOCColumn),Decimal)
            End Get
            Set
                Me(Me.tableCIRUGIAS.CIR_CODIGOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIR_DURACION() As String
            Get
                Return CType(Me(Me.tableCIRUGIAS.CIR_DURACIONColumn),String)
            End Get
            Set
                Me(Me.tableCIRUGIAS.CIR_DURACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIR_DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableCIRUGIAS.CIR_DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableCIRUGIAS.CIR_DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIR_RIESGO() As String
            Get
                Return CType(Me(Me.tableCIRUGIAS.CIR_RIESGOColumn),String)
            End Get
            Set
                Me(Me.tableCIRUGIAS.CIR_RIESGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIR_NOMBRE() As String
            Get
                Return CType(Me(Me.tableCIRUGIAS.CIR_NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableCIRUGIAS.CIR_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIR_ANESTESÍA() As String
            Get
                Return CType(Me(Me.tableCIRUGIAS.CIR_ANESTESÍAColumn),String)
            End Get
            Set
                Me(Me.tableCIRUGIAS.CIR_ANESTESÍAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetCITASRows() As CITASRow()
            If (Me.Table.ChildRelations("SYS_C007384") Is Nothing) Then
                Return New CITASRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007384")),CITASRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CITASRow
        Inherits Global.System.Data.DataRow
        
        Private tableCITAS As CITASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCITAS = CType(Me.Table,CITASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIT_CODIGOC() As Decimal
            Get
                Return CType(Me(Me.tableCITAS.CIT_CODIGOCColumn),Decimal)
            End Get
            Set
                Me(Me.tableCITAS.CIT_CODIGOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIT_CALENDARIZADO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCITAS.CIT_CALENDARIZADOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIT_CALENDARIZADO' de la tabla 'CITAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCITAS.CIT_CALENDARIZADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PAC_CODIGOP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCITAS.PAC_CODIGOPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PAC_CODIGOP' de la tabla 'CITAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCITAS.PAC_CODIGOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIR_CODIGOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCITAS.CIR_CODIGOCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIR_CODIGOC' de la tabla 'CITAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCITAS.CIR_CODIGOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIT_HECHA() As Date
            Get
                Return CType(Me(Me.tableCITAS.CIT_HECHAColumn),Date)
            End Get
            Set
                Me(Me.tableCITAS.CIT_HECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIT_DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableCITAS.CIT_DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableCITAS.CIT_DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PACIENTESRow() As PACIENTESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007383")),PACIENTESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007383"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIRUGIASRow() As CIRUGIASRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007384")),CIRUGIASRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007384"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCIT_CALENDARIZADONull() As Boolean
            Return Me.IsNull(Me.tableCITAS.CIT_CALENDARIZADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCIT_CALENDARIZADONull()
            Me(Me.tableCITAS.CIT_CALENDARIZADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPAC_CODIGOPNull() As Boolean
            Return Me.IsNull(Me.tableCITAS.PAC_CODIGOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPAC_CODIGOPNull()
            Me(Me.tableCITAS.PAC_CODIGOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCIR_CODIGOCNull() As Boolean
            Return Me.IsNull(Me.tableCITAS.CIR_CODIGOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCIR_CODIGOCNull()
            Me(Me.tableCITAS.CIR_CODIGOCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DUEÑOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableDUEÑOS As DUEÑOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDUEÑOS = CType(Me.Table,DUEÑOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_CODIGOD() As Decimal
            Get
                Return CType(Me(Me.tableDUEÑOS.DUE_CODIGODColumn),Decimal)
            End Get
            Set
                Me(Me.tableDUEÑOS.DUE_CODIGODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_NOMBRE1() As String
            Get
                Return CType(Me(Me.tableDUEÑOS.DUE_NOMBRE1Column),String)
            End Get
            Set
                Me(Me.tableDUEÑOS.DUE_NOMBRE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_NOMBRE2() As String
            Get
                Return CType(Me(Me.tableDUEÑOS.DUE_NOMBRE2Column),String)
            End Get
            Set
                Me(Me.tableDUEÑOS.DUE_NOMBRE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_APELLIDO1() As String
            Get
                Return CType(Me(Me.tableDUEÑOS.DUE_APELLIDO1Column),String)
            End Get
            Set
                Me(Me.tableDUEÑOS.DUE_APELLIDO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_APELLIDO2() As String
            Get
                Return CType(Me(Me.tableDUEÑOS.DUE_APELLIDO2Column),String)
            End Get
            Set
                Me(Me.tableDUEÑOS.DUE_APELLIDO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_IDENTIFICACION() As String
            Get
                Return CType(Me(Me.tableDUEÑOS.DUE_IDENTIFICACIONColumn),String)
            End Get
            Set
                Me(Me.tableDUEÑOS.DUE_IDENTIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_DIRECCION() As String
            Get
                Return CType(Me(Me.tableDUEÑOS.DUE_DIRECCIONColumn),String)
            End Get
            Set
                Me(Me.tableDUEÑOS.DUE_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetPACIENTESRows() As PACIENTESRow()
            If (Me.Table.ChildRelations("SYS_C007368") Is Nothing) Then
                Return New PACIENTESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007368")),PACIENTESRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetTEL_DUEÑORows() As TEL_DUEÑORow()
            If (Me.Table.ChildRelations("SYS_C007403") Is Nothing) Then
                Return New TEL_DUEÑORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007403")),TEL_DUEÑORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ENFERMEDADESRow
        Inherits Global.System.Data.DataRow
        
        Private tableENFERMEDADES As ENFERMEDADESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableENFERMEDADES = CType(Me.Table,ENFERMEDADESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ENF_CODIGOE() As Decimal
            Get
                Return CType(Me(Me.tableENFERMEDADES.ENF_CODIGOEColumn),Decimal)
            End Get
            Set
                Me(Me.tableENFERMEDADES.ENF_CODIGOEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ENF_ENFERMEDAD() As String
            Get
                Return CType(Me(Me.tableENFERMEDADES.ENF_ENFERMEDADColumn),String)
            End Get
            Set
                Me(Me.tableENFERMEDADES.ENF_ENFERMEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetENFERMEDADXRAZARows() As ENFERMEDADXRAZARow()
            If (Me.Table.ChildRelations("SYS_C007392") Is Nothing) Then
                Return New ENFERMEDADXRAZARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007392")),ENFERMEDADXRAZARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetMEDICINAXENFERMEDADRows() As MEDICINAXENFERMEDADRow()
            If (Me.Table.ChildRelations("SYS_C007395") Is Nothing) Then
                Return New MEDICINAXENFERMEDADRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007395")),MEDICINAXENFERMEDADRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ENFERMEDADXRAZARow
        Inherits Global.System.Data.DataRow
        
        Private tableENFERMEDADXRAZA As ENFERMEDADXRAZADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableENFERMEDADXRAZA = CType(Me.Table,ENFERMEDADXRAZADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ENF_CODIGOE() As Decimal
            Get
                Return CType(Me(Me.tableENFERMEDADXRAZA.ENF_CODIGOEColumn),Decimal)
            End Get
            Set
                Me(Me.tableENFERMEDADXRAZA.ENF_CODIGOEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RAZ_CODIGOR() As Decimal
            Get
                Return CType(Me(Me.tableENFERMEDADXRAZA.RAZ_CODIGORColumn),Decimal)
            End Get
            Set
                Me(Me.tableENFERMEDADXRAZA.RAZ_CODIGORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ENF_ENFERMEDAD() As String
            Get
                Return CType(Me(Me.tableENFERMEDADXRAZA.ENF_ENFERMEDADColumn),String)
            End Get
            Set
                Me(Me.tableENFERMEDADXRAZA.ENF_ENFERMEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RAZ_RAZA() As String
            Get
                Return CType(Me(Me.tableENFERMEDADXRAZA.RAZ_RAZAColumn),String)
            End Get
            Set
                Me(Me.tableENFERMEDADXRAZA.RAZ_RAZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ENFERMEDADESRow() As ENFERMEDADESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007392")),ENFERMEDADESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007392"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RAZASRow() As RAZASRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007393")),RAZASRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007393"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetMEDICINAXENFERMEDADRows() As MEDICINAXENFERMEDADRow()
            If (Me.Table.ChildRelations("SYS_C0073951") Is Nothing) Then
                Return New MEDICINAXENFERMEDADRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0073951")),MEDICINAXENFERMEDADRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ESPECIESRow
        Inherits Global.System.Data.DataRow
        
        Private tableESPECIES As ESPECIESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableESPECIES = CType(Me.Table,ESPECIESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ESP_CODIGOE() As Decimal
            Get
                Return CType(Me(Me.tableESPECIES.ESP_CODIGOEColumn),Decimal)
            End Get
            Set
                Me(Me.tableESPECIES.ESP_CODIGOEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ESP_ESPECIE() As String
            Get
                Return CType(Me(Me.tableESPECIES.ESP_ESPECIEColumn),String)
            End Get
            Set
                Me(Me.tableESPECIES.ESP_ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ESP_FAMILIA() As String
            Get
                Return CType(Me(Me.tableESPECIES.ESP_FAMILIAColumn),String)
            End Get
            Set
                Me(Me.tableESPECIES.ESP_FAMILIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetRAZASRows() As RAZASRow()
            If (Me.Table.ChildRelations("SYS_C007317") Is Nothing) Then
                Return New RAZASRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007317")),RAZASRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FECHARow
        Inherits Global.System.Data.DataRow
        
        Private tableFECHA As FECHADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFECHA = CType(Me.Table,FECHADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FEC_CODIGO() As Decimal
            Get
                Return CType(Me(Me.tableFECHA.FEC_CODIGOColumn),Decimal)
            End Get
            Set
                Me(Me.tableFECHA.FEC_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FEC_FECHAHORA() As Date
            Get
                Return CType(Me(Me.tableFECHA.FEC_FECHAHORAColumn),Date)
            End Get
            Set
                Me(Me.tableFECHA.FEC_FECHAHORAColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MEDICINASRow
        Inherits Global.System.Data.DataRow
        
        Private tableMEDICINAS As MEDICINASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMEDICINAS = CType(Me.Table,MEDICINASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_CODIGOME() As Decimal
            Get
                Return CType(Me(Me.tableMEDICINAS.MED_CODIGOMEColumn),Decimal)
            End Get
            Set
                Me(Me.tableMEDICINAS.MED_CODIGOMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_NOMBRE() As String
            Get
                Return CType(Me(Me.tableMEDICINAS.MED_NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableMEDICINAS.MED_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_DOSIS() As String
            Get
                Return CType(Me(Me.tableMEDICINAS.MED_DOSISColumn),String)
            End Get
            Set
                Me(Me.tableMEDICINAS.MED_DOSISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_INTERVALO() As String
            Get
                Return CType(Me(Me.tableMEDICINAS.MED_INTERVALOColumn),String)
            End Get
            Set
                Me(Me.tableMEDICINAS.MED_INTERVALOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetMEDICINAXENFERMEDADRows() As MEDICINAXENFERMEDADRow()
            If (Me.Table.ChildRelations("SYS_C007396") Is Nothing) Then
                Return New MEDICINAXENFERMEDADRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007396")),MEDICINAXENFERMEDADRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MEDICINAXENFERMEDADRow
        Inherits Global.System.Data.DataRow
        
        Private tableMEDICINAXENFERMEDAD As MEDICINAXENFERMEDADDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMEDICINAXENFERMEDAD = CType(Me.Table,MEDICINAXENFERMEDADDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_CODIGOME() As Decimal
            Get
                Return CType(Me(Me.tableMEDICINAXENFERMEDAD.MED_CODIGOMEColumn),Decimal)
            End Get
            Set
                Me(Me.tableMEDICINAXENFERMEDAD.MED_CODIGOMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ENF_CODIGOE() As Decimal
            Get
                Return CType(Me(Me.tableMEDICINAXENFERMEDAD.ENF_CODIGOEColumn),Decimal)
            End Get
            Set
                Me(Me.tableMEDICINAXENFERMEDAD.ENF_CODIGOEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_NOMBRE() As String
            Get
                Return CType(Me(Me.tableMEDICINAXENFERMEDAD.MED_NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableMEDICINAXENFERMEDAD.MED_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_DOSIS() As String
            Get
                Return CType(Me(Me.tableMEDICINAXENFERMEDAD.MED_DOSISColumn),String)
            End Get
            Set
                Me(Me.tableMEDICINAXENFERMEDAD.MED_DOSISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_INTERVALO() As String
            Get
                Return CType(Me(Me.tableMEDICINAXENFERMEDAD.MED_INTERVALOColumn),String)
            End Get
            Set
                Me(Me.tableMEDICINAXENFERMEDAD.MED_INTERVALOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ENF_ENFERMEDAD() As String
            Get
                Return CType(Me(Me.tableMEDICINAXENFERMEDAD.ENF_ENFERMEDADColumn),String)
            End Get
            Set
                Me(Me.tableMEDICINAXENFERMEDAD.ENF_ENFERMEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ENFERMEDADESRow() As ENFERMEDADESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007395")),ENFERMEDADESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007395"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MEDICINASRow() As MEDICINASRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007396")),MEDICINASRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007396"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ENFERMEDADXRAZARow() As ENFERMEDADXRAZARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0073951")),ENFERMEDADXRAZARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0073951"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MÉDICOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableMÉDICOS As MÉDICOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMÉDICOS = CType(Me.Table,MÉDICOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_CODIGOM() As Decimal
            Get
                Return CType(Me(Me.tableMÉDICOS.MED_CODIGOMColumn),Decimal)
            End Get
            Set
                Me(Me.tableMÉDICOS.MED_CODIGOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_NOMBRE1() As String
            Get
                Return CType(Me(Me.tableMÉDICOS.MED_NOMBRE1Column),String)
            End Get
            Set
                Me(Me.tableMÉDICOS.MED_NOMBRE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_NOMBRE2() As String
            Get
                Return CType(Me(Me.tableMÉDICOS.MED_NOMBRE2Column),String)
            End Get
            Set
                Me(Me.tableMÉDICOS.MED_NOMBRE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_APELLIDO1() As String
            Get
                Return CType(Me(Me.tableMÉDICOS.MED_APELLIDO1Column),String)
            End Get
            Set
                Me(Me.tableMÉDICOS.MED_APELLIDO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_APELLIDO2() As String
            Get
                Return CType(Me(Me.tableMÉDICOS.MED_APELLIDO2Column),String)
            End Get
            Set
                Me(Me.tableMÉDICOS.MED_APELLIDO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_DIRECCION() As String
            Get
                Return CType(Me(Me.tableMÉDICOS.MED_DIRECCIONColumn),String)
            End Get
            Set
                Me(Me.tableMÉDICOS.MED_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_EMERGENCIA() As String
            Get
                Return CType(Me(Me.tableMÉDICOS.MED_EMERGENCIAColumn),String)
            End Get
            Set
                Me(Me.tableMÉDICOS.MED_EMERGENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_INGRESO() As Date
            Get
                Return CType(Me(Me.tableMÉDICOS.MED_INGRESOColumn),Date)
            End Get
            Set
                Me(Me.tableMÉDICOS.MED_INGRESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetPACIENTESRows() As PACIENTESRow()
            If (Me.Table.ChildRelations("SYS_C007369") Is Nothing) Then
                Return New PACIENTESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007369")),PACIENTESRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetTEL_MÉDICORows() As TEL_MÉDICORow()
            If (Me.Table.ChildRelations("SYS_C007398") Is Nothing) Then
                Return New TEL_MÉDICORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007398")),TEL_MÉDICORow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetTURNOXMÉDICORows() As TURNOXMÉDICORow()
            If (Me.Table.ChildRelations("SYS_C007400") Is Nothing) Then
                Return New TURNOXMÉDICORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007400")),TURNOXMÉDICORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PACIENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tablePACIENTES As PACIENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePACIENTES = CType(Me.Table,PACIENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PAC_CODIGOP() As Decimal
            Get
                Return CType(Me(Me.tablePACIENTES.PAC_CODIGOPColumn),Decimal)
            End Get
            Set
                Me(Me.tablePACIENTES.PAC_CODIGOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PAC_NOMBREP() As String
            Get
                Return CType(Me(Me.tablePACIENTES.PAC_NOMBREPColumn),String)
            End Get
            Set
                Me(Me.tablePACIENTES.PAC_NOMBREPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RAZ_CODIGOR() As Decimal
            Get
                Return CType(Me(Me.tablePACIENTES.RAZ_CODIGORColumn),Decimal)
            End Get
            Set
                Me(Me.tablePACIENTES.RAZ_CODIGORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_CODIGOD() As Decimal
            Get
                Return CType(Me(Me.tablePACIENTES.DUE_CODIGODColumn),Decimal)
            End Get
            Set
                Me(Me.tablePACIENTES.DUE_CODIGODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_CODIGOM() As Decimal
            Get
                Return CType(Me(Me.tablePACIENTES.MED_CODIGOMColumn),Decimal)
            End Get
            Set
                Me(Me.tablePACIENTES.MED_CODIGOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PAC_FOTOP() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablePACIENTES.PAC_FOTOPColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PAC_FOTOP' de la tabla 'PACIENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePACIENTES.PAC_FOTOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PAC_FECHA() As Date
            Get
                Return CType(Me(Me.tablePACIENTES.PAC_FECHAColumn),Date)
            End Get
            Set
                Me(Me.tablePACIENTES.PAC_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RAZASRow() As RAZASRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007367")),RAZASRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007367"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUEÑOSRow() As DUEÑOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007368")),DUEÑOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007368"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MÉDICOSRow() As MÉDICOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007369")),MÉDICOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007369"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPAC_FOTOPNull() As Boolean
            Return Me.IsNull(Me.tablePACIENTES.PAC_FOTOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPAC_FOTOPNull()
            Me(Me.tablePACIENTES.PAC_FOTOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetCITASRows() As CITASRow()
            If (Me.Table.ChildRelations("SYS_C007383") Is Nothing) Then
                Return New CITASRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007383")),CITASRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RAZASRow
        Inherits Global.System.Data.DataRow
        
        Private tableRAZAS As RAZASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRAZAS = CType(Me.Table,RAZASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RAZ_CODIGOR() As Decimal
            Get
                Return CType(Me(Me.tableRAZAS.RAZ_CODIGORColumn),Decimal)
            End Get
            Set
                Me(Me.tableRAZAS.RAZ_CODIGORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RAZ_RAZA() As String
            Get
                Return CType(Me(Me.tableRAZAS.RAZ_RAZAColumn),String)
            End Get
            Set
                Me(Me.tableRAZAS.RAZ_RAZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ESP_CODIGOE() As Decimal
            Get
                Return CType(Me(Me.tableRAZAS.ESP_CODIGOEColumn),Decimal)
            End Get
            Set
                Me(Me.tableRAZAS.ESP_CODIGOEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ESP_ESPECIE() As String
            Get
                Return CType(Me(Me.tableRAZAS.ESP_ESPECIEColumn),String)
            End Get
            Set
                Me(Me.tableRAZAS.ESP_ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ESP_FAMILIA() As String
            Get
                Return CType(Me(Me.tableRAZAS.ESP_FAMILIAColumn),String)
            End Get
            Set
                Me(Me.tableRAZAS.ESP_FAMILIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ESPECIESRow() As ESPECIESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007317")),ESPECIESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007317"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetENFERMEDADXRAZARows() As ENFERMEDADXRAZARow()
            If (Me.Table.ChildRelations("SYS_C007393") Is Nothing) Then
                Return New ENFERMEDADXRAZARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007393")),ENFERMEDADXRAZARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetPACIENTESRows() As PACIENTESRow()
            If (Me.Table.ChildRelations("SYS_C007367") Is Nothing) Then
                Return New PACIENTESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007367")),PACIENTESRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class REPORTERow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE As REPORTEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE = CType(Me.Table,REPORTEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property REP_SECUENCIA() As Decimal
            Get
                Return CType(Me(Me.tableREPORTE.REP_SECUENCIAColumn),Decimal)
            End Get
            Set
                Me(Me.tableREPORTE.REP_SECUENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property REP_MESH() As String
            Get
                Return CType(Me(Me.tableREPORTE.REP_MESHColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE.REP_MESHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property REP_FECHAH() As Date
            Get
                Return CType(Me(Me.tableREPORTE.REP_FECHAHColumn),Date)
            End Get
            Set
                Me(Me.tableREPORTE.REP_FECHAHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_CODIGOD() As Decimal
            Get
                Return CType(Me(Me.tableREPORTE.DUE_CODIGODColumn),Decimal)
            End Get
            Set
                Me(Me.tableREPORTE.DUE_CODIGODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PAC_CODIGOP() As Decimal
            Get
                Return CType(Me(Me.tableREPORTE.PAC_CODIGOPColumn),Decimal)
            End Get
            Set
                Me(Me.tableREPORTE.PAC_CODIGOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ESP_CODIGOE() As Decimal
            Get
                Return CType(Me(Me.tableREPORTE.ESP_CODIGOEColumn),Decimal)
            End Get
            Set
                Me(Me.tableREPORTE.ESP_CODIGOEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CIT_CODIGOC() As Decimal
            Get
                Return CType(Me(Me.tableREPORTE.CIT_CODIGOCColumn),Decimal)
            End Get
            Set
                Me(Me.tableREPORTE.CIT_CODIGOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_CODIGOM() As Decimal
            Get
                Return CType(Me(Me.tableREPORTE.MED_CODIGOMColumn),Decimal)
            End Get
            Set
                Me(Me.tableREPORTE.MED_CODIGOMColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TEL_DUEÑORow
        Inherits Global.System.Data.DataRow
        
        Private tableTEL_DUEÑO As TEL_DUEÑODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTEL_DUEÑO = CType(Me.Table,TEL_DUEÑODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUE_CODIGOD() As Decimal
            Get
                Return CType(Me(Me.tableTEL_DUEÑO.DUE_CODIGODColumn),Decimal)
            End Get
            Set
                Me(Me.tableTEL_DUEÑO.DUE_CODIGODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TEDU_TEL() As String
            Get
                Return CType(Me(Me.tableTEL_DUEÑO.TEDU_TELColumn),String)
            End Get
            Set
                Me(Me.tableTEL_DUEÑO.TEDU_TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DUEÑOSRow() As DUEÑOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007403")),DUEÑOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007403"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TEL_MÉDICORow
        Inherits Global.System.Data.DataRow
        
        Private tableTEL_MÉDICO As TEL_MÉDICODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTEL_MÉDICO = CType(Me.Table,TEL_MÉDICODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_CODIGOM() As Decimal
            Get
                Return CType(Me(Me.tableTEL_MÉDICO.MED_CODIGOMColumn),Decimal)
            End Get
            Set
                Me(Me.tableTEL_MÉDICO.MED_CODIGOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TEME_TEL() As String
            Get
                Return CType(Me(Me.tableTEL_MÉDICO.TEME_TELColumn),String)
            End Get
            Set
                Me(Me.tableTEL_MÉDICO.TEME_TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MÉDICOSRow() As MÉDICOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007398")),MÉDICOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007398"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TURNOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTURNOS As TURNOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTURNOS = CType(Me.Table,TURNOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TUR_CODIGOT() As Decimal
            Get
                Return CType(Me(Me.tableTURNOS.TUR_CODIGOTColumn),Decimal)
            End Get
            Set
                Me(Me.tableTURNOS.TUR_CODIGOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TUR_HORAI() As Date
            Get
                Return CType(Me(Me.tableTURNOS.TUR_HORAIColumn),Date)
            End Get
            Set
                Me(Me.tableTURNOS.TUR_HORAIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TUR_HORAF() As Date
            Get
                Return CType(Me(Me.tableTURNOS.TUR_HORAFColumn),Date)
            End Get
            Set
                Me(Me.tableTURNOS.TUR_HORAFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TUR_TIPO() As String
            Get
                Return CType(Me(Me.tableTURNOS.TUR_TIPOColumn),String)
            End Get
            Set
                Me(Me.tableTURNOS.TUR_TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetTURNOXMÉDICORows() As TURNOXMÉDICORow()
            If (Me.Table.ChildRelations("SYS_C007401") Is Nothing) Then
                Return New TURNOXMÉDICORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C007401")),TURNOXMÉDICORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TURNOXMÉDICORow
        Inherits Global.System.Data.DataRow
        
        Private tableTURNOXMÉDICO As TURNOXMÉDICODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTURNOXMÉDICO = CType(Me.Table,TURNOXMÉDICODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MED_CODIGOM() As Decimal
            Get
                Return CType(Me(Me.tableTURNOXMÉDICO.MED_CODIGOMColumn),Decimal)
            End Get
            Set
                Me(Me.tableTURNOXMÉDICO.MED_CODIGOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TUME_FECHA() As Date
            Get
                Return CType(Me(Me.tableTURNOXMÉDICO.TUME_FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableTURNOXMÉDICO.TUME_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TUR_CODIGOT() As Decimal
            Get
                Return CType(Me(Me.tableTURNOXMÉDICO.TUR_CODIGOTColumn),Decimal)
            End Get
            Set
                Me(Me.tableTURNOXMÉDICO.TUR_CODIGOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MÉDICOSRow() As MÉDICOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007400")),MÉDICOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007400"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TURNOSRow() As TURNOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C007401")),TURNOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C007401"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class USUARIOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableUSUARIOS As USUARIOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUSUARIOS = CType(Me.Table,USUARIOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USU_USUARIO() As String
            Get
                Return CType(Me(Me.tableUSUARIOS.USU_USUARIOColumn),String)
            End Get
            Set
                Me(Me.tableUSUARIOS.USU_USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USU_NOMBRE1() As String
            Get
                Return CType(Me(Me.tableUSUARIOS.USU_NOMBRE1Column),String)
            End Get
            Set
                Me(Me.tableUSUARIOS.USU_NOMBRE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USU_NOMBRE2() As String
            Get
                Return CType(Me(Me.tableUSUARIOS.USU_NOMBRE2Column),String)
            End Get
            Set
                Me(Me.tableUSUARIOS.USU_NOMBRE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USU_APELLIDO1() As String
            Get
                Return CType(Me(Me.tableUSUARIOS.USU_APELLIDO1Column),String)
            End Get
            Set
                Me(Me.tableUSUARIOS.USU_APELLIDO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USU_APELLIDO2() As String
            Get
                Return CType(Me(Me.tableUSUARIOS.USU_APELLIDO2Column),String)
            End Get
            Set
                Me(Me.tableUSUARIOS.USU_APELLIDO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USU_TEL() As String
            Get
                Return CType(Me(Me.tableUSUARIOS.USU_TELColumn),String)
            End Get
            Set
                Me(Me.tableUSUARIOS.USU_TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USU_DIRECCION() As String
            Get
                Return CType(Me(Me.tableUSUARIOS.USU_DIRECCIONColumn),String)
            End Get
            Set
                Me(Me.tableUSUARIOS.USU_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USU_CONTRASEÑA() As String
            Get
                Return CType(Me(Me.tableUSUARIOS.USU_CONTRASEÑAColumn),String)
            End Get
            Set
                Me(Me.tableUSUARIOS.USU_CONTRASEÑAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USU_TIPO() As String
            Get
                Return CType(Me(Me.tableUSUARIOS.USU_TIPOColumn),String)
            End Get
            Set
                Me(Me.tableUSUARIOS.USU_TIPOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class S_DUEÑORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_DUEÑORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As S_DUEÑORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As S_DUEÑORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class S_MÉDICORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_MÉDICORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As S_MÉDICORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As S_MÉDICORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class S_REPORTERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_REPORTERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As S_REPORTERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As S_REPORTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AUDITORIASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AUDITORIASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AUDITORIASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AUDITORIASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class CIRUGIASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CIRUGIASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As CIRUGIASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As CIRUGIASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class CITASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CITASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As CITASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As CITASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class DUEÑOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DUEÑOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As DUEÑOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As DUEÑOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ENFERMEDADESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ENFERMEDADESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ENFERMEDADESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ENFERMEDADESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ENFERMEDADXRAZARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ENFERMEDADXRAZARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ENFERMEDADXRAZARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ENFERMEDADXRAZARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ESPECIESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ESPECIESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ESPECIESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ESPECIESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class FECHARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FECHARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As FECHARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As FECHARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class MEDICINASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MEDICINASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As MEDICINASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As MEDICINASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class MEDICINAXENFERMEDADRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MEDICINAXENFERMEDADRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As MEDICINAXENFERMEDADRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As MEDICINAXENFERMEDADRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class MÉDICOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MÉDICOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As MÉDICOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As MÉDICOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class PACIENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PACIENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As PACIENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As PACIENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class RAZASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RAZASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As RAZASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As RAZASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class REPORTERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As REPORTERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As REPORTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class TEL_DUEÑORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TEL_DUEÑORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As TEL_DUEÑORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As TEL_DUEÑORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class TEL_MÉDICORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TEL_MÉDICORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As TEL_MÉDICORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As TEL_MÉDICORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class TURNOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TURNOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As TURNOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As TURNOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class TURNOXMÉDICORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TURNOXMÉDICORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As TURNOXMÉDICORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As TURNOXMÉDICORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class USUARIOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As USUARIOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As USUARIOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As USUARIOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace databasesTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_DUEÑOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_DUEÑO"
            tableMapping.ColumnMappings.Add("DUE_CODIGOD", "DUE_CODIGOD")
            tableMapping.ColumnMappings.Add("DUE_NOMBRE1", "DUE_NOMBRE1")
            tableMapping.ColumnMappings.Add("DUE_NOMBRE2", "DUE_NOMBRE2")
            tableMapping.ColumnMappings.Add("DUE_APELLIDO1", "DUE_APELLIDO1")
            tableMapping.ColumnMappings.Add("DUE_APELLIDO2", "DUE_APELLIDO2")
            tableMapping.ColumnMappings.Add("DUE_IDENTIFICACION", "DUE_IDENTIFICACION")
            tableMapping.ColumnMappings.Add("DUE_DIRECCION", "DUE_DIRECCION")
            tableMapping.ColumnMappings.Add("TELEFONOSM", "TELEFONOSM")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DUE_CODIGOD, DUE_NOMBRE1, DUE_NOMBRE2, DUE_APELLIDO1, DUE_APELLIDO2, DUE_I"& _ 
                "DENTIFICACION, DUE_DIRECCION, TELEFONOSM FROM ELIO.S_DUEÑO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.S_DUEÑODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.S_DUEÑODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.S_DUEÑODataTable = New databases.S_DUEÑODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_MÉDICOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_MÉDICO"
            tableMapping.ColumnMappings.Add("MED_CODIGOM", "MED_CODIGOM")
            tableMapping.ColumnMappings.Add("MED_NOMBRE1", "MED_NOMBRE1")
            tableMapping.ColumnMappings.Add("MED_NOMBRE2", "MED_NOMBRE2")
            tableMapping.ColumnMappings.Add("MED_APELLIDO1", "MED_APELLIDO1")
            tableMapping.ColumnMappings.Add("MED_APELLIDO2", "MED_APELLIDO2")
            tableMapping.ColumnMappings.Add("MED_DIRECCION", "MED_DIRECCION")
            tableMapping.ColumnMappings.Add("MED_EMERGENCIA", "MED_EMERGENCIA")
            tableMapping.ColumnMappings.Add("MED_INGRESO", "MED_INGRESO")
            tableMapping.ColumnMappings.Add("TELEFONOSM", "TELEFONOSM")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(5) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MED_CODIGOM, MED_NOMBRE1, MED_NOMBRE2, MED_APELLIDO1, MED_APELLIDO2, MED_D"& _ 
                "IRECCION, MED_EMERGENCIA, MED_INGRESO, TELEFONOSM FROM ELIO.S_MÉDICO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "ELIO.U_MÉDICO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "EMERGENCIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "INGRESO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "ELIO.U_TEL_MÉDICO"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TELN"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "ELIO.D_MÉDICO"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "ELIO.I_MÉDICO"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "EMERGENCIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "INGRESO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            Me._commandCollection(5) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "ELIO.I_TEL_MÉDICO"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(5).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.S_MÉDICODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.S_MÉDICODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.S_MÉDICODataTable = New databases.S_MÉDICODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Actualizar_MÉDICO(ByVal CODIGOM As Global.System.Nullable(Of Decimal), ByVal NOMBRE1 As String, ByVal NOMBRE2 As String, ByVal APELLIDO1 As String, ByVal APELLIDO2 As String, ByVal DIRECCION As String, ByVal EMERGENCIA As String, ByVal INGRESO As Global.System.Nullable(Of Date)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(1)
            If (CODIGOM.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (NOMBRE1 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE1,String)
            End If
            If (NOMBRE2 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(NOMBRE2,String)
            End If
            If (APELLIDO1 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(APELLIDO1,String)
            End If
            If (APELLIDO2 Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(APELLIDO2,String)
            End If
            If (DIRECCION Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(DIRECCION,String)
            End If
            If (EMERGENCIA Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(EMERGENCIA,String)
            End If
            If (INGRESO.HasValue = true) Then
                command.Parameters(7).Value = CType(INGRESO.Value,Date)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Actualizar_TEL_MÉDICO(ByVal CODIGOM As Global.System.Nullable(Of Decimal), ByVal TEL As String, ByVal TELN As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(2)
            If (CODIGOM.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (TEL Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(TEL,String)
            End If
            If (TELN Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(TELN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Eliminar_MÉDICO(ByVal CODIGOM As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(3)
            If (CODIGOM.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Insertar_MÉDICO(ByVal NOMBRE1 As String, ByVal NOMBRE2 As String, ByVal APELLIDO1 As String, ByVal APELLIDO2 As String, ByVal DIRECCION As String, ByVal EMERGENCIA As String, ByVal INGRESO As Global.System.Nullable(Of Date)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(4)
            If (NOMBRE1 Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(NOMBRE1,String)
            End If
            If (NOMBRE2 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE2,String)
            End If
            If (APELLIDO1 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(APELLIDO1,String)
            End If
            If (APELLIDO2 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(APELLIDO2,String)
            End If
            If (DIRECCION Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(DIRECCION,String)
            End If
            If (EMERGENCIA Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(EMERGENCIA,String)
            End If
            If (INGRESO.HasValue = true) Then
                command.Parameters(6).Value = CType(INGRESO.Value,Date)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Insertar_TEL_MÉDICO(ByVal TEL As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(5)
            If (TEL Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(TEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_REPORTETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_REPORTE"
            tableMapping.ColumnMappings.Add("REP_SECUENCIA", "REP_SECUENCIA")
            tableMapping.ColumnMappings.Add("REP_MESH", "REP_MESH")
            tableMapping.ColumnMappings.Add("REP_FECHAH", "REP_FECHAH")
            tableMapping.ColumnMappings.Add("DUE_CODIGOD", "DUE_CODIGOD")
            tableMapping.ColumnMappings.Add("NOMBRED", "NOMBRED")
            tableMapping.ColumnMappings.Add("TELEFONOSD", "TELEFONOSD")
            tableMapping.ColumnMappings.Add("PAC_CODIGOP", "PAC_CODIGOP")
            tableMapping.ColumnMappings.Add("PAC_NOMBREP", "PAC_NOMBREP")
            tableMapping.ColumnMappings.Add("ESP_CODIGOE", "ESP_CODIGOE")
            tableMapping.ColumnMappings.Add("ESP_ESPECIE", "ESP_ESPECIE")
            tableMapping.ColumnMappings.Add("CIT_CODIGOC", "CIT_CODIGOC")
            tableMapping.ColumnMappings.Add("CIT_CALENDARIZADO", "CIT_CALENDARIZADO")
            tableMapping.ColumnMappings.Add("MED_CODIGOM", "MED_CODIGOM")
            tableMapping.ColumnMappings.Add("NOMBREM", "NOMBREM")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT REP_SECUENCIA, REP_MESH, REP_FECHAH, DUE_CODIGOD, NOMBRED, TELEFONOSD, PAC"& _ 
                "_CODIGOP, PAC_NOMBREP, ESP_CODIGOE, ESP_ESPECIE, CIT_CODIGOC, CIT_CALENDARIZADO,"& _ 
                " MED_CODIGOM, NOMBREM FROM ELIO.S_REPORTE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.S_REPORTEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.S_REPORTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.S_REPORTEDataTable = New databases.S_REPORTEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AUDITORIASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AUDITORIAS"
            tableMapping.ColumnMappings.Add("USU_USUARIO", "USU_USUARIO")
            tableMapping.ColumnMappings.Add("AUD_PROCESO", "AUD_PROCESO")
            tableMapping.ColumnMappings.Add("AUD_FECHAHORA", "AUD_FECHAHORA")
            tableMapping.ColumnMappings.Add("AUD_TABLA", "AUD_TABLA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""AUDITORIAS"" WHERE ((""USU_USUARIO"" = :Original_USU_USUARIO) AN"& _ 
                "D (""AUD_PROCESO"" = :Original_AUD_PROCESO) AND (""AUD_FECHAHORA"" = :Original_AUD_F"& _ 
                "ECHAHORA) AND (""AUD_TABLA"" = :Original_AUD_TABLA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_AUD_PROCESO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "AUD_PROCESO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_AUD_FECHAHORA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "AUD_FECHAHORA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_AUD_TABLA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "AUD_TABLA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""AUDITORIAS"" (""USU_USUARIO"", ""AUD_PROCESO"", ""AUD_FECHAHORA"", """& _ 
                "AUD_TABLA"") VALUES (:USU_USUARIO, :AUD_PROCESO, :AUD_FECHAHORA, :AUD_TABLA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_USUARIO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "AUD_PROCESO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "AUD_PROCESO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "AUD_FECHAHORA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "AUD_FECHAHORA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "AUD_TABLA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "AUD_TABLA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""AUDITORIAS"" SET ""USU_USUARIO"" = :USU_USUARIO, ""AUD_PROCESO"" = :AUD"& _ 
                "_PROCESO, ""AUD_FECHAHORA"" = :AUD_FECHAHORA, ""AUD_TABLA"" = :AUD_TABLA WHERE ((""US"& _ 
                "U_USUARIO"" = :Original_USU_USUARIO) AND (""AUD_PROCESO"" = :Original_AUD_PROCESO) "& _ 
                "AND (""AUD_FECHAHORA"" = :Original_AUD_FECHAHORA) AND (""AUD_TABLA"" = :Original_AUD"& _ 
                "_TABLA))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_USUARIO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "AUD_PROCESO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "AUD_PROCESO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "AUD_FECHAHORA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "AUD_FECHAHORA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "AUD_TABLA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "AUD_TABLA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_AUD_PROCESO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "AUD_PROCESO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_AUD_FECHAHORA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "AUD_FECHAHORA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_AUD_TABLA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "AUD_TABLA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT USU_USUARIO, AUD_PROCESO, AUD_FECHAHORA, AUD_TABLA FROM ELIO.AUDITORIAS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.AUDITORIASDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.AUDITORIASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.AUDITORIASDataTable = New databases.AUDITORIASDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.AUDITORIASDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "AUDITORIAS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_USU_USUARIO As String, ByVal Original_AUD_PROCESO As String, ByVal Original_AUD_FECHAHORA As Date, ByVal Original_AUD_TABLA As String) As Integer
            If (Original_USU_USUARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_USUARIO")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_USU_USUARIO,String)
            End If
            If (Original_AUD_PROCESO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AUD_PROCESO")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_AUD_PROCESO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_AUD_FECHAHORA,Date)
            If (Original_AUD_TABLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AUD_TABLA")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_AUD_TABLA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal USU_USUARIO As String, ByVal AUD_PROCESO As String, ByVal AUD_FECHAHORA As Date, ByVal AUD_TABLA As String) As Integer
            If (USU_USUARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_USUARIO")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(USU_USUARIO,String)
            End If
            If (AUD_PROCESO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AUD_PROCESO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AUD_PROCESO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(AUD_FECHAHORA,Date)
            If (AUD_TABLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AUD_TABLA")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AUD_TABLA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal USU_USUARIO As String, ByVal AUD_PROCESO As String, ByVal AUD_FECHAHORA As Date, ByVal AUD_TABLA As String, ByVal Original_USU_USUARIO As String, ByVal Original_AUD_PROCESO As String, ByVal Original_AUD_FECHAHORA As Date, ByVal Original_AUD_TABLA As String) As Integer
            If (USU_USUARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_USUARIO")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(USU_USUARIO,String)
            End If
            If (AUD_PROCESO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AUD_PROCESO")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(AUD_PROCESO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(AUD_FECHAHORA,Date)
            If (AUD_TABLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AUD_TABLA")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AUD_TABLA,String)
            End If
            If (Original_USU_USUARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_USUARIO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_USU_USUARIO,String)
            End If
            If (Original_AUD_PROCESO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AUD_PROCESO")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_AUD_PROCESO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_AUD_FECHAHORA,Date)
            If (Original_AUD_TABLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AUD_TABLA")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_AUD_TABLA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal AUD_PROCESO As String, ByVal AUD_TABLA As String, ByVal Original_USU_USUARIO As String, ByVal Original_AUD_PROCESO As String, ByVal Original_AUD_FECHAHORA As Date, ByVal Original_AUD_TABLA As String) As Integer
            Return Me.Update(Original_USU_USUARIO, AUD_PROCESO, Original_AUD_FECHAHORA, AUD_TABLA, Original_USU_USUARIO, Original_AUD_PROCESO, Original_AUD_FECHAHORA, Original_AUD_TABLA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CIRUGIASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CIRUGIAS"
            tableMapping.ColumnMappings.Add("CIR_CODIGOC", "CIR_CODIGOC")
            tableMapping.ColumnMappings.Add("CIR_DURACION", "CIR_DURACION")
            tableMapping.ColumnMappings.Add("CIR_DESCRIPCION", "CIR_DESCRIPCION")
            tableMapping.ColumnMappings.Add("CIR_RIESGO", "CIR_RIESGO")
            tableMapping.ColumnMappings.Add("CIR_NOMBRE", "CIR_NOMBRE")
            tableMapping.ColumnMappings.Add("CIR_ANESTESÍA", "CIR_ANESTESÍA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""CIRUGIAS"" WHERE ((""CIR_CODIGOC"" = :Original_CIR_CODIGOC) AND "& _ 
                "(""CIR_DURACION"" = :Original_CIR_DURACION) AND (""CIR_DESCRIPCION"" = :Original_CIR"& _ 
                "_DESCRIPCION) AND (""CIR_RIESGO"" = :Original_CIR_RIESGO) AND (""CIR_NOMBRE"" = :Ori"& _ 
                "ginal_CIR_NOMBRE) AND (""CIR_ANESTESÍA"" = :Original_CIR_ANESTESÍA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIR_CODIGOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_DURACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "CIR_DURACION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "CIR_DESCRIPCION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_RIESGO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 5
            param.IsNullable = true
            param.SourceColumn = "CIR_RIESGO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "CIR_NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_ANESTESÍA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CIR_ANESTESÍA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""CIRUGIAS"" (""CIR_CODIGOC"", ""CIR_DURACION"", ""CIR_DESCRIPCION"", "& _ 
                """CIR_RIESGO"", ""CIR_NOMBRE"", ""CIR_ANESTESÍA"") VALUES (:CIR_CODIGOC, :CIR_DURACION"& _ 
                ", :CIR_DESCRIPCION, :CIR_RIESGO, :CIR_NOMBRE, :CIR_ANESTESÍA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIR_CODIGOC"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_DURACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "CIR_DURACION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "CIR_DESCRIPCION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_RIESGO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 5
            param.IsNullable = true
            param.SourceColumn = "CIR_RIESGO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "CIR_NOMBRE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_ANESTESÍA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CIR_ANESTESÍA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""CIRUGIAS"" SET ""CIR_CODIGOC"" = :CIR_CODIGOC, ""CIR_DURACION"" = :CIR_"& _ 
                "DURACION, ""CIR_DESCRIPCION"" = :CIR_DESCRIPCION, ""CIR_RIESGO"" = :CIR_RIESGO, ""CIR"& _ 
                "_NOMBRE"" = :CIR_NOMBRE, ""CIR_ANESTESÍA"" = :CIR_ANESTESÍA WHERE ((""CIR_CODIGOC"" ="& _ 
                " :Original_CIR_CODIGOC) AND (""CIR_DURACION"" = :Original_CIR_DURACION) AND (""CIR_"& _ 
                "DESCRIPCION"" = :Original_CIR_DESCRIPCION) AND (""CIR_RIESGO"" = :Original_CIR_RIES"& _ 
                "GO) AND (""CIR_NOMBRE"" = :Original_CIR_NOMBRE) AND (""CIR_ANESTESÍA"" = :Original_C"& _ 
                "IR_ANESTESÍA))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIR_CODIGOC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_DURACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "CIR_DURACION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "CIR_DESCRIPCION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_RIESGO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 5
            param.IsNullable = true
            param.SourceColumn = "CIR_RIESGO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "CIR_NOMBRE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_ANESTESÍA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CIR_ANESTESÍA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIR_CODIGOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_DURACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "CIR_DURACION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "CIR_DESCRIPCION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_RIESGO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 5
            param.IsNullable = true
            param.SourceColumn = "CIR_RIESGO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "CIR_NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_ANESTESÍA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CIR_ANESTESÍA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CIR_CODIGOC, CIR_DURACION, CIR_DESCRIPCION, CIR_RIESGO, CIR_NOMBRE, CIR_AN"& _ 
                "ESTESÍA FROM ELIO.CIRUGIAS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.CIRUGIASDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.CIRUGIASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.CIRUGIASDataTable = New databases.CIRUGIASDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.CIRUGIASDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "CIRUGIAS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CIR_CODIGOC As Decimal, ByVal Original_CIR_DURACION As String, ByVal Original_CIR_DESCRIPCION As String, ByVal Original_CIR_RIESGO As String, ByVal Original_CIR_NOMBRE As String, ByVal Original_CIR_ANESTESÍA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CIR_CODIGOC,Decimal)
            If (Original_CIR_DURACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIR_DURACION")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CIR_DURACION,String)
            End If
            If (Original_CIR_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIR_DESCRIPCION")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CIR_DESCRIPCION,String)
            End If
            If (Original_CIR_RIESGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIR_RIESGO")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CIR_RIESGO,String)
            End If
            If (Original_CIR_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIR_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CIR_NOMBRE,String)
            End If
            If (Original_CIR_ANESTESÍA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIR_ANESTESÍA")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CIR_ANESTESÍA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CIR_CODIGOC As Decimal, ByVal CIR_DURACION As String, ByVal CIR_DESCRIPCION As String, ByVal CIR_RIESGO As String, ByVal CIR_NOMBRE As String, ByVal CIR_ANESTESÍA As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CIR_CODIGOC,Decimal)
            If (CIR_DURACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIR_DURACION")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CIR_DURACION,String)
            End If
            If (CIR_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIR_DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CIR_DESCRIPCION,String)
            End If
            If (CIR_RIESGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIR_RIESGO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CIR_RIESGO,String)
            End If
            If (CIR_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIR_NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CIR_NOMBRE,String)
            End If
            If (CIR_ANESTESÍA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIR_ANESTESÍA")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CIR_ANESTESÍA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CIR_CODIGOC As Decimal, ByVal CIR_DURACION As String, ByVal CIR_DESCRIPCION As String, ByVal CIR_RIESGO As String, ByVal CIR_NOMBRE As String, ByVal CIR_ANESTESÍA As String, ByVal Original_CIR_CODIGOC As Decimal, ByVal Original_CIR_DURACION As String, ByVal Original_CIR_DESCRIPCION As String, ByVal Original_CIR_RIESGO As String, ByVal Original_CIR_NOMBRE As String, ByVal Original_CIR_ANESTESÍA As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CIR_CODIGOC,Decimal)
            If (CIR_DURACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIR_DURACION")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CIR_DURACION,String)
            End If
            If (CIR_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIR_DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CIR_DESCRIPCION,String)
            End If
            If (CIR_RIESGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIR_RIESGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CIR_RIESGO,String)
            End If
            If (CIR_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIR_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CIR_NOMBRE,String)
            End If
            If (CIR_ANESTESÍA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIR_ANESTESÍA")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CIR_ANESTESÍA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CIR_CODIGOC,Decimal)
            If (Original_CIR_DURACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIR_DURACION")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CIR_DURACION,String)
            End If
            If (Original_CIR_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIR_DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CIR_DESCRIPCION,String)
            End If
            If (Original_CIR_RIESGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIR_RIESGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CIR_RIESGO,String)
            End If
            If (Original_CIR_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIR_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CIR_NOMBRE,String)
            End If
            If (Original_CIR_ANESTESÍA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIR_ANESTESÍA")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CIR_ANESTESÍA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CIR_DURACION As String, ByVal CIR_DESCRIPCION As String, ByVal CIR_RIESGO As String, ByVal CIR_NOMBRE As String, ByVal CIR_ANESTESÍA As String, ByVal Original_CIR_CODIGOC As Decimal, ByVal Original_CIR_DURACION As String, ByVal Original_CIR_DESCRIPCION As String, ByVal Original_CIR_RIESGO As String, ByVal Original_CIR_NOMBRE As String, ByVal Original_CIR_ANESTESÍA As String) As Integer
            Return Me.Update(Original_CIR_CODIGOC, CIR_DURACION, CIR_DESCRIPCION, CIR_RIESGO, CIR_NOMBRE, CIR_ANESTESÍA, Original_CIR_CODIGOC, Original_CIR_DURACION, Original_CIR_DESCRIPCION, Original_CIR_RIESGO, Original_CIR_NOMBRE, Original_CIR_ANESTESÍA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CITASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CITAS"
            tableMapping.ColumnMappings.Add("CIT_CODIGOC", "CIT_CODIGOC")
            tableMapping.ColumnMappings.Add("CIT_CALENDARIZADO", "CIT_CALENDARIZADO")
            tableMapping.ColumnMappings.Add("PAC_CODIGOP", "PAC_CODIGOP")
            tableMapping.ColumnMappings.Add("CIR_CODIGOC", "CIR_CODIGOC")
            tableMapping.ColumnMappings.Add("CIT_HECHA", "CIT_HECHA")
            tableMapping.ColumnMappings.Add("CIT_DESCRIPCION", "CIT_DESCRIPCION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""CITAS"" WHERE ((""CIT_CODIGOC"" = :Original_CIT_CODIGOC) AND ((:"& _ 
                "IsNull_CIT_CALENDARIZADO = 1 AND ""CIT_CALENDARIZADO"" IS NULL) OR (""CIT_CALENDARI"& _ 
                "ZADO"" = :Original_CIT_CALENDARIZADO)) AND ((:IsNull_PAC_CODIGOP = 1 AND ""PAC_COD"& _ 
                "IGOP"" IS NULL) OR (""PAC_CODIGOP"" = :Original_PAC_CODIGOP)) AND ((:IsNull_CIR_COD"& _ 
                "IGOC = 1 AND ""CIR_CODIGOC"" IS NULL) OR (""CIR_CODIGOC"" = :Original_CIR_CODIGOC)) "& _ 
                "AND (""CIT_HECHA"" = :Original_CIT_HECHA) AND (""CIT_DESCRIPCION"" = :Original_CIT_D"& _ 
                "ESCRIPCION))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIT_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIT_CODIGOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_CIT_CALENDARIZADO"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CIT_CALENDARIZADO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIT_CALENDARIZADO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CIT_CALENDARIZADO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_CIR_CODIGOC"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIR_CODIGOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIR_CODIGOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIT_HECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CIT_HECHA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIT_DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "CIT_DESCRIPCION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""CITAS"" (""CIT_CODIGOC"", ""CIT_CALENDARIZADO"", ""PAC_CODIGOP"", ""C"& _ 
                "IR_CODIGOC"", ""CIT_HECHA"", ""CIT_DESCRIPCION"") VALUES (:CIT_CODIGOC, :CIT_CALENDAR"& _ 
                "IZADO, :PAC_CODIGOP, :CIR_CODIGOC, :CIT_HECHA, :CIT_DESCRIPCION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIT_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIT_CODIGOC"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIT_CALENDARIZADO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CIT_CALENDARIZADO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIR_CODIGOC"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIT_HECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CIT_HECHA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIT_DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "CIT_DESCRIPCION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""CITAS"" SET ""CIT_CODIGOC"" = :CIT_CODIGOC, ""CIT_CALENDARIZADO"" = :CI"& _ 
                "T_CALENDARIZADO, ""PAC_CODIGOP"" = :PAC_CODIGOP, ""CIR_CODIGOC"" = :CIR_CODIGOC, ""CI"& _ 
                "T_HECHA"" = :CIT_HECHA, ""CIT_DESCRIPCION"" = :CIT_DESCRIPCION WHERE ((""CIT_CODIGOC"& _ 
                """ = :Original_CIT_CODIGOC) AND ((:IsNull_CIT_CALENDARIZADO = 1 AND ""CIT_CALENDAR"& _ 
                "IZADO"" IS NULL) OR (""CIT_CALENDARIZADO"" = :Original_CIT_CALENDARIZADO)) AND ((:I"& _ 
                "sNull_PAC_CODIGOP = 1 AND ""PAC_CODIGOP"" IS NULL) OR (""PAC_CODIGOP"" = :Original_P"& _ 
                "AC_CODIGOP)) AND ((:IsNull_CIR_CODIGOC = 1 AND ""CIR_CODIGOC"" IS NULL) OR (""CIR_C"& _ 
                "ODIGOC"" = :Original_CIR_CODIGOC)) AND (""CIT_HECHA"" = :Original_CIT_HECHA) AND ("""& _ 
                "CIT_DESCRIPCION"" = :Original_CIT_DESCRIPCION))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIT_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIT_CODIGOC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIT_CALENDARIZADO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CIT_CALENDARIZADO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIR_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIR_CODIGOC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIT_HECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CIT_HECHA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIT_DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "CIT_DESCRIPCION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIT_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIT_CODIGOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_CIT_CALENDARIZADO"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CIT_CALENDARIZADO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIT_CALENDARIZADO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CIT_CALENDARIZADO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_CIR_CODIGOC"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIR_CODIGOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIR_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIR_CODIGOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIT_HECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CIT_HECHA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIT_DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "CIT_DESCRIPCION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CIT_CODIGOC, CIT_CALENDARIZADO, PAC_CODIGOP, CIR_CODIGOC, CIT_HECHA, CIT_D"& _ 
                "ESCRIPCION FROM ELIO.CITAS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.CITASDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.CITASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.CITASDataTable = New databases.CITASDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.CITASDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "CITAS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CIT_CODIGOC As Decimal, ByVal Original_CIT_CALENDARIZADO As Global.System.Nullable(Of Date), ByVal Original_PAC_CODIGOP As Global.System.Nullable(Of Decimal), ByVal Original_CIR_CODIGOC As Global.System.Nullable(Of Decimal), ByVal Original_CIT_HECHA As Date, ByVal Original_CIT_DESCRIPCION As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CIT_CODIGOC,Decimal)
            If (Original_CIT_CALENDARIZADO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CIT_CALENDARIZADO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PAC_CODIGOP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PAC_CODIGOP.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_CIR_CODIGOC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CIR_CODIGOC.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CIT_HECHA,Date)
            If (Original_CIT_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIT_DESCRIPCION")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CIT_DESCRIPCION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CIT_CODIGOC As Decimal, ByVal CIT_CALENDARIZADO As Global.System.Nullable(Of Date), ByVal PAC_CODIGOP As Global.System.Nullable(Of Decimal), ByVal CIR_CODIGOC As Global.System.Nullable(Of Decimal), ByVal CIT_HECHA As Date, ByVal CIT_DESCRIPCION As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CIT_CODIGOC,Decimal)
            If (CIT_CALENDARIZADO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CIT_CALENDARIZADO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PAC_CODIGOP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PAC_CODIGOP.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (CIR_CODIGOC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CIR_CODIGOC.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CIT_HECHA,Date)
            If (CIT_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIT_DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CIT_DESCRIPCION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CIT_CODIGOC As Decimal, ByVal CIT_CALENDARIZADO As Global.System.Nullable(Of Date), ByVal PAC_CODIGOP As Global.System.Nullable(Of Decimal), ByVal CIR_CODIGOC As Global.System.Nullable(Of Decimal), ByVal CIT_HECHA As Date, ByVal CIT_DESCRIPCION As String, ByVal Original_CIT_CODIGOC As Decimal, ByVal Original_CIT_CALENDARIZADO As Global.System.Nullable(Of Date), ByVal Original_PAC_CODIGOP As Global.System.Nullable(Of Decimal), ByVal Original_CIR_CODIGOC As Global.System.Nullable(Of Decimal), ByVal Original_CIT_HECHA As Date, ByVal Original_CIT_DESCRIPCION As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CIT_CODIGOC,Decimal)
            If (CIT_CALENDARIZADO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CIT_CALENDARIZADO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PAC_CODIGOP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PAC_CODIGOP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (CIR_CODIGOC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CIR_CODIGOC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CIT_HECHA,Date)
            If (CIT_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIT_DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CIT_DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CIT_CODIGOC,Decimal)
            If (Original_CIT_CALENDARIZADO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CIT_CALENDARIZADO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_PAC_CODIGOP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PAC_CODIGOP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_CIR_CODIGOC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CIR_CODIGOC.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CIT_HECHA,Date)
            If (Original_CIT_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CIT_DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CIT_DESCRIPCION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CIT_CALENDARIZADO As Global.System.Nullable(Of Date), ByVal PAC_CODIGOP As Global.System.Nullable(Of Decimal), ByVal CIR_CODIGOC As Global.System.Nullable(Of Decimal), ByVal CIT_HECHA As Date, ByVal CIT_DESCRIPCION As String, ByVal Original_CIT_CODIGOC As Decimal, ByVal Original_CIT_CALENDARIZADO As Global.System.Nullable(Of Date), ByVal Original_PAC_CODIGOP As Global.System.Nullable(Of Decimal), ByVal Original_CIR_CODIGOC As Global.System.Nullable(Of Decimal), ByVal Original_CIT_HECHA As Date, ByVal Original_CIT_DESCRIPCION As String) As Integer
            Return Me.Update(Original_CIT_CODIGOC, CIT_CALENDARIZADO, PAC_CODIGOP, CIR_CODIGOC, CIT_HECHA, CIT_DESCRIPCION, Original_CIT_CODIGOC, Original_CIT_CALENDARIZADO, Original_PAC_CODIGOP, Original_CIR_CODIGOC, Original_CIT_HECHA, Original_CIT_DESCRIPCION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DUEÑOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DUEÑOS"
            tableMapping.ColumnMappings.Add("DUE_CODIGOD", "DUE_CODIGOD")
            tableMapping.ColumnMappings.Add("DUE_NOMBRE1", "DUE_NOMBRE1")
            tableMapping.ColumnMappings.Add("DUE_NOMBRE2", "DUE_NOMBRE2")
            tableMapping.ColumnMappings.Add("DUE_APELLIDO1", "DUE_APELLIDO1")
            tableMapping.ColumnMappings.Add("DUE_APELLIDO2", "DUE_APELLIDO2")
            tableMapping.ColumnMappings.Add("DUE_IDENTIFICACION", "DUE_IDENTIFICACION")
            tableMapping.ColumnMappings.Add("DUE_DIRECCION", "DUE_DIRECCION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""DUEÑOS"" WHERE ((""DUE_CODIGOD"" = :Original_DUE_CODIGOD) AND ("""& _ 
                "DUE_NOMBRE1"" = :Original_DUE_NOMBRE1) AND (""DUE_NOMBRE2"" = :Original_DUE_NOMBRE2"& _ 
                ") AND (""DUE_APELLIDO1"" = :Original_DUE_APELLIDO1) AND (""DUE_APELLIDO2"" = :Origin"& _ 
                "al_DUE_APELLIDO2) AND (""DUE_IDENTIFICACION"" = :Original_DUE_IDENTIFICACION) AND "& _ 
                "(""DUE_DIRECCION"" = :Original_DUE_DIRECCION))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_NOMBRE1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_NOMBRE2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_APELLIDO1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_APELLIDO2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_IDENTIFICACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "DUE_IDENTIFICACION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "DUE_DIRECCION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""DUEÑOS"" (""DUE_CODIGOD"", ""DUE_NOMBRE1"", ""DUE_NOMBRE2"", ""DUE_AP"& _ 
                "ELLIDO1"", ""DUE_APELLIDO2"", ""DUE_IDENTIFICACION"", ""DUE_DIRECCION"") VALUES (:DUE_C"& _ 
                "ODIGOD, :DUE_NOMBRE1, :DUE_NOMBRE2, :DUE_APELLIDO1, :DUE_APELLIDO2, :DUE_IDENTIF"& _ 
                "ICACION, :DUE_DIRECCION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_NOMBRE1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_NOMBRE2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_APELLIDO1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_APELLIDO2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_IDENTIFICACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "DUE_IDENTIFICACION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "DUE_DIRECCION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""DUEÑOS"" SET ""DUE_CODIGOD"" = :DUE_CODIGOD, ""DUE_NOMBRE1"" = :DUE_NOM"& _ 
                "BRE1, ""DUE_NOMBRE2"" = :DUE_NOMBRE2, ""DUE_APELLIDO1"" = :DUE_APELLIDO1, ""DUE_APELL"& _ 
                "IDO2"" = :DUE_APELLIDO2, ""DUE_IDENTIFICACION"" = :DUE_IDENTIFICACION, ""DUE_DIRECCI"& _ 
                "ON"" = :DUE_DIRECCION WHERE ((""DUE_CODIGOD"" = :Original_DUE_CODIGOD) AND (""DUE_NO"& _ 
                "MBRE1"" = :Original_DUE_NOMBRE1) AND (""DUE_NOMBRE2"" = :Original_DUE_NOMBRE2) AND "& _ 
                "(""DUE_APELLIDO1"" = :Original_DUE_APELLIDO1) AND (""DUE_APELLIDO2"" = :Original_DUE"& _ 
                "_APELLIDO2) AND (""DUE_IDENTIFICACION"" = :Original_DUE_IDENTIFICACION) AND (""DUE_"& _ 
                "DIRECCION"" = :Original_DUE_DIRECCION))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_NOMBRE1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_NOMBRE2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_APELLIDO1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_APELLIDO2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_IDENTIFICACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "DUE_IDENTIFICACION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "DUE_DIRECCION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_NOMBRE1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_NOMBRE2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_APELLIDO1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "DUE_APELLIDO2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_IDENTIFICACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "DUE_IDENTIFICACION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "DUE_DIRECCION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DUE_CODIGOD, DUE_NOMBRE1, DUE_NOMBRE2, DUE_APELLIDO1, DUE_APELLIDO2, DUE_I"& _ 
                "DENTIFICACION, DUE_DIRECCION FROM ELIO.DUEÑOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.DUEÑOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.DUEÑOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.DUEÑOSDataTable = New databases.DUEÑOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.DUEÑOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "DUEÑOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_DUE_NOMBRE1 As String, ByVal Original_DUE_NOMBRE2 As String, ByVal Original_DUE_APELLIDO1 As String, ByVal Original_DUE_APELLIDO2 As String, ByVal Original_DUE_IDENTIFICACION As String, ByVal Original_DUE_DIRECCION As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DUE_CODIGOD,Decimal)
            If (Original_DUE_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_NOMBRE1")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DUE_NOMBRE1,String)
            End If
            If (Original_DUE_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_NOMBRE2")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DUE_NOMBRE2,String)
            End If
            If (Original_DUE_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_APELLIDO1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DUE_APELLIDO1,String)
            End If
            If (Original_DUE_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_APELLIDO2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DUE_APELLIDO2,String)
            End If
            If (Original_DUE_IDENTIFICACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_IDENTIFICACION")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DUE_IDENTIFICACION,String)
            End If
            If (Original_DUE_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_DIRECCION")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DUE_DIRECCION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DUE_CODIGOD As Decimal, ByVal DUE_NOMBRE1 As String, ByVal DUE_NOMBRE2 As String, ByVal DUE_APELLIDO1 As String, ByVal DUE_APELLIDO2 As String, ByVal DUE_IDENTIFICACION As String, ByVal DUE_DIRECCION As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(DUE_CODIGOD,Decimal)
            If (DUE_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_NOMBRE1")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DUE_NOMBRE1,String)
            End If
            If (DUE_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_NOMBRE2")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DUE_NOMBRE2,String)
            End If
            If (DUE_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_APELLIDO1")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DUE_APELLIDO1,String)
            End If
            If (DUE_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_APELLIDO2")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DUE_APELLIDO2,String)
            End If
            If (DUE_IDENTIFICACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_IDENTIFICACION")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DUE_IDENTIFICACION,String)
            End If
            If (DUE_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_DIRECCION")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DUE_DIRECCION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DUE_CODIGOD As Decimal, ByVal DUE_NOMBRE1 As String, ByVal DUE_NOMBRE2 As String, ByVal DUE_APELLIDO1 As String, ByVal DUE_APELLIDO2 As String, ByVal DUE_IDENTIFICACION As String, ByVal DUE_DIRECCION As String, ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_DUE_NOMBRE1 As String, ByVal Original_DUE_NOMBRE2 As String, ByVal Original_DUE_APELLIDO1 As String, ByVal Original_DUE_APELLIDO2 As String, ByVal Original_DUE_IDENTIFICACION As String, ByVal Original_DUE_DIRECCION As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DUE_CODIGOD,Decimal)
            If (DUE_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_NOMBRE1")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DUE_NOMBRE1,String)
            End If
            If (DUE_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_NOMBRE2")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DUE_NOMBRE2,String)
            End If
            If (DUE_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_APELLIDO1")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DUE_APELLIDO1,String)
            End If
            If (DUE_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_APELLIDO2")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DUE_APELLIDO2,String)
            End If
            If (DUE_IDENTIFICACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_IDENTIFICACION")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DUE_IDENTIFICACION,String)
            End If
            If (DUE_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DUE_DIRECCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DUE_DIRECCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DUE_CODIGOD,Decimal)
            If (Original_DUE_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_NOMBRE1")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_DUE_NOMBRE1,String)
            End If
            If (Original_DUE_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_NOMBRE2")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_DUE_NOMBRE2,String)
            End If
            If (Original_DUE_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_APELLIDO1")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_DUE_APELLIDO1,String)
            End If
            If (Original_DUE_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_APELLIDO2")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DUE_APELLIDO2,String)
            End If
            If (Original_DUE_IDENTIFICACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_IDENTIFICACION")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_DUE_IDENTIFICACION,String)
            End If
            If (Original_DUE_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DUE_DIRECCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_DUE_DIRECCION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DUE_NOMBRE1 As String, ByVal DUE_NOMBRE2 As String, ByVal DUE_APELLIDO1 As String, ByVal DUE_APELLIDO2 As String, ByVal DUE_IDENTIFICACION As String, ByVal DUE_DIRECCION As String, ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_DUE_NOMBRE1 As String, ByVal Original_DUE_NOMBRE2 As String, ByVal Original_DUE_APELLIDO1 As String, ByVal Original_DUE_APELLIDO2 As String, ByVal Original_DUE_IDENTIFICACION As String, ByVal Original_DUE_DIRECCION As String) As Integer
            Return Me.Update(Original_DUE_CODIGOD, DUE_NOMBRE1, DUE_NOMBRE2, DUE_APELLIDO1, DUE_APELLIDO2, DUE_IDENTIFICACION, DUE_DIRECCION, Original_DUE_CODIGOD, Original_DUE_NOMBRE1, Original_DUE_NOMBRE2, Original_DUE_APELLIDO1, Original_DUE_APELLIDO2, Original_DUE_IDENTIFICACION, Original_DUE_DIRECCION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ENFERMEDADESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ENFERMEDADES"
            tableMapping.ColumnMappings.Add("ENF_CODIGOE", "ENF_CODIGOE")
            tableMapping.ColumnMappings.Add("ENF_ENFERMEDAD", "ENF_ENFERMEDAD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""ENFERMEDADES"" WHERE ((""ENF_CODIGOE"" = :Original_ENF_CODIGOE) "& _ 
                "AND (""ENF_ENFERMEDAD"" = :Original_ENF_ENFERMEDAD))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ENF_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ENF_CODIGOE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ENF_ENFERMEDAD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ENF_ENFERMEDAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""ENFERMEDADES"" (""ENF_CODIGOE"", ""ENF_ENFERMEDAD"") VALUES (:ENF_"& _ 
                "CODIGOE, :ENF_ENFERMEDAD)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENF_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ENF_CODIGOE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENF_ENFERMEDAD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ENF_ENFERMEDAD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""ENFERMEDADES"" SET ""ENF_CODIGOE"" = :ENF_CODIGOE, ""ENF_ENFERMEDAD"" ="& _ 
                " :ENF_ENFERMEDAD WHERE ((""ENF_CODIGOE"" = :Original_ENF_CODIGOE) AND (""ENF_ENFERM"& _ 
                "EDAD"" = :Original_ENF_ENFERMEDAD))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENF_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ENF_CODIGOE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENF_ENFERMEDAD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ENF_ENFERMEDAD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ENF_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ENF_CODIGOE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ENF_ENFERMEDAD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ENF_ENFERMEDAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(3) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ENF_CODIGOE, ENF_ENFERMEDAD FROM ELIO.ENFERMEDADES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "ELIO.U_ENFERMEDAD"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENFERMEDAD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "ELIO.D_ENFERMEDAD"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "ELIO.I_ENFERMEDAD"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENFERMEDAD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.ENFERMEDADESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.ENFERMEDADESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.ENFERMEDADESDataTable = New databases.ENFERMEDADESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.ENFERMEDADESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "ENFERMEDADES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ENF_CODIGOE As Decimal, ByVal Original_ENF_ENFERMEDAD As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ENF_CODIGOE,Decimal)
            If (Original_ENF_ENFERMEDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENF_ENFERMEDAD")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENF_ENFERMEDAD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ENF_CODIGOE As Decimal, ByVal ENF_ENFERMEDAD As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ENF_CODIGOE,Decimal)
            If (ENF_ENFERMEDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENF_ENFERMEDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENF_ENFERMEDAD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENF_CODIGOE As Decimal, ByVal ENF_ENFERMEDAD As String, ByVal Original_ENF_CODIGOE As Decimal, ByVal Original_ENF_ENFERMEDAD As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ENF_CODIGOE,Decimal)
            If (ENF_ENFERMEDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENF_ENFERMEDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENF_ENFERMEDAD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ENF_CODIGOE,Decimal)
            If (Original_ENF_ENFERMEDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENF_ENFERMEDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ENF_ENFERMEDAD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENF_ENFERMEDAD As String, ByVal Original_ENF_CODIGOE As Decimal, ByVal Original_ENF_ENFERMEDAD As String) As Integer
            Return Me.Update(Original_ENF_CODIGOE, ENF_ENFERMEDAD, Original_ENF_CODIGOE, Original_ENF_ENFERMEDAD)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Actualizar_ENFERMEDAD(ByVal CODIGOE As Global.System.Nullable(Of Decimal), ByVal ENFERMEDAD As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(1)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ENFERMEDAD Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(ENFERMEDAD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Eliminar_ENFERMEDAD(ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(2)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Insertar_ENFERMEDAD(ByVal ENFERMEDAD As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(3)
            If (ENFERMEDAD Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(ENFERMEDAD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ENFERMEDADXRAZATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ENFERMEDADXRAZA"
            tableMapping.ColumnMappings.Add("ENF_CODIGOE", "ENF_CODIGOE")
            tableMapping.ColumnMappings.Add("RAZ_CODIGOR", "RAZ_CODIGOR")
            tableMapping.ColumnMappings.Add("ENF_ENFERMEDAD", "ENF_ENFERMEDAD")
            tableMapping.ColumnMappings.Add("RAZ_RAZA", "RAZ_RAZA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(2) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ELIO.ENFERMEDADXRAZA.ENF_CODIGOE, ELIO.ENFERMEDADES.ENF_ENFERMEDAD,"& _ 
                " ELIO.ENFERMEDADXRAZA.RAZ_CODIGOR, ELIO.RAZAS.RAZ_RAZA"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ELIO.ENF"& _ 
                "ERMEDADXRAZA INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ELIO.ENFERMEDADES ON ELIO.ENFE"& _ 
                "RMEDADXRAZA.ENF_CODIGOE = ELIO.ENFERMEDADES.ENF_CODIGOE INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             ELIO.RAZAS ON ELIO.ENFERMEDADXRAZA.RAZ_CODIGOR = ELIO.RAZAS.RAZ_COD"& _ 
                "IGOR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "ELIO.D_ENFERMEDADXRAZA"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "ELIO.I_ENFERMEDADXRAZA"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.ENFERMEDADXRAZADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.ENFERMEDADXRAZADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.ENFERMEDADXRAZADataTable = New databases.ENFERMEDADXRAZADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Eliminar_ENFERMEDADXRAZA(ByVal CODIGOE As Global.System.Nullable(Of Decimal), ByVal CODIGOR As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(1)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CODIGOR.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOR.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Insertar_ENFERMEDADXRAZA(ByVal CODIGOE As Global.System.Nullable(Of Decimal), ByVal CODIGOR As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(2)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CODIGOR.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOR.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ESPECIESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ESPECIES"
            tableMapping.ColumnMappings.Add("ESP_CODIGOE", "ESP_CODIGOE")
            tableMapping.ColumnMappings.Add("ESP_ESPECIE", "ESP_ESPECIE")
            tableMapping.ColumnMappings.Add("ESP_FAMILIA", "ESP_FAMILIA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""ESPECIES"" WHERE ((""ESP_CODIGOE"" = :Original_ESP_CODIGOE) AND "& _ 
                "(""ESP_ESPECIE"" = :Original_ESP_ESPECIE) AND (""ESP_FAMILIA"" = :Original_ESP_FAMIL"& _ 
                "IA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ESP_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ESP_CODIGOE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ESP_ESPECIE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ESP_ESPECIE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ESP_FAMILIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "ESP_FAMILIA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""ESPECIES"" (""ESP_CODIGOE"", ""ESP_ESPECIE"", ""ESP_FAMILIA"") VALUE"& _ 
                "S (:ESP_CODIGOE, :ESP_ESPECIE, :ESP_FAMILIA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESP_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ESP_CODIGOE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESP_ESPECIE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ESP_ESPECIE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESP_FAMILIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "ESP_FAMILIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""ESPECIES"" SET ""ESP_CODIGOE"" = :ESP_CODIGOE, ""ESP_ESPECIE"" = :ESP_E"& _ 
                "SPECIE, ""ESP_FAMILIA"" = :ESP_FAMILIA WHERE ((""ESP_CODIGOE"" = :Original_ESP_CODIG"& _ 
                "OE) AND (""ESP_ESPECIE"" = :Original_ESP_ESPECIE) AND (""ESP_FAMILIA"" = :Original_E"& _ 
                "SP_FAMILIA))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESP_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ESP_CODIGOE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESP_ESPECIE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ESP_ESPECIE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESP_FAMILIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "ESP_FAMILIA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ESP_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ESP_CODIGOE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ESP_ESPECIE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ESP_ESPECIE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ESP_FAMILIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "ESP_FAMILIA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(3) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ESP_CODIGOE, ESP_ESPECIE, ESP_FAMILIA FROM ELIO.ESPECIES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "ELIO.U_ESPECIE"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESPECIE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FAMILIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "ELIO.D_ESPECIE"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "ELIO.I_ESPECIE"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESPECIE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FAMILIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.ESPECIESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.ESPECIESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.ESPECIESDataTable = New databases.ESPECIESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.ESPECIESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "ESPECIES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ESP_CODIGOE As Decimal, ByVal Original_ESP_ESPECIE As String, ByVal Original_ESP_FAMILIA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ESP_CODIGOE,Decimal)
            If (Original_ESP_ESPECIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ESP_ESPECIE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ESP_ESPECIE,String)
            End If
            If (Original_ESP_FAMILIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ESP_FAMILIA")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ESP_FAMILIA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ESP_CODIGOE As Decimal, ByVal ESP_ESPECIE As String, ByVal ESP_FAMILIA As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ESP_CODIGOE,Decimal)
            If (ESP_ESPECIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESP_ESPECIE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ESP_ESPECIE,String)
            End If
            If (ESP_FAMILIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESP_FAMILIA")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ESP_FAMILIA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ESP_CODIGOE As Decimal, ByVal ESP_ESPECIE As String, ByVal ESP_FAMILIA As String, ByVal Original_ESP_CODIGOE As Decimal, ByVal Original_ESP_ESPECIE As String, ByVal Original_ESP_FAMILIA As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ESP_CODIGOE,Decimal)
            If (ESP_ESPECIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESP_ESPECIE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ESP_ESPECIE,String)
            End If
            If (ESP_FAMILIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESP_FAMILIA")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ESP_FAMILIA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ESP_CODIGOE,Decimal)
            If (Original_ESP_ESPECIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ESP_ESPECIE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ESP_ESPECIE,String)
            End If
            If (Original_ESP_FAMILIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ESP_FAMILIA")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ESP_FAMILIA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ESP_ESPECIE As String, ByVal ESP_FAMILIA As String, ByVal Original_ESP_CODIGOE As Decimal, ByVal Original_ESP_ESPECIE As String, ByVal Original_ESP_FAMILIA As String) As Integer
            Return Me.Update(Original_ESP_CODIGOE, ESP_ESPECIE, ESP_FAMILIA, Original_ESP_CODIGOE, Original_ESP_ESPECIE, Original_ESP_FAMILIA)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Actualizar_ESPECIE(ByVal CODIGOE As Global.System.Nullable(Of Decimal), ByVal ESPECIE As String, ByVal FAMILIA As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(1)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ESPECIE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(ESPECIE,String)
            End If
            If (FAMILIA Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(FAMILIA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Eliminar_ESPECIE(ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(2)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Insertar_ESPECIE(ByVal ESPECIE As String, ByVal FAMILIA As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(3)
            If (ESPECIE Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(ESPECIE,String)
            End If
            If (FAMILIA Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(FAMILIA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FECHATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FECHA"
            tableMapping.ColumnMappings.Add("FEC_CODIGO", "FEC_CODIGO")
            tableMapping.ColumnMappings.Add("FEC_FECHAHORA", "FEC_FECHAHORA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""FECHA"" WHERE ((""FEC_CODIGO"" = :Original_FEC_CODIGO) AND (""FEC"& _ 
                "_FECHAHORA"" = :Original_FEC_FECHAHORA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FEC_CODIGO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "FEC_CODIGO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FEC_FECHAHORA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "FEC_FECHAHORA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""FECHA"" (""FEC_CODIGO"", ""FEC_FECHAHORA"") VALUES (:FEC_CODIGO, :"& _ 
                "FEC_FECHAHORA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FEC_CODIGO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "FEC_CODIGO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FEC_FECHAHORA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "FEC_FECHAHORA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""FECHA"" SET ""FEC_CODIGO"" = :FEC_CODIGO, ""FEC_FECHAHORA"" = :FEC_FECH"& _ 
                "AHORA WHERE ((""FEC_CODIGO"" = :Original_FEC_CODIGO) AND (""FEC_FECHAHORA"" = :Origi"& _ 
                "nal_FEC_FECHAHORA))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FEC_CODIGO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "FEC_CODIGO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FEC_FECHAHORA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "FEC_FECHAHORA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FEC_CODIGO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "FEC_CODIGO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FEC_FECHAHORA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "FEC_FECHAHORA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FEC_CODIGO, FEC_FECHAHORA FROM ELIO.FECHA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.FECHADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.FECHADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.FECHADataTable = New databases.FECHADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.FECHADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "FECHA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FEC_CODIGO As Decimal, ByVal Original_FEC_FECHAHORA As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FEC_CODIGO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FEC_FECHAHORA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FEC_CODIGO As Decimal, ByVal FEC_FECHAHORA As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FEC_CODIGO,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FEC_FECHAHORA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FEC_CODIGO As Decimal, ByVal FEC_FECHAHORA As Date, ByVal Original_FEC_CODIGO As Decimal, ByVal Original_FEC_FECHAHORA As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FEC_CODIGO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FEC_FECHAHORA,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FEC_CODIGO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FEC_FECHAHORA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FEC_FECHAHORA As Date, ByVal Original_FEC_CODIGO As Decimal, ByVal Original_FEC_FECHAHORA As Date) As Integer
            Return Me.Update(Original_FEC_CODIGO, FEC_FECHAHORA, Original_FEC_CODIGO, Original_FEC_FECHAHORA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MEDICINASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MEDICINAS"
            tableMapping.ColumnMappings.Add("MED_CODIGOME", "MED_CODIGOME")
            tableMapping.ColumnMappings.Add("MED_NOMBRE", "MED_NOMBRE")
            tableMapping.ColumnMappings.Add("MED_DOSIS", "MED_DOSIS")
            tableMapping.ColumnMappings.Add("MED_INTERVALO", "MED_INTERVALO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""MEDICINAS"" WHERE ((""MED_CODIGOME"" = :Original_MED_CODIGOME) A"& _ 
                "ND (""MED_NOMBRE"" = :Original_MED_NOMBRE) AND (""MED_DOSIS"" = :Original_MED_DOSIS)"& _ 
                " AND (""MED_INTERVALO"" = :Original_MED_INTERVALO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_DOSIS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_DOSIS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_INTERVALO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_INTERVALO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""MEDICINAS"" (""MED_CODIGOME"", ""MED_NOMBRE"", ""MED_DOSIS"", ""MED_I"& _ 
                "NTERVALO"") VALUES (:MED_CODIGOME, :MED_NOMBRE, :MED_DOSIS, :MED_INTERVALO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_DOSIS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_DOSIS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_INTERVALO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_INTERVALO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""MEDICINAS"" SET ""MED_CODIGOME"" = :MED_CODIGOME, ""MED_NOMBRE"" = :MED"& _ 
                "_NOMBRE, ""MED_DOSIS"" = :MED_DOSIS, ""MED_INTERVALO"" = :MED_INTERVALO WHERE ((""MED"& _ 
                "_CODIGOME"" = :Original_MED_CODIGOME) AND (""MED_NOMBRE"" = :Original_MED_NOMBRE) A"& _ 
                "ND (""MED_DOSIS"" = :Original_MED_DOSIS) AND (""MED_INTERVALO"" = :Original_MED_INTE"& _ 
                "RVALO))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_DOSIS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_DOSIS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_INTERVALO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_INTERVALO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_DOSIS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_DOSIS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_INTERVALO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_INTERVALO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(3) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MED_CODIGOME, MED_NOMBRE, MED_DOSIS, MED_INTERVALO FROM ELIO.MEDICINAS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "ELIO.U_MEDICINA"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOSIS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "INTERVALO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "ELIO.D_MEDICINA"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "ELIO.I_MEDICINA"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOSIS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "INTERVALO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.MEDICINASDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.MEDICINASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.MEDICINASDataTable = New databases.MEDICINASDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.MEDICINASDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "MEDICINAS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MED_CODIGOME As Decimal, ByVal Original_MED_NOMBRE As String, ByVal Original_MED_DOSIS As String, ByVal Original_MED_INTERVALO As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MED_CODIGOME,Decimal)
            If (Original_MED_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MED_NOMBRE,String)
            End If
            If (Original_MED_DOSIS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_DOSIS")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MED_DOSIS,String)
            End If
            If (Original_MED_INTERVALO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_INTERVALO")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MED_INTERVALO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MED_CODIGOME As Decimal, ByVal MED_NOMBRE As String, ByVal MED_DOSIS As String, ByVal MED_INTERVALO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MED_CODIGOME,Decimal)
            If (MED_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MED_NOMBRE,String)
            End If
            If (MED_DOSIS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_DOSIS")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MED_DOSIS,String)
            End If
            If (MED_INTERVALO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_INTERVALO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MED_INTERVALO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MED_CODIGOME As Decimal, ByVal MED_NOMBRE As String, ByVal MED_DOSIS As String, ByVal MED_INTERVALO As String, ByVal Original_MED_CODIGOME As Decimal, ByVal Original_MED_NOMBRE As String, ByVal Original_MED_DOSIS As String, ByVal Original_MED_INTERVALO As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MED_CODIGOME,Decimal)
            If (MED_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MED_NOMBRE,String)
            End If
            If (MED_DOSIS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_DOSIS")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MED_DOSIS,String)
            End If
            If (MED_INTERVALO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_INTERVALO")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MED_INTERVALO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_MED_CODIGOME,Decimal)
            If (Original_MED_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_MED_NOMBRE,String)
            End If
            If (Original_MED_DOSIS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_DOSIS")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MED_DOSIS,String)
            End If
            If (Original_MED_INTERVALO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_INTERVALO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_MED_INTERVALO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MED_NOMBRE As String, ByVal MED_DOSIS As String, ByVal MED_INTERVALO As String, ByVal Original_MED_CODIGOME As Decimal, ByVal Original_MED_NOMBRE As String, ByVal Original_MED_DOSIS As String, ByVal Original_MED_INTERVALO As String) As Integer
            Return Me.Update(Original_MED_CODIGOME, MED_NOMBRE, MED_DOSIS, MED_INTERVALO, Original_MED_CODIGOME, Original_MED_NOMBRE, Original_MED_DOSIS, Original_MED_INTERVALO)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Actualizar_MEDICINA(ByVal CODIGOME As Global.System.Nullable(Of Decimal), ByVal NOMBRE As String, ByVal DOSIS As String, ByVal INTERVALO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(1)
            If (CODIGOME.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOME.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (NOMBRE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE,String)
            End If
            If (DOSIS Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(DOSIS,String)
            End If
            If (INTERVALO Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(INTERVALO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Eliminar_MEDICINA(ByVal CODIGOME As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(2)
            If (CODIGOME.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOME.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Insertar_MEDICINA(ByVal NOMBRE As String, ByVal DOSIS As String, ByVal INTERVALO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(3)
            If (NOMBRE Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(NOMBRE,String)
            End If
            If (DOSIS Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(DOSIS,String)
            End If
            If (INTERVALO Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(INTERVALO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MEDICINAXENFERMEDADTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MEDICINAXENFERMEDAD"
            tableMapping.ColumnMappings.Add("MED_CODIGOME", "MED_CODIGOME")
            tableMapping.ColumnMappings.Add("ENF_CODIGOE", "ENF_CODIGOE")
            tableMapping.ColumnMappings.Add("MED_NOMBRE", "MED_NOMBRE")
            tableMapping.ColumnMappings.Add("MED_DOSIS", "MED_DOSIS")
            tableMapping.ColumnMappings.Add("MED_INTERVALO", "MED_INTERVALO")
            tableMapping.ColumnMappings.Add("ENF_ENFERMEDAD", "ENF_ENFERMEDAD")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(2) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ELIO.MEDICINAXENFERMEDAD.MED_CODIGOME, ELIO.MEDICINAS.MED_NOMBRE, E"& _ 
                "LIO.MEDICINAS.MED_DOSIS, ELIO.MEDICINAS.MED_INTERVALO, ELIO.MEDICINAXENFERMEDAD."& _ 
                "ENF_CODIGOE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ELIO.ENFERMEDADES.ENF_ENFERMEDAD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM  "& _ 
                "          ELIO.MEDICINAXENFERMEDAD INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ELIO.ENF"& _ 
                "ERMEDADES ON ELIO.MEDICINAXENFERMEDAD.ENF_CODIGOE = ELIO.ENFERMEDADES.ENF_CODIGO"& _ 
                "E INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ELIO.MEDICINAS ON ELIO.MEDICINAXENFERMEDA"& _ 
                "D.MED_CODIGOME = ELIO.MEDICINAS.MED_CODIGOME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "ELIO.D_MEDICINAXENFERMEDAD"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "ELIO.I_MEDICINAXENFERMEDAD"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.MEDICINAXENFERMEDADDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.MEDICINAXENFERMEDADDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.MEDICINAXENFERMEDADDataTable = New databases.MEDICINAXENFERMEDADDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Eliminar_MEDICINAXENFERMEDAD(ByVal CODIGOME As Global.System.Nullable(Of Decimal), ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(1)
            If (CODIGOME.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOME.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CODIGOE.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Insertar_MEDICINAXENFERMEDAD(ByVal CODIGOME As Global.System.Nullable(Of Decimal), ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(2)
            If (CODIGOME.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOME.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CODIGOE.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MÉDICOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MÉDICOS"
            tableMapping.ColumnMappings.Add("MED_CODIGOM", "MED_CODIGOM")
            tableMapping.ColumnMappings.Add("MED_NOMBRE1", "MED_NOMBRE1")
            tableMapping.ColumnMappings.Add("MED_NOMBRE2", "MED_NOMBRE2")
            tableMapping.ColumnMappings.Add("MED_APELLIDO1", "MED_APELLIDO1")
            tableMapping.ColumnMappings.Add("MED_APELLIDO2", "MED_APELLIDO2")
            tableMapping.ColumnMappings.Add("MED_DIRECCION", "MED_DIRECCION")
            tableMapping.ColumnMappings.Add("MED_EMERGENCIA", "MED_EMERGENCIA")
            tableMapping.ColumnMappings.Add("MED_INGRESO", "MED_INGRESO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""MÉDICOS"" WHERE ((""MED_CODIGOM"" = :Original_MED_CODIGOM) AND ("& _ 
                """MED_NOMBRE1"" = :Original_MED_NOMBRE1) AND (""MED_NOMBRE2"" = :Original_MED_NOMBRE"& _ 
                "2) AND (""MED_APELLIDO1"" = :Original_MED_APELLIDO1) AND (""MED_APELLIDO2"" = :Origi"& _ 
                "nal_MED_APELLIDO2) AND (""MED_DIRECCION"" = :Original_MED_DIRECCION) AND (""MED_EME"& _ 
                "RGENCIA"" = :Original_MED_EMERGENCIA) AND (""MED_INGRESO"" = :Original_MED_INGRESO)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_APELLIDO1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_APELLIDO2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "MED_DIRECCION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_EMERGENCIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "MED_EMERGENCIA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_INGRESO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "MED_INGRESO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""MÉDICOS"" (""MED_CODIGOM"", ""MED_NOMBRE1"", ""MED_NOMBRE2"", ""MED_A"& _ 
                "PELLIDO1"", ""MED_APELLIDO2"", ""MED_DIRECCION"", ""MED_EMERGENCIA"", ""MED_INGRESO"") VA"& _ 
                "LUES (:MED_CODIGOM, :MED_NOMBRE1, :MED_NOMBRE2, :MED_APELLIDO1, :MED_APELLIDO2, "& _ 
                ":MED_DIRECCION, :MED_EMERGENCIA, :MED_INGRESO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_APELLIDO1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_APELLIDO2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "MED_DIRECCION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_EMERGENCIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "MED_EMERGENCIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_INGRESO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "MED_INGRESO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""MÉDICOS"" SET ""MED_CODIGOM"" = :MED_CODIGOM, ""MED_NOMBRE1"" = :MED_NO"& _ 
                "MBRE1, ""MED_NOMBRE2"" = :MED_NOMBRE2, ""MED_APELLIDO1"" = :MED_APELLIDO1, ""MED_APEL"& _ 
                "LIDO2"" = :MED_APELLIDO2, ""MED_DIRECCION"" = :MED_DIRECCION, ""MED_EMERGENCIA"" = :M"& _ 
                "ED_EMERGENCIA, ""MED_INGRESO"" = :MED_INGRESO WHERE ((""MED_CODIGOM"" = :Original_ME"& _ 
                "D_CODIGOM) AND (""MED_NOMBRE1"" = :Original_MED_NOMBRE1) AND (""MED_NOMBRE2"" = :Ori"& _ 
                "ginal_MED_NOMBRE2) AND (""MED_APELLIDO1"" = :Original_MED_APELLIDO1) AND (""MED_APE"& _ 
                "LLIDO2"" = :Original_MED_APELLIDO2) AND (""MED_DIRECCION"" = :Original_MED_DIRECCIO"& _ 
                "N) AND (""MED_EMERGENCIA"" = :Original_MED_EMERGENCIA) AND (""MED_INGRESO"" = :Origi"& _ 
                "nal_MED_INGRESO))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_APELLIDO1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_APELLIDO2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "MED_DIRECCION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_EMERGENCIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "MED_EMERGENCIA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_INGRESO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "MED_INGRESO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_NOMBRE2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_APELLIDO1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MED_APELLIDO2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "MED_DIRECCION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_EMERGENCIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "MED_EMERGENCIA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_INGRESO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "MED_INGRESO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MED_CODIGOM, MED_NOMBRE1, MED_NOMBRE2, MED_APELLIDO1, MED_APELLIDO2, MED_D"& _ 
                "IRECCION, MED_EMERGENCIA, MED_INGRESO FROM ELIO.MÉDICOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.MÉDICOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.MÉDICOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.MÉDICOSDataTable = New databases.MÉDICOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.MÉDICOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "MÉDICOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MED_CODIGOM As Decimal, ByVal Original_MED_NOMBRE1 As String, ByVal Original_MED_NOMBRE2 As String, ByVal Original_MED_APELLIDO1 As String, ByVal Original_MED_APELLIDO2 As String, ByVal Original_MED_DIRECCION As String, ByVal Original_MED_EMERGENCIA As String, ByVal Original_MED_INGRESO As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MED_CODIGOM,Decimal)
            If (Original_MED_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_NOMBRE1")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MED_NOMBRE1,String)
            End If
            If (Original_MED_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_NOMBRE2")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MED_NOMBRE2,String)
            End If
            If (Original_MED_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_APELLIDO1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MED_APELLIDO1,String)
            End If
            If (Original_MED_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_APELLIDO2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MED_APELLIDO2,String)
            End If
            If (Original_MED_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_DIRECCION")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_MED_DIRECCION,String)
            End If
            If (Original_MED_EMERGENCIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_EMERGENCIA")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MED_EMERGENCIA,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MED_INGRESO,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MED_CODIGOM As Decimal, ByVal MED_NOMBRE1 As String, ByVal MED_NOMBRE2 As String, ByVal MED_APELLIDO1 As String, ByVal MED_APELLIDO2 As String, ByVal MED_DIRECCION As String, ByVal MED_EMERGENCIA As String, ByVal MED_INGRESO As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MED_CODIGOM,Decimal)
            If (MED_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_NOMBRE1")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MED_NOMBRE1,String)
            End If
            If (MED_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_NOMBRE2")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MED_NOMBRE2,String)
            End If
            If (MED_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_APELLIDO1")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MED_APELLIDO1,String)
            End If
            If (MED_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_APELLIDO2")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MED_APELLIDO2,String)
            End If
            If (MED_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_DIRECCION")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MED_DIRECCION,String)
            End If
            If (MED_EMERGENCIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_EMERGENCIA")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MED_EMERGENCIA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(MED_INGRESO,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MED_CODIGOM As Decimal,  _
                    ByVal MED_NOMBRE1 As String,  _
                    ByVal MED_NOMBRE2 As String,  _
                    ByVal MED_APELLIDO1 As String,  _
                    ByVal MED_APELLIDO2 As String,  _
                    ByVal MED_DIRECCION As String,  _
                    ByVal MED_EMERGENCIA As String,  _
                    ByVal MED_INGRESO As Date,  _
                    ByVal Original_MED_CODIGOM As Decimal,  _
                    ByVal Original_MED_NOMBRE1 As String,  _
                    ByVal Original_MED_NOMBRE2 As String,  _
                    ByVal Original_MED_APELLIDO1 As String,  _
                    ByVal Original_MED_APELLIDO2 As String,  _
                    ByVal Original_MED_DIRECCION As String,  _
                    ByVal Original_MED_EMERGENCIA As String,  _
                    ByVal Original_MED_INGRESO As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MED_CODIGOM,Decimal)
            If (MED_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_NOMBRE1")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MED_NOMBRE1,String)
            End If
            If (MED_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_NOMBRE2")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MED_NOMBRE2,String)
            End If
            If (MED_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_APELLIDO1")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MED_APELLIDO1,String)
            End If
            If (MED_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_APELLIDO2")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MED_APELLIDO2,String)
            End If
            If (MED_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_DIRECCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MED_DIRECCION,String)
            End If
            If (MED_EMERGENCIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MED_EMERGENCIA")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MED_EMERGENCIA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MED_INGRESO,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_MED_CODIGOM,Decimal)
            If (Original_MED_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_NOMBRE1")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MED_NOMBRE1,String)
            End If
            If (Original_MED_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_NOMBRE2")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_MED_NOMBRE2,String)
            End If
            If (Original_MED_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_APELLIDO1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MED_APELLIDO1,String)
            End If
            If (Original_MED_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_APELLIDO2")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_MED_APELLIDO2,String)
            End If
            If (Original_MED_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_DIRECCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_MED_DIRECCION,String)
            End If
            If (Original_MED_EMERGENCIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MED_EMERGENCIA")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MED_EMERGENCIA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_MED_INGRESO,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MED_NOMBRE1 As String, ByVal MED_NOMBRE2 As String, ByVal MED_APELLIDO1 As String, ByVal MED_APELLIDO2 As String, ByVal MED_DIRECCION As String, ByVal MED_EMERGENCIA As String, ByVal MED_INGRESO As Date, ByVal Original_MED_CODIGOM As Decimal, ByVal Original_MED_NOMBRE1 As String, ByVal Original_MED_NOMBRE2 As String, ByVal Original_MED_APELLIDO1 As String, ByVal Original_MED_APELLIDO2 As String, ByVal Original_MED_DIRECCION As String, ByVal Original_MED_EMERGENCIA As String, ByVal Original_MED_INGRESO As Date) As Integer
            Return Me.Update(Original_MED_CODIGOM, MED_NOMBRE1, MED_NOMBRE2, MED_APELLIDO1, MED_APELLIDO2, MED_DIRECCION, MED_EMERGENCIA, MED_INGRESO, Original_MED_CODIGOM, Original_MED_NOMBRE1, Original_MED_NOMBRE2, Original_MED_APELLIDO1, Original_MED_APELLIDO2, Original_MED_DIRECCION, Original_MED_EMERGENCIA, Original_MED_INGRESO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PACIENTESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PACIENTES"
            tableMapping.ColumnMappings.Add("PAC_CODIGOP", "PAC_CODIGOP")
            tableMapping.ColumnMappings.Add("PAC_NOMBREP", "PAC_NOMBREP")
            tableMapping.ColumnMappings.Add("RAZ_CODIGOR", "RAZ_CODIGOR")
            tableMapping.ColumnMappings.Add("DUE_CODIGOD", "DUE_CODIGOD")
            tableMapping.ColumnMappings.Add("MED_CODIGOM", "MED_CODIGOM")
            tableMapping.ColumnMappings.Add("PAC_FOTOP", "PAC_FOTOP")
            tableMapping.ColumnMappings.Add("PAC_FECHA", "PAC_FECHA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""PACIENTES"" WHERE ((""PAC_CODIGOP"" = :Original_PAC_CODIGOP) AND"& _ 
                " (""PAC_NOMBREP"" = :Original_PAC_NOMBREP) AND (""RAZ_CODIGOR"" = :Original_RAZ_CODI"& _ 
                "GOR) AND (""DUE_CODIGOD"" = :Original_DUE_CODIGOD) AND (""MED_CODIGOM"" = :Original_"& _ 
                "MED_CODIGOM) AND (""PAC_FECHA"" = :Original_PAC_FECHA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAC_NOMBREP"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "PAC_NOMBREP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_RAZ_CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "RAZ_CODIGOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAC_FECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "PAC_FECHA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""PACIENTES"" (""PAC_CODIGOP"", ""PAC_NOMBREP"", ""RAZ_CODIGOR"", ""DUE"& _ 
                "_CODIGOD"", ""MED_CODIGOM"", ""PAC_FOTOP"", ""PAC_FECHA"") VALUES (:PAC_CODIGOP, :PAC_N"& _ 
                "OMBREP, :RAZ_CODIGOR, :DUE_CODIGOD, :MED_CODIGOM, :PAC_FOTOP, :PAC_FECHA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_NOMBREP"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "PAC_NOMBREP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "RAZ_CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "RAZ_CODIGOR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_FOTOP"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Blob
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "PAC_FOTOP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_FECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "PAC_FECHA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""PACIENTES"" SET ""PAC_CODIGOP"" = :PAC_CODIGOP, ""PAC_NOMBREP"" = :PAC_"& _ 
                "NOMBREP, ""RAZ_CODIGOR"" = :RAZ_CODIGOR, ""DUE_CODIGOD"" = :DUE_CODIGOD, ""MED_CODIGO"& _ 
                "M"" = :MED_CODIGOM, ""PAC_FOTOP"" = :PAC_FOTOP, ""PAC_FECHA"" = :PAC_FECHA WHERE ((""P"& _ 
                "AC_CODIGOP"" = :Original_PAC_CODIGOP) AND (""PAC_NOMBREP"" = :Original_PAC_NOMBREP)"& _ 
                " AND (""RAZ_CODIGOR"" = :Original_RAZ_CODIGOR) AND (""DUE_CODIGOD"" = :Original_DUE_"& _ 
                "CODIGOD) AND (""MED_CODIGOM"" = :Original_MED_CODIGOM) AND (""PAC_FECHA"" = :Origina"& _ 
                "l_PAC_FECHA))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_NOMBREP"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "PAC_NOMBREP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "RAZ_CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "RAZ_CODIGOR"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_FOTOP"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Blob
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "PAC_FOTOP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_FECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "PAC_FECHA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAC_NOMBREP"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "PAC_NOMBREP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_RAZ_CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "RAZ_CODIGOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAC_FECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "PAC_FECHA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PAC_CODIGOP, PAC_NOMBREP, RAZ_CODIGOR, DUE_CODIGOD, MED_CODIGOM, PAC_FOTOP"& _ 
                ", PAC_FECHA FROM ELIO.PACIENTES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.PACIENTESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.PACIENTESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.PACIENTESDataTable = New databases.PACIENTESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.PACIENTESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "PACIENTES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PAC_CODIGOP As Decimal, ByVal Original_PAC_NOMBREP As String, ByVal Original_RAZ_CODIGOR As Decimal, ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_MED_CODIGOM As Decimal, ByVal Original_PAC_FECHA As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PAC_CODIGOP,Decimal)
            If (Original_PAC_NOMBREP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PAC_NOMBREP")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PAC_NOMBREP,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RAZ_CODIGOR,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DUE_CODIGOD,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MED_CODIGOM,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PAC_FECHA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PAC_CODIGOP As Decimal, ByVal PAC_NOMBREP As String, ByVal RAZ_CODIGOR As Decimal, ByVal DUE_CODIGOD As Decimal, ByVal MED_CODIGOM As Decimal, ByVal PAC_FOTOP As Object, ByVal PAC_FECHA As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PAC_CODIGOP,Decimal)
            If (PAC_NOMBREP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PAC_NOMBREP")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PAC_NOMBREP,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(RAZ_CODIGOR,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DUE_CODIGOD,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(MED_CODIGOM,Decimal)
            If (PAC_FOTOP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PAC_FOTOP,Object)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(PAC_FECHA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PAC_CODIGOP As Decimal, ByVal PAC_NOMBREP As String, ByVal RAZ_CODIGOR As Decimal, ByVal DUE_CODIGOD As Decimal, ByVal MED_CODIGOM As Decimal, ByVal PAC_FOTOP As Object, ByVal PAC_FECHA As Date, ByVal Original_PAC_CODIGOP As Decimal, ByVal Original_PAC_NOMBREP As String, ByVal Original_RAZ_CODIGOR As Decimal, ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_MED_CODIGOM As Decimal, ByVal Original_PAC_FECHA As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PAC_CODIGOP,Decimal)
            If (PAC_NOMBREP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PAC_NOMBREP")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PAC_NOMBREP,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(RAZ_CODIGOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DUE_CODIGOD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MED_CODIGOM,Decimal)
            If (PAC_FOTOP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PAC_FOTOP,Object)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PAC_FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PAC_CODIGOP,Decimal)
            If (Original_PAC_NOMBREP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PAC_NOMBREP")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PAC_NOMBREP,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_RAZ_CODIGOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_DUE_CODIGOD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MED_CODIGOM,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PAC_FECHA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PAC_NOMBREP As String, ByVal RAZ_CODIGOR As Decimal, ByVal DUE_CODIGOD As Decimal, ByVal MED_CODIGOM As Decimal, ByVal PAC_FOTOP As Object, ByVal PAC_FECHA As Date, ByVal Original_PAC_CODIGOP As Decimal, ByVal Original_PAC_NOMBREP As String, ByVal Original_RAZ_CODIGOR As Decimal, ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_MED_CODIGOM As Decimal, ByVal Original_PAC_FECHA As Date) As Integer
            Return Me.Update(Original_PAC_CODIGOP, PAC_NOMBREP, RAZ_CODIGOR, DUE_CODIGOD, MED_CODIGOM, PAC_FOTOP, PAC_FECHA, Original_PAC_CODIGOP, Original_PAC_NOMBREP, Original_RAZ_CODIGOR, Original_DUE_CODIGOD, Original_MED_CODIGOM, Original_PAC_FECHA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RAZASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RAZAS"
            tableMapping.ColumnMappings.Add("RAZ_CODIGOR", "RAZ_CODIGOR")
            tableMapping.ColumnMappings.Add("RAZ_RAZA", "RAZ_RAZA")
            tableMapping.ColumnMappings.Add("ESP_CODIGOE", "ESP_CODIGOE")
            tableMapping.ColumnMappings.Add("ESP_ESPECIE", "ESP_ESPECIE")
            tableMapping.ColumnMappings.Add("ESP_FAMILIA", "ESP_FAMILIA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(3) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ELIO.RAZAS.RAZ_CODIGOR, ELIO.RAZAS.RAZ_RAZA, ELIO.RAZAS.ESP_CODIGOE"& _ 
                ", ELIO.ESPECIES.ESP_ESPECIE, ELIO.ESPECIES.ESP_FAMILIA"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ELIO.RAZ"& _ 
                "AS INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ELIO.ESPECIES ON ELIO.RAZAS.ESP_CODIGOE "& _ 
                "= ELIO.ESPECIES.ESP_CODIGOE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "ELIO.U_RAZA"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "RAZA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "ELIO.D_RAZA"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "ELIO.I_RAZA"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "RAZA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.RAZASDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.RAZASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.RAZASDataTable = New databases.RAZASDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Actualizar_RAZA(ByVal CODIGOR As Global.System.Nullable(Of Decimal), ByVal RAZA As String, ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(1)
            If (CODIGOR.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOR.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (RAZA Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(RAZA,String)
            End If
            If (CODIGOE.HasValue = true) Then
                command.Parameters(2).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Eliminar_RAZA(ByVal CODIGOR As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(2)
            If (CODIGOR.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOR.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Insertar_RAZA(ByVal RAZA As String, ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(3)
            If (RAZA Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(RAZA,String)
            End If
            If (CODIGOE.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE"
            tableMapping.ColumnMappings.Add("REP_SECUENCIA", "REP_SECUENCIA")
            tableMapping.ColumnMappings.Add("REP_MESH", "REP_MESH")
            tableMapping.ColumnMappings.Add("REP_FECHAH", "REP_FECHAH")
            tableMapping.ColumnMappings.Add("DUE_CODIGOD", "DUE_CODIGOD")
            tableMapping.ColumnMappings.Add("PAC_CODIGOP", "PAC_CODIGOP")
            tableMapping.ColumnMappings.Add("ESP_CODIGOE", "ESP_CODIGOE")
            tableMapping.ColumnMappings.Add("CIT_CODIGOC", "CIT_CODIGOC")
            tableMapping.ColumnMappings.Add("MED_CODIGOM", "MED_CODIGOM")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""REPORTE"" WHERE ((""REP_SECUENCIA"" = :Original_REP_SECUENCIA) A"& _ 
                "ND (""REP_MESH"" = :Original_REP_MESH) AND (""REP_FECHAH"" = :Original_REP_FECHAH) A"& _ 
                "ND (""DUE_CODIGOD"" = :Original_DUE_CODIGOD) AND (""PAC_CODIGOP"" = :Original_PAC_CO"& _ 
                "DIGOP) AND (""ESP_CODIGOE"" = :Original_ESP_CODIGOE) AND (""CIT_CODIGOC"" = :Origina"& _ 
                "l_CIT_CODIGOC) AND (""MED_CODIGOM"" = :Original_MED_CODIGOM))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_REP_SECUENCIA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "REP_SECUENCIA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_REP_MESH"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "REP_MESH"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_REP_FECHAH"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "REP_FECHAH"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ESP_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ESP_CODIGOE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIT_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIT_CODIGOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""REPORTE"" (""REP_SECUENCIA"", ""REP_MESH"", ""REP_FECHAH"", ""DUE_COD"& _ 
                "IGOD"", ""PAC_CODIGOP"", ""ESP_CODIGOE"", ""CIT_CODIGOC"", ""MED_CODIGOM"") VALUES (:REP_"& _ 
                "SECUENCIA, :REP_MESH, :REP_FECHAH, :DUE_CODIGOD, :PAC_CODIGOP, :ESP_CODIGOE, :CI"& _ 
                "T_CODIGOC, :MED_CODIGOM)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "REP_SECUENCIA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "REP_SECUENCIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "REP_MESH"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "REP_MESH"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "REP_FECHAH"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "REP_FECHAH"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESP_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ESP_CODIGOE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIT_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIT_CODIGOC"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""REPORTE"" SET ""REP_SECUENCIA"" = :REP_SECUENCIA, ""REP_MESH"" = :REP_M"& _ 
                "ESH, ""REP_FECHAH"" = :REP_FECHAH, ""DUE_CODIGOD"" = :DUE_CODIGOD, ""PAC_CODIGOP"" = :"& _ 
                "PAC_CODIGOP, ""ESP_CODIGOE"" = :ESP_CODIGOE, ""CIT_CODIGOC"" = :CIT_CODIGOC, ""MED_CO"& _ 
                "DIGOM"" = :MED_CODIGOM WHERE ((""REP_SECUENCIA"" = :Original_REP_SECUENCIA) AND (""R"& _ 
                "EP_MESH"" = :Original_REP_MESH) AND (""REP_FECHAH"" = :Original_REP_FECHAH) AND (""D"& _ 
                "UE_CODIGOD"" = :Original_DUE_CODIGOD) AND (""PAC_CODIGOP"" = :Original_PAC_CODIGOP)"& _ 
                " AND (""ESP_CODIGOE"" = :Original_ESP_CODIGOE) AND (""CIT_CODIGOC"" = :Original_CIT_"& _ 
                "CODIGOC) AND (""MED_CODIGOM"" = :Original_MED_CODIGOM))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "REP_SECUENCIA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "REP_SECUENCIA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "REP_MESH"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "REP_MESH"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "REP_FECHAH"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "REP_FECHAH"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESP_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ESP_CODIGOE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CIT_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIT_CODIGOC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_REP_SECUENCIA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "REP_SECUENCIA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_REP_MESH"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "REP_MESH"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_REP_FECHAH"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "REP_FECHAH"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAC_CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PAC_CODIGOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ESP_CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ESP_CODIGOE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CIT_CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CIT_CODIGOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT REP_SECUENCIA, REP_MESH, REP_FECHAH, DUE_CODIGOD, PAC_CODIGOP, ESP_CODIGOE"& _ 
                ", CIT_CODIGOC, MED_CODIGOM FROM ELIO.REPORTE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.REPORTEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.REPORTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.REPORTEDataTable = New databases.REPORTEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.REPORTEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "REPORTE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_REP_SECUENCIA As Decimal, ByVal Original_REP_MESH As String, ByVal Original_REP_FECHAH As Date, ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_PAC_CODIGOP As Decimal, ByVal Original_ESP_CODIGOE As Decimal, ByVal Original_CIT_CODIGOC As Decimal, ByVal Original_MED_CODIGOM As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_REP_SECUENCIA,Decimal)
            If (Original_REP_MESH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_REP_MESH")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_REP_MESH,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_REP_FECHAH,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DUE_CODIGOD,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PAC_CODIGOP,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ESP_CODIGOE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CIT_CODIGOC,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MED_CODIGOM,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal REP_SECUENCIA As Decimal, ByVal REP_MESH As String, ByVal REP_FECHAH As Date, ByVal DUE_CODIGOD As Decimal, ByVal PAC_CODIGOP As Decimal, ByVal ESP_CODIGOE As Decimal, ByVal CIT_CODIGOC As Decimal, ByVal MED_CODIGOM As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(REP_SECUENCIA,Decimal)
            If (REP_MESH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("REP_MESH")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(REP_MESH,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(REP_FECHAH,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DUE_CODIGOD,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(PAC_CODIGOP,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ESP_CODIGOE,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(CIT_CODIGOC,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(MED_CODIGOM,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal REP_SECUENCIA As Decimal,  _
                    ByVal REP_MESH As String,  _
                    ByVal REP_FECHAH As Date,  _
                    ByVal DUE_CODIGOD As Decimal,  _
                    ByVal PAC_CODIGOP As Decimal,  _
                    ByVal ESP_CODIGOE As Decimal,  _
                    ByVal CIT_CODIGOC As Decimal,  _
                    ByVal MED_CODIGOM As Decimal,  _
                    ByVal Original_REP_SECUENCIA As Decimal,  _
                    ByVal Original_REP_MESH As String,  _
                    ByVal Original_REP_FECHAH As Date,  _
                    ByVal Original_DUE_CODIGOD As Decimal,  _
                    ByVal Original_PAC_CODIGOP As Decimal,  _
                    ByVal Original_ESP_CODIGOE As Decimal,  _
                    ByVal Original_CIT_CODIGOC As Decimal,  _
                    ByVal Original_MED_CODIGOM As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(REP_SECUENCIA,Decimal)
            If (REP_MESH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("REP_MESH")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(REP_MESH,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REP_FECHAH,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DUE_CODIGOD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PAC_CODIGOP,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ESP_CODIGOE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CIT_CODIGOC,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MED_CODIGOM,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_REP_SECUENCIA,Decimal)
            If (Original_REP_MESH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_REP_MESH")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_REP_MESH,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_REP_FECHAH,Date)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DUE_CODIGOD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PAC_CODIGOP,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ESP_CODIGOE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CIT_CODIGOC,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_MED_CODIGOM,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal REP_MESH As String, ByVal DUE_CODIGOD As Decimal, ByVal PAC_CODIGOP As Decimal, ByVal ESP_CODIGOE As Decimal, ByVal CIT_CODIGOC As Decimal, ByVal MED_CODIGOM As Decimal, ByVal Original_REP_SECUENCIA As Decimal, ByVal Original_REP_MESH As String, ByVal Original_REP_FECHAH As Date, ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_PAC_CODIGOP As Decimal, ByVal Original_ESP_CODIGOE As Decimal, ByVal Original_CIT_CODIGOC As Decimal, ByVal Original_MED_CODIGOM As Decimal) As Integer
            Return Me.Update(Original_REP_SECUENCIA, REP_MESH, Original_REP_FECHAH, DUE_CODIGOD, PAC_CODIGOP, ESP_CODIGOE, CIT_CODIGOC, MED_CODIGOM, Original_REP_SECUENCIA, Original_REP_MESH, Original_REP_FECHAH, Original_DUE_CODIGOD, Original_PAC_CODIGOP, Original_ESP_CODIGOE, Original_CIT_CODIGOC, Original_MED_CODIGOM)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TEL_DUEÑOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TEL_DUEÑO"
            tableMapping.ColumnMappings.Add("DUE_CODIGOD", "DUE_CODIGOD")
            tableMapping.ColumnMappings.Add("TEDU_TEL", "TEDU_TEL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""TEL_DUEÑO"" WHERE ((""DUE_CODIGOD"" = :Original_DUE_CODIGOD) AND"& _ 
                " (""TEDU_TEL"" = :Original_TEDU_TEL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEDU_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TEDU_TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""TEL_DUEÑO"" (""DUE_CODIGOD"", ""TEDU_TEL"") VALUES (:DUE_CODIGOD, "& _ 
                ":TEDU_TEL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEDU_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TEDU_TEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""TEL_DUEÑO"" SET ""DUE_CODIGOD"" = :DUE_CODIGOD, ""TEDU_TEL"" = :TEDU_TE"& _ 
                "L WHERE ((""DUE_CODIGOD"" = :Original_DUE_CODIGOD) AND (""TEDU_TEL"" = :Original_TED"& _ 
                "U_TEL))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEDU_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TEDU_TEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DUE_CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DUE_CODIGOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEDU_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TEDU_TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DUE_CODIGOD, TEDU_TEL FROM ELIO.TEL_DUEÑO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.TEL_DUEÑODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.TEL_DUEÑODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.TEL_DUEÑODataTable = New databases.TEL_DUEÑODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.TEL_DUEÑODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "TEL_DUEÑO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_TEDU_TEL As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DUE_CODIGOD,Decimal)
            If (Original_TEDU_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TEDU_TEL")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TEDU_TEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DUE_CODIGOD As Decimal, ByVal TEDU_TEL As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(DUE_CODIGOD,Decimal)
            If (TEDU_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TEDU_TEL")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TEDU_TEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DUE_CODIGOD As Decimal, ByVal TEDU_TEL As String, ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_TEDU_TEL As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DUE_CODIGOD,Decimal)
            If (TEDU_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TEDU_TEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TEDU_TEL,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_DUE_CODIGOD,Decimal)
            If (Original_TEDU_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TEDU_TEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_TEDU_TEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_DUE_CODIGOD As Decimal, ByVal Original_TEDU_TEL As String) As Integer
            Return Me.Update(Original_DUE_CODIGOD, Original_TEDU_TEL, Original_DUE_CODIGOD, Original_TEDU_TEL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TEL_MÉDICOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TEL_MÉDICO"
            tableMapping.ColumnMappings.Add("MED_CODIGOM", "MED_CODIGOM")
            tableMapping.ColumnMappings.Add("TEME_TEL", "TEME_TEL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""TEL_MÉDICO"" WHERE ((""MED_CODIGOM"" = :Original_MED_CODIGOM) AN"& _ 
                "D (""TEME_TEL"" = :Original_TEME_TEL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEME_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TEME_TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""TEL_MÉDICO"" (""MED_CODIGOM"", ""TEME_TEL"") VALUES (:MED_CODIGOM,"& _ 
                " :TEME_TEL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEME_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TEME_TEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""TEL_MÉDICO"" SET ""MED_CODIGOM"" = :MED_CODIGOM, ""TEME_TEL"" = :TEME_T"& _ 
                "EL WHERE ((""MED_CODIGOM"" = :Original_MED_CODIGOM) AND (""TEME_TEL"" = :Original_TE"& _ 
                "ME_TEL))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEME_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TEME_TEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEME_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TEME_TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MED_CODIGOM, TEME_TEL FROM ELIO.TEL_MÉDICO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.TEL_MÉDICODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.TEL_MÉDICODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.TEL_MÉDICODataTable = New databases.TEL_MÉDICODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.TEL_MÉDICODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "TEL_MÉDICO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MED_CODIGOM As Decimal, ByVal Original_TEME_TEL As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MED_CODIGOM,Decimal)
            If (Original_TEME_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TEME_TEL")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TEME_TEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MED_CODIGOM As Decimal, ByVal TEME_TEL As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MED_CODIGOM,Decimal)
            If (TEME_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TEME_TEL")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TEME_TEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MED_CODIGOM As Decimal, ByVal TEME_TEL As String, ByVal Original_MED_CODIGOM As Decimal, ByVal Original_TEME_TEL As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MED_CODIGOM,Decimal)
            If (TEME_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TEME_TEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TEME_TEL,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_MED_CODIGOM,Decimal)
            If (Original_TEME_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TEME_TEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_TEME_TEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_MED_CODIGOM As Decimal, ByVal Original_TEME_TEL As String) As Integer
            Return Me.Update(Original_MED_CODIGOM, Original_TEME_TEL, Original_MED_CODIGOM, Original_TEME_TEL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TURNOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TURNOS"
            tableMapping.ColumnMappings.Add("TUR_CODIGOT", "TUR_CODIGOT")
            tableMapping.ColumnMappings.Add("TUR_HORAI", "TUR_HORAI")
            tableMapping.ColumnMappings.Add("TUR_HORAF", "TUR_HORAF")
            tableMapping.ColumnMappings.Add("TUR_TIPO", "TUR_TIPO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""TURNOS"" WHERE ((""TUR_CODIGOT"" = :Original_TUR_CODIGOT) AND ("""& _ 
                "TUR_HORAI"" = :Original_TUR_HORAI) AND (""TUR_HORAF"" = :Original_TUR_HORAF) AND ("""& _ 
                "TUR_TIPO"" = :Original_TUR_TIPO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUR_CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TUR_CODIGOT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUR_HORAI"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUR_HORAI"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUR_HORAF"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUR_HORAF"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUR_TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TUR_TIPO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""TURNOS"" (""TUR_CODIGOT"", ""TUR_HORAI"", ""TUR_HORAF"", ""TUR_TIPO"")"& _ 
                " VALUES (:TUR_CODIGOT, :TUR_HORAI, :TUR_HORAF, :TUR_TIPO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUR_CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TUR_CODIGOT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUR_HORAI"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUR_HORAI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUR_HORAF"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUR_HORAF"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUR_TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TUR_TIPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""TURNOS"" SET ""TUR_CODIGOT"" = :TUR_CODIGOT, ""TUR_HORAI"" = :TUR_HORAI"& _ 
                ", ""TUR_HORAF"" = :TUR_HORAF, ""TUR_TIPO"" = :TUR_TIPO WHERE ((""TUR_CODIGOT"" = :Orig"& _ 
                "inal_TUR_CODIGOT) AND (""TUR_HORAI"" = :Original_TUR_HORAI) AND (""TUR_HORAF"" = :Or"& _ 
                "iginal_TUR_HORAF) AND (""TUR_TIPO"" = :Original_TUR_TIPO))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUR_CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TUR_CODIGOT"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUR_HORAI"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUR_HORAI"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUR_HORAF"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUR_HORAF"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUR_TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TUR_TIPO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUR_CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TUR_CODIGOT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUR_HORAI"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUR_HORAI"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUR_HORAF"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUR_HORAF"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUR_TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "TUR_TIPO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TUR_CODIGOT, TUR_HORAI, TUR_HORAF, TUR_TIPO FROM ELIO.TURNOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.TURNOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.TURNOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.TURNOSDataTable = New databases.TURNOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.TURNOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "TURNOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TUR_CODIGOT As Decimal, ByVal Original_TUR_HORAI As Date, ByVal Original_TUR_HORAF As Date, ByVal Original_TUR_TIPO As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TUR_CODIGOT,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TUR_HORAI,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TUR_HORAF,Date)
            If (Original_TUR_TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TUR_TIPO")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TUR_TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TUR_CODIGOT As Decimal, ByVal TUR_HORAI As Date, ByVal TUR_HORAF As Date, ByVal TUR_TIPO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(TUR_CODIGOT,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(TUR_HORAI,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(TUR_HORAF,Date)
            If (TUR_TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TUR_TIPO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TUR_TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TUR_CODIGOT As Decimal, ByVal TUR_HORAI As Date, ByVal TUR_HORAF As Date, ByVal TUR_TIPO As String, ByVal Original_TUR_CODIGOT As Decimal, ByVal Original_TUR_HORAI As Date, ByVal Original_TUR_HORAF As Date, ByVal Original_TUR_TIPO As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TUR_CODIGOT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TUR_HORAI,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TUR_HORAF,Date)
            If (TUR_TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TUR_TIPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TUR_TIPO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_TUR_CODIGOT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TUR_HORAI,Date)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_TUR_HORAF,Date)
            If (Original_TUR_TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TUR_TIPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TUR_TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TUR_HORAI As Date, ByVal TUR_HORAF As Date, ByVal TUR_TIPO As String, ByVal Original_TUR_CODIGOT As Decimal, ByVal Original_TUR_HORAI As Date, ByVal Original_TUR_HORAF As Date, ByVal Original_TUR_TIPO As String) As Integer
            Return Me.Update(Original_TUR_CODIGOT, TUR_HORAI, TUR_HORAF, TUR_TIPO, Original_TUR_CODIGOT, Original_TUR_HORAI, Original_TUR_HORAF, Original_TUR_TIPO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TURNOXMÉDICOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TURNOXMÉDICO"
            tableMapping.ColumnMappings.Add("MED_CODIGOM", "MED_CODIGOM")
            tableMapping.ColumnMappings.Add("TUME_FECHA", "TUME_FECHA")
            tableMapping.ColumnMappings.Add("TUR_CODIGOT", "TUR_CODIGOT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""TURNOXMÉDICO"" WHERE ((""MED_CODIGOM"" = :Original_MED_CODIGOM) "& _ 
                "AND (""TUME_FECHA"" = :Original_TUME_FECHA) AND (""TUR_CODIGOT"" = :Original_TUR_COD"& _ 
                "IGOT))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUME_FECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUME_FECHA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUR_CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TUR_CODIGOT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""TURNOXMÉDICO"" (""MED_CODIGOM"", ""TUME_FECHA"", ""TUR_CODIGOT"") VA"& _ 
                "LUES (:MED_CODIGOM, :TUME_FECHA, :TUR_CODIGOT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUME_FECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUME_FECHA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUR_CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TUR_CODIGOT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""TURNOXMÉDICO"" SET ""MED_CODIGOM"" = :MED_CODIGOM, ""TUME_FECHA"" = :TU"& _ 
                "ME_FECHA, ""TUR_CODIGOT"" = :TUR_CODIGOT WHERE ((""MED_CODIGOM"" = :Original_MED_COD"& _ 
                "IGOM) AND (""TUME_FECHA"" = :Original_TUME_FECHA) AND (""TUR_CODIGOT"" = :Original_T"& _ 
                "UR_CODIGOT))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUME_FECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUME_FECHA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TUR_CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TUR_CODIGOT"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MED_CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MED_CODIGOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUME_FECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "TUME_FECHA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TUR_CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TUR_CODIGOT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MED_CODIGOM, TUME_FECHA, TUR_CODIGOT FROM ELIO.TURNOXMÉDICO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.TURNOXMÉDICODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.TURNOXMÉDICODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.TURNOXMÉDICODataTable = New databases.TURNOXMÉDICODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.TURNOXMÉDICODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "TURNOXMÉDICO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MED_CODIGOM As Decimal, ByVal Original_TUME_FECHA As Date, ByVal Original_TUR_CODIGOT As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MED_CODIGOM,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TUME_FECHA,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TUR_CODIGOT,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MED_CODIGOM As Decimal, ByVal TUME_FECHA As Date, ByVal TUR_CODIGOT As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MED_CODIGOM,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(TUME_FECHA,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(TUR_CODIGOT,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MED_CODIGOM As Decimal, ByVal TUME_FECHA As Date, ByVal TUR_CODIGOT As Decimal, ByVal Original_MED_CODIGOM As Decimal, ByVal Original_TUME_FECHA As Date, ByVal Original_TUR_CODIGOT As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MED_CODIGOM,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TUME_FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TUR_CODIGOT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MED_CODIGOM,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_TUME_FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TUR_CODIGOT,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_MED_CODIGOM As Decimal, ByVal Original_TUME_FECHA As Date, ByVal Original_TUR_CODIGOT As Decimal) As Integer
            Return Me.Update(Original_MED_CODIGOM, Original_TUME_FECHA, Original_TUR_CODIGOT, Original_MED_CODIGOM, Original_TUME_FECHA, Original_TUR_CODIGOT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class USUARIOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "USUARIOS"
            tableMapping.ColumnMappings.Add("USU_USUARIO", "USU_USUARIO")
            tableMapping.ColumnMappings.Add("USU_NOMBRE1", "USU_NOMBRE1")
            tableMapping.ColumnMappings.Add("USU_NOMBRE2", "USU_NOMBRE2")
            tableMapping.ColumnMappings.Add("USU_APELLIDO1", "USU_APELLIDO1")
            tableMapping.ColumnMappings.Add("USU_APELLIDO2", "USU_APELLIDO2")
            tableMapping.ColumnMappings.Add("USU_TEL", "USU_TEL")
            tableMapping.ColumnMappings.Add("USU_DIRECCION", "USU_DIRECCION")
            tableMapping.ColumnMappings.Add("USU_CONTRASEÑA", "USU_CONTRASEÑA")
            tableMapping.ColumnMappings.Add("USU_TIPO", "USU_TIPO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ELIO"".""USUARIOS"" WHERE ((""USU_USUARIO"" = :Original_USU_USUARIO) AND "& _ 
                "(""USU_NOMBRE1"" = :Original_USU_NOMBRE1) AND (""USU_NOMBRE2"" = :Original_USU_NOMBR"& _ 
                "E2) AND (""USU_APELLIDO1"" = :Original_USU_APELLIDO1) AND (""USU_APELLIDO2"" = :Orig"& _ 
                "inal_USU_APELLIDO2) AND (""USU_TEL"" = :Original_USU_TEL) AND (""USU_DIRECCION"" = :"& _ 
                "Original_USU_DIRECCION) AND (""USU_CONTRASEÑA"" = :Original_USU_CONTRASEÑA) AND ("""& _ 
                "USU_TIPO"" = :Original_USU_TIPO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_NOMBRE1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_NOMBRE2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_APELLIDO1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_APELLIDO2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "USU_TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "USU_DIRECCION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_CONTRASEÑA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_CONTRASEÑA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "USU_TIPO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ELIO"".""USUARIOS"" (""USU_USUARIO"", ""USU_NOMBRE1"", ""USU_NOMBRE2"", ""USU_"& _ 
                "APELLIDO1"", ""USU_APELLIDO2"", ""USU_TEL"", ""USU_DIRECCION"", ""USU_CONTRASEÑA"", ""USU_"& _ 
                "TIPO"") VALUES (:USU_USUARIO, :USU_NOMBRE1, :USU_NOMBRE2, :USU_APELLIDO1, :USU_AP"& _ 
                "ELLIDO2, :USU_TEL, :USU_DIRECCION, :USU_CONTRASEÑA, :USU_TIPO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_USUARIO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_NOMBRE1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_NOMBRE2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_APELLIDO1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_APELLIDO2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "USU_TEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "USU_DIRECCION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_CONTRASEÑA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_CONTRASEÑA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "USU_TIPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ELIO"".""USUARIOS"" SET ""USU_USUARIO"" = :USU_USUARIO, ""USU_NOMBRE1"" = :USU_N"& _ 
                "OMBRE1, ""USU_NOMBRE2"" = :USU_NOMBRE2, ""USU_APELLIDO1"" = :USU_APELLIDO1, ""USU_APE"& _ 
                "LLIDO2"" = :USU_APELLIDO2, ""USU_TEL"" = :USU_TEL, ""USU_DIRECCION"" = :USU_DIRECCION"& _ 
                ", ""USU_CONTRASEÑA"" = :USU_CONTRASEÑA, ""USU_TIPO"" = :USU_TIPO WHERE ((""USU_USUARI"& _ 
                "O"" = :Original_USU_USUARIO) AND (""USU_NOMBRE1"" = :Original_USU_NOMBRE1) AND (""US"& _ 
                "U_NOMBRE2"" = :Original_USU_NOMBRE2) AND (""USU_APELLIDO1"" = :Original_USU_APELLID"& _ 
                "O1) AND (""USU_APELLIDO2"" = :Original_USU_APELLIDO2) AND (""USU_TEL"" = :Original_U"& _ 
                "SU_TEL) AND (""USU_DIRECCION"" = :Original_USU_DIRECCION) AND (""USU_CONTRASEÑA"" = "& _ 
                ":Original_USU_CONTRASEÑA) AND (""USU_TIPO"" = :Original_USU_TIPO))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_USUARIO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_NOMBRE1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_NOMBRE2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_APELLIDO1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_APELLIDO2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "USU_TEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "USU_DIRECCION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_CONTRASEÑA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_CONTRASEÑA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USU_TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "USU_TIPO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_NOMBRE1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_NOMBRE2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_APELLIDO1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_APELLIDO2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "USU_TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 200
            param.IsNullable = true
            param.SourceColumn = "USU_DIRECCION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_CONTRASEÑA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "USU_CONTRASEÑA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USU_TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "USU_TIPO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.Proyecto.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(3) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT USU_USUARIO, USU_NOMBRE1, USU_NOMBRE2, USU_APELLIDO1, USU_APELLIDO2, USU_T"& _ 
                "EL, USU_DIRECCION, USU_CONTRASEÑA, USU_TIPO FROM ELIO.USUARIOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "ELIO.U_USUARIO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CONTRASEÑA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "ELIO.D_USUARIO"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "ELIO.I_USUARIO"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CONTRASEÑA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As databases.USUARIOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As databases.USUARIOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As databases.USUARIOSDataTable = New databases.USUARIOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As databases.USUARIOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As databases) As Integer
            Return Me.Adapter.Update(dataSet, "USUARIOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_USU_USUARIO As String, ByVal Original_USU_NOMBRE1 As String, ByVal Original_USU_NOMBRE2 As String, ByVal Original_USU_APELLIDO1 As String, ByVal Original_USU_APELLIDO2 As String, ByVal Original_USU_TEL As String, ByVal Original_USU_DIRECCION As String, ByVal Original_USU_CONTRASEÑA As String, ByVal Original_USU_TIPO As String) As Integer
            If (Original_USU_USUARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_USUARIO")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_USU_USUARIO,String)
            End If
            If (Original_USU_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_NOMBRE1")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_USU_NOMBRE1,String)
            End If
            If (Original_USU_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_NOMBRE2")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_USU_NOMBRE2,String)
            End If
            If (Original_USU_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_APELLIDO1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_USU_APELLIDO1,String)
            End If
            If (Original_USU_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_APELLIDO2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_USU_APELLIDO2,String)
            End If
            If (Original_USU_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_TEL")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_USU_TEL,String)
            End If
            If (Original_USU_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_DIRECCION")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_USU_DIRECCION,String)
            End If
            If (Original_USU_CONTRASEÑA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_CONTRASEÑA")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_USU_CONTRASEÑA,String)
            End If
            If (Original_USU_TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_TIPO")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_USU_TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal USU_USUARIO As String, ByVal USU_NOMBRE1 As String, ByVal USU_NOMBRE2 As String, ByVal USU_APELLIDO1 As String, ByVal USU_APELLIDO2 As String, ByVal USU_TEL As String, ByVal USU_DIRECCION As String, ByVal USU_CONTRASEÑA As String, ByVal USU_TIPO As String) As Integer
            If (USU_USUARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_USUARIO")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(USU_USUARIO,String)
            End If
            If (USU_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_NOMBRE1")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(USU_NOMBRE1,String)
            End If
            If (USU_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_NOMBRE2")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(USU_NOMBRE2,String)
            End If
            If (USU_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_APELLIDO1")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(USU_APELLIDO1,String)
            End If
            If (USU_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_APELLIDO2")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(USU_APELLIDO2,String)
            End If
            If (USU_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_TEL")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(USU_TEL,String)
            End If
            If (USU_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_DIRECCION")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(USU_DIRECCION,String)
            End If
            If (USU_CONTRASEÑA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_CONTRASEÑA")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(USU_CONTRASEÑA,String)
            End If
            If (USU_TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_TIPO")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(USU_TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal USU_USUARIO As String,  _
                    ByVal USU_NOMBRE1 As String,  _
                    ByVal USU_NOMBRE2 As String,  _
                    ByVal USU_APELLIDO1 As String,  _
                    ByVal USU_APELLIDO2 As String,  _
                    ByVal USU_TEL As String,  _
                    ByVal USU_DIRECCION As String,  _
                    ByVal USU_CONTRASEÑA As String,  _
                    ByVal USU_TIPO As String,  _
                    ByVal Original_USU_USUARIO As String,  _
                    ByVal Original_USU_NOMBRE1 As String,  _
                    ByVal Original_USU_NOMBRE2 As String,  _
                    ByVal Original_USU_APELLIDO1 As String,  _
                    ByVal Original_USU_APELLIDO2 As String,  _
                    ByVal Original_USU_TEL As String,  _
                    ByVal Original_USU_DIRECCION As String,  _
                    ByVal Original_USU_CONTRASEÑA As String,  _
                    ByVal Original_USU_TIPO As String) As Integer
            If (USU_USUARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_USUARIO")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(USU_USUARIO,String)
            End If
            If (USU_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_NOMBRE1")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(USU_NOMBRE1,String)
            End If
            If (USU_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_NOMBRE2")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(USU_NOMBRE2,String)
            End If
            If (USU_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_APELLIDO1")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(USU_APELLIDO1,String)
            End If
            If (USU_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_APELLIDO2")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(USU_APELLIDO2,String)
            End If
            If (USU_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_TEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(USU_TEL,String)
            End If
            If (USU_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_DIRECCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(USU_DIRECCION,String)
            End If
            If (USU_CONTRASEÑA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_CONTRASEÑA")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(USU_CONTRASEÑA,String)
            End If
            If (USU_TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USU_TIPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(USU_TIPO,String)
            End If
            If (Original_USU_USUARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_USUARIO")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_USU_USUARIO,String)
            End If
            If (Original_USU_NOMBRE1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_NOMBRE1")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_USU_NOMBRE1,String)
            End If
            If (Original_USU_NOMBRE2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_NOMBRE2")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_USU_NOMBRE2,String)
            End If
            If (Original_USU_APELLIDO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_APELLIDO1")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_USU_APELLIDO1,String)
            End If
            If (Original_USU_APELLIDO2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_APELLIDO2")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_USU_APELLIDO2,String)
            End If
            If (Original_USU_TEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_TEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_USU_TEL,String)
            End If
            If (Original_USU_DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_DIRECCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_USU_DIRECCION,String)
            End If
            If (Original_USU_CONTRASEÑA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_CONTRASEÑA")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_USU_CONTRASEÑA,String)
            End If
            If (Original_USU_TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USU_TIPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_USU_TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal USU_NOMBRE1 As String,  _
                    ByVal USU_NOMBRE2 As String,  _
                    ByVal USU_APELLIDO1 As String,  _
                    ByVal USU_APELLIDO2 As String,  _
                    ByVal USU_TEL As String,  _
                    ByVal USU_DIRECCION As String,  _
                    ByVal USU_CONTRASEÑA As String,  _
                    ByVal USU_TIPO As String,  _
                    ByVal Original_USU_USUARIO As String,  _
                    ByVal Original_USU_NOMBRE1 As String,  _
                    ByVal Original_USU_NOMBRE2 As String,  _
                    ByVal Original_USU_APELLIDO1 As String,  _
                    ByVal Original_USU_APELLIDO2 As String,  _
                    ByVal Original_USU_TEL As String,  _
                    ByVal Original_USU_DIRECCION As String,  _
                    ByVal Original_USU_CONTRASEÑA As String,  _
                    ByVal Original_USU_TIPO As String) As Integer
            Return Me.Update(Original_USU_USUARIO, USU_NOMBRE1, USU_NOMBRE2, USU_APELLIDO1, USU_APELLIDO2, USU_TEL, USU_DIRECCION, USU_CONTRASEÑA, USU_TIPO, Original_USU_USUARIO, Original_USU_NOMBRE1, Original_USU_NOMBRE2, Original_USU_APELLIDO1, Original_USU_APELLIDO2, Original_USU_TEL, Original_USU_DIRECCION, Original_USU_CONTRASEÑA, Original_USU_TIPO)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Actualizar_USUARIO(ByVal USUARIO As String, ByVal NOMBRE1 As String, ByVal NOMBRE2 As String, ByVal APELLIDO1 As String, ByVal APELLIDO2 As String, ByVal TEL As String, ByVal DIRECCION As String, ByVal CONTRASEÑA As String, ByVal TIPO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(1)
            If (USUARIO Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(USUARIO,String)
            End If
            If (NOMBRE1 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE1,String)
            End If
            If (NOMBRE2 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(NOMBRE2,String)
            End If
            If (APELLIDO1 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(APELLIDO1,String)
            End If
            If (APELLIDO2 Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(APELLIDO2,String)
            End If
            If (TEL Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(TEL,String)
            End If
            If (DIRECCION Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(DIRECCION,String)
            End If
            If (CONTRASEÑA Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(CONTRASEÑA,String)
            End If
            If (TIPO Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Eliminar_USUARIO(ByVal USUARIO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(2)
            If (USUARIO Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(USUARIO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Insertar_USUARIO(ByVal USUARIO As String, ByVal NOMBRE1 As String, ByVal NOMBRE2 As String, ByVal APELLIDO1 As String, ByVal APELLIDO2 As String, ByVal TEL As String, ByVal DIRECCION As String, ByVal CONTRASEÑA As String, ByVal TIPO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(3)
            If (USUARIO Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(USUARIO,String)
            End If
            If (NOMBRE1 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE1,String)
            End If
            If (NOMBRE2 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(NOMBRE2,String)
            End If
            If (APELLIDO1 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(APELLIDO1,String)
            End If
            If (APELLIDO2 Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(APELLIDO2,String)
            End If
            If (TEL Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(TEL,String)
            End If
            If (DIRECCION Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(DIRECCION,String)
            End If
            If (CONTRASEÑA Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(CONTRASEÑA,String)
            End If
            If (TIPO Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class QueriesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private _commandCollection() As Global.System.Data.IDbCommand
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.IDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.IDbCommand(45) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(0),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(0),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_CIRUGIA"
            CType(Me._commandCollection(0),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(1),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(1),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_CITA"
            CType(Me._commandCollection(1),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(1),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(2),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(2),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_DUEÑO"
            CType(Me._commandCollection(2),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(3) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(3),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(3),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_ENFERMEDAD"
            CType(Me._commandCollection(3),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(4) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(4),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(4),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_ENFERMEDADXRAZA"
            CType(Me._commandCollection(4),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(4),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(4),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(5) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(5),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(5),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_ESPECIE"
            CType(Me._commandCollection(5),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(5),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(6) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(6),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(6),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_MEDICINA"
            CType(Me._commandCollection(6),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(6),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(7) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(7),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(7),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_MEDICINAXENFERMEDAD"
            CType(Me._commandCollection(7),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(7),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(7),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(8) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(8),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(8),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_MÉDICO"
            CType(Me._commandCollection(8),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(8),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(9) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(9),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(9),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_PACIENTE"
            CType(Me._commandCollection(9),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(9),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(10) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(10),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(10),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_RAZA"
            CType(Me._commandCollection(10),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(10),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(11) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(11),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(11),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_TEL_MÉDICO"
            CType(Me._commandCollection(11),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(12) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(12),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(12),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_TURNO"
            CType(Me._commandCollection(12),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(12),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(13) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(13),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(13),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_TURNOXMÉDICO"
            CType(Me._commandCollection(13),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(13),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FECHAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(13),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(13),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(14) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(14),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(14),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.D_USUARIO"
            CType(Me._commandCollection(14),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(14),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(15) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(15),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(15),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_CIRUGIA"
            CType(Me._commandCollection(15),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DURACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(15),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(15),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "RIESGO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(15),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(15),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ANESTESÍA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(15),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(16) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(16),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(16),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_CITA"
            CType(Me._commandCollection(16),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CALENDARIZADO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(16),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(16),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOCI"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(16),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "HECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(16),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(16),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(17) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(17),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(17),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_DUEÑO"
            CType(Me._commandCollection(17),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(17),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(17),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(17),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(17),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IDENTIFICACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(17),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(17),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(18) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(18),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(18),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_ENFERMEDAD"
            CType(Me._commandCollection(18),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENFERMEDAD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(18),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(19) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(19),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(19),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_ENFERMEDADXRAZA"
            CType(Me._commandCollection(19),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(19),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(19),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(20) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(20),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(20),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_ESPECIE"
            CType(Me._commandCollection(20),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESPECIE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(20),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FAMILIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(20),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(21) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(21),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(21),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_MEDICINA"
            CType(Me._commandCollection(21),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(21),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOSIS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(21),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "INTERVALO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(21),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(22) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(22),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(22),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_MEDICINAXENFERMEDAD"
            CType(Me._commandCollection(22),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(22),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(22),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(23) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_MÉDICO"
            CType(Me._commandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "EMERGENCIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "INGRESO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(24) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(24),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(24),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_PACIENTE"
            CType(Me._commandCollection(24),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBREP"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(24),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(24),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(24),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(24),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FOTOP"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Blob
            param.Size = 65536
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(24),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FECHAI"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(24),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(25) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(25),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(25),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_RAZA"
            CType(Me._commandCollection(25),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "RAZA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(25),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(25),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(26) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(26),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(26),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_REPORTE"
            CType(Me._commandCollection(26),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FECHAH"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(26),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(26),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(26),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(26),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOCI"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(26),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(26),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(27) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(27),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(27),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_TEL_DUEÑO"
            CType(Me._commandCollection(27),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(27),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(28) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(28),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(28),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_TEL_MÉDICO"
            CType(Me._commandCollection(28),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(28),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(29) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(29),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(29),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_TURNO"
            CType(Me._commandCollection(29),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "HORAI"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(29),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "HORAF"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(29),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(29),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(30) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(30),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(30),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_TURNOXMÉDICO"
            CType(Me._commandCollection(30),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(30),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FECHAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(30),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(30),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(31) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.I_USUARIO"
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CONTRASEÑA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(32) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(32),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(32),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.LLENAR"
            CType(Me._commandCollection(32),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(33) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(33),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(33),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_CIRUGIA"
            CType(Me._commandCollection(33),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(33),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DURACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(33),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(33),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "RIESGO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(33),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(33),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ANESTESÍA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(33),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(34) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(34),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(34),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_CITA"
            CType(Me._commandCollection(34),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOC"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(34),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CALENDARIZADO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(34),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(34),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOCI"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(34),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "HECHA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(34),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DESCRIPCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(34),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(35) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_DUEÑO"
            CType(Me._commandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IDENTIFICACION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(36) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(36),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(36),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_ENFERMEDAD"
            CType(Me._commandCollection(36),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(36),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENFERMEDAD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(36),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(37) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(37),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(37),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_ESPECIE"
            CType(Me._commandCollection(37),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(37),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ESPECIE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(37),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FAMILIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(37),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(38) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(38),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(38),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_MEDICINA"
            CType(Me._commandCollection(38),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOME"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(38),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(38),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOSIS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(38),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "INTERVALO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(38),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(39) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_MÉDICO"
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "EMERGENCIA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "INGRESO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(40) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_PACIENTE"
            CType(Me._commandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBREP"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FOTOP"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Blob
            param.Size = 65536
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FECHAI"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(41) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(41),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(41),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_RAZA"
            CType(Me._commandCollection(41),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(41),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "RAZA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(41),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(41),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(42) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(42),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(42),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_TEL_DUEÑO"
            CType(Me._commandCollection(42),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(42),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(42),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TELN"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(42),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(43) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(43),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(43),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_TEL_MÉDICO"
            CType(Me._commandCollection(43),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(43),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(43),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TELN"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(43),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(44) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(44),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(44),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_TURNO"
            CType(Me._commandCollection(44),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODIGOT"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(44),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "HORAI"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(44),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "HORAF"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(44),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(44),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            Me._commandCollection(45) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection(Global.Proyecto.My.MySettings.Default.ConnectionString)
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandText = "ELIO.U_USUARIO"
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "USUARIO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO2"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DIRECCION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CONTRASEÑA"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TIPO"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 32767
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_CIRUGIA(ByVal CODIGOC As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(0),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOC.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOC.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_CITA(ByVal CODIGOC As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(1),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOC.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOC.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_DUEÑO(ByVal CODIGOD As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(2),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOD.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOD.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_ENFERMEDAD(ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(3),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_ENFERMEDADXRAZA(ByVal CODIGOE As Global.System.Nullable(Of Decimal), ByVal CODIGOR As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(4),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CODIGOR.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOR.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_ESPECIE(ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(5),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_MEDICINA(ByVal CODIGOME As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(6),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOME.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOME.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_MEDICINAXENFERMEDAD(ByVal CODIGOME As Global.System.Nullable(Of Decimal), ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(7),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOME.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOME.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CODIGOE.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_MÉDICO(ByVal CODIGOM As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(8),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOM.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_PACIENTE(ByVal CODIGOP As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(9),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOP.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOP.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_RAZA(ByVal CODIGOR As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(10),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOR.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOR.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_TEL_MÉDICO() As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(11),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_TURNO(ByVal CODIGOT As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(12),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOT.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_TURNOXMÉDICO(ByVal CODIGOM As Global.System.Nullable(Of Decimal), ByVal FECHAT As Global.System.Nullable(Of Date), ByVal CODIGOT As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(13),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOM.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (FECHAT.HasValue = true) Then
                command.Parameters(1).Value = CType(FECHAT.Value,Date)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CODIGOT.HasValue = true) Then
                command.Parameters(2).Value = CType(CODIGOT.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function D_USUARIO(ByVal USUARIO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(14),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (USUARIO Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(USUARIO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_CIRUGIA(ByVal DURACION As String, ByVal DESCRIPCION As String, ByVal RIESGO As String, ByVal NOMBRE As String, ByVal ANESTESÍA As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(15),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (DURACION Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(DURACION,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(DESCRIPCION,String)
            End If
            If (RIESGO Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(RIESGO,String)
            End If
            If (NOMBRE Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(NOMBRE,String)
            End If
            If (ANESTESÍA Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(ANESTESÍA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_CITA(ByVal CALENDARIZADO As Global.System.Nullable(Of Date), ByVal CODIGOP As Global.System.Nullable(Of Decimal), ByVal CODIGOCI As Global.System.Nullable(Of Decimal), ByVal HECHA As Global.System.Nullable(Of Date), ByVal DESCRIPCION As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(16),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CALENDARIZADO.HasValue = true) Then
                command.Parameters(0).Value = CType(CALENDARIZADO.Value,Date)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CODIGOP.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOP.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CODIGOCI.HasValue = true) Then
                command.Parameters(2).Value = CType(CODIGOCI.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (HECHA.HasValue = true) Then
                command.Parameters(3).Value = CType(HECHA.Value,Date)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DESCRIPCION Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(DESCRIPCION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_DUEÑO(ByVal NOMBRE1 As String, ByVal NOMBRE2 As String, ByVal APELLIDO1 As String, ByVal APELLIDO2 As String, ByVal IDENTIFICACION As String, ByVal DIRECCION As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(17),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (NOMBRE1 Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(NOMBRE1,String)
            End If
            If (NOMBRE2 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE2,String)
            End If
            If (APELLIDO1 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(APELLIDO1,String)
            End If
            If (APELLIDO2 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(APELLIDO2,String)
            End If
            If (IDENTIFICACION Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(IDENTIFICACION,String)
            End If
            If (DIRECCION Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(DIRECCION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_ENFERMEDAD(ByVal ENFERMEDAD As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(18),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (ENFERMEDAD Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(ENFERMEDAD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_ENFERMEDADXRAZA(ByVal CODIGOE As Global.System.Nullable(Of Decimal), ByVal CODIGOR As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(19),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CODIGOR.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOR.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_ESPECIE(ByVal ESPECIE As String, ByVal FAMILIA As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(20),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (ESPECIE Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(ESPECIE,String)
            End If
            If (FAMILIA Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(FAMILIA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_MEDICINA(ByVal NOMBRE As String, ByVal DOSIS As String, ByVal INTERVALO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(21),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (NOMBRE Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(NOMBRE,String)
            End If
            If (DOSIS Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(DOSIS,String)
            End If
            If (INTERVALO Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(INTERVALO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_MEDICINAXENFERMEDAD(ByVal CODIGOME As Global.System.Nullable(Of Decimal), ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(22),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOME.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOME.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CODIGOE.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_MÉDICO(ByVal NOMBRE1 As String, ByVal NOMBRE2 As String, ByVal APELLIDO1 As String, ByVal APELLIDO2 As String, ByVal DIRECCION As String, ByVal EMERGENCIA As String, ByVal INGRESO As Global.System.Nullable(Of Date)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(23),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (NOMBRE1 Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(NOMBRE1,String)
            End If
            If (NOMBRE2 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE2,String)
            End If
            If (APELLIDO1 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(APELLIDO1,String)
            End If
            If (APELLIDO2 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(APELLIDO2,String)
            End If
            If (DIRECCION Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(DIRECCION,String)
            End If
            If (EMERGENCIA Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(EMERGENCIA,String)
            End If
            If (INGRESO.HasValue = true) Then
                command.Parameters(6).Value = CType(INGRESO.Value,Date)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_PACIENTE(ByVal NOMBREP As String, ByVal CODIGOR As Global.System.Nullable(Of Decimal), ByVal CODIGOD As Global.System.Nullable(Of Decimal), ByVal CODIGOM As Global.System.Nullable(Of Decimal), ByVal FOTOP As Object, ByVal FECHAI As Global.System.Nullable(Of Date)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(24),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (NOMBREP Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(NOMBREP,String)
            End If
            If (CODIGOR.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOR.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CODIGOD.HasValue = true) Then
                command.Parameters(2).Value = CType(CODIGOD.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (CODIGOM.HasValue = true) Then
                command.Parameters(3).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FOTOP Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(FOTOP,Object)
            End If
            If (FECHAI.HasValue = true) Then
                command.Parameters(5).Value = CType(FECHAI.Value,Date)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_RAZA(ByVal RAZA As String, ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(25),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (RAZA Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(RAZA,String)
            End If
            If (CODIGOE.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_REPORTE(ByVal FECHAH As Global.System.Nullable(Of Date), ByVal CODIGOD As Global.System.Nullable(Of Decimal), ByVal CODIGOP As Global.System.Nullable(Of Decimal), ByVal CODIGOE As Global.System.Nullable(Of Decimal), ByVal CODIGOCI As Global.System.Nullable(Of Decimal), ByVal CODIGOM As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(26),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (FECHAH.HasValue = true) Then
                command.Parameters(0).Value = CType(FECHAH.Value,Date)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CODIGOD.HasValue = true) Then
                command.Parameters(1).Value = CType(CODIGOD.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CODIGOP.HasValue = true) Then
                command.Parameters(2).Value = CType(CODIGOP.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (CODIGOE.HasValue = true) Then
                command.Parameters(3).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CODIGOCI.HasValue = true) Then
                command.Parameters(4).Value = CType(CODIGOCI.Value,Decimal)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CODIGOM.HasValue = true) Then
                command.Parameters(5).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_TEL_DUEÑO(ByVal TEL As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(27),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (TEL Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(TEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_TEL_MÉDICO(ByVal TEL As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(28),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (TEL Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(TEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_TURNO(ByVal HORAI As Global.System.Nullable(Of Date), ByVal HORAF As Global.System.Nullable(Of Date), ByVal TIPO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(29),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (HORAI.HasValue = true) Then
                command.Parameters(0).Value = CType(HORAI.Value,Date)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (HORAF.HasValue = true) Then
                command.Parameters(1).Value = CType(HORAF.Value,Date)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (TIPO Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_TURNOXMÉDICO(ByVal CODIGOM As Global.System.Nullable(Of Decimal), ByVal FECHAT As Global.System.Nullable(Of Date), ByVal CODIGOT As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(30),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOM.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (FECHAT.HasValue = true) Then
                command.Parameters(1).Value = CType(FECHAT.Value,Date)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CODIGOT.HasValue = true) Then
                command.Parameters(2).Value = CType(CODIGOT.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function I_USUARIO(ByVal USUARIO As String, ByVal NOMBRE1 As String, ByVal NOMBRE2 As String, ByVal APELLIDO1 As String, ByVal APELLIDO2 As String, ByVal TEL As String, ByVal DIRECCION As String, ByVal CONTRASEÑA As String, ByVal TIPO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(31),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (USUARIO Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(USUARIO,String)
            End If
            If (NOMBRE1 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE1,String)
            End If
            If (NOMBRE2 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(NOMBRE2,String)
            End If
            If (APELLIDO1 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(APELLIDO1,String)
            End If
            If (APELLIDO2 Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(APELLIDO2,String)
            End If
            If (TEL Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(TEL,String)
            End If
            If (DIRECCION Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(DIRECCION,String)
            End If
            If (CONTRASEÑA Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(CONTRASEÑA,String)
            End If
            If (TIPO Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function LLENAR() As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(32),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_CIRUGIA(ByVal CODIGOC As Global.System.Nullable(Of Decimal), ByVal DURACION As String, ByVal DESCRIPCION As String, ByVal RIESGO As String, ByVal NOMBRE As String, ByVal ANESTESÍA As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(33),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOC.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOC.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DURACION Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(DURACION,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(DESCRIPCION,String)
            End If
            If (RIESGO Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(RIESGO,String)
            End If
            If (NOMBRE Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(NOMBRE,String)
            End If
            If (ANESTESÍA Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(ANESTESÍA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_CITA(ByVal CODIGOC As Global.System.Nullable(Of Decimal), ByVal CALENDARIZADO As Global.System.Nullable(Of Date), ByVal CODIGOP As Global.System.Nullable(Of Decimal), ByVal CODIGOCI As Global.System.Nullable(Of Decimal), ByVal HECHA As Global.System.Nullable(Of Date), ByVal DESCRIPCION As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(34),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOC.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOC.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CALENDARIZADO.HasValue = true) Then
                command.Parameters(1).Value = CType(CALENDARIZADO.Value,Date)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CODIGOP.HasValue = true) Then
                command.Parameters(2).Value = CType(CODIGOP.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (CODIGOCI.HasValue = true) Then
                command.Parameters(3).Value = CType(CODIGOCI.Value,Decimal)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (HECHA.HasValue = true) Then
                command.Parameters(4).Value = CType(HECHA.Value,Date)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DESCRIPCION Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(DESCRIPCION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_DUEÑO(ByVal CODIGOD As Global.System.Nullable(Of Decimal), ByVal NOMBRE1 As String, ByVal NOMBRE2 As String, ByVal APELLIDO1 As String, ByVal APELLIDO2 As String, ByVal IDENTIFICACION As String, ByVal DIRECCION As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(35),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOD.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOD.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (NOMBRE1 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE1,String)
            End If
            If (NOMBRE2 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(NOMBRE2,String)
            End If
            If (APELLIDO1 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(APELLIDO1,String)
            End If
            If (APELLIDO2 Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(APELLIDO2,String)
            End If
            If (IDENTIFICACION Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(IDENTIFICACION,String)
            End If
            If (DIRECCION Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(DIRECCION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_ENFERMEDAD(ByVal CODIGOE As Global.System.Nullable(Of Decimal), ByVal ENFERMEDAD As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(36),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ENFERMEDAD Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(ENFERMEDAD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_ESPECIE(ByVal CODIGOE As Global.System.Nullable(Of Decimal), ByVal ESPECIE As String, ByVal FAMILIA As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(37),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOE.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ESPECIE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(ESPECIE,String)
            End If
            If (FAMILIA Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(FAMILIA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_MEDICINA(ByVal CODIGOME As Global.System.Nullable(Of Decimal), ByVal NOMBRE As String, ByVal DOSIS As String, ByVal INTERVALO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(38),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOME.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOME.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (NOMBRE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE,String)
            End If
            If (DOSIS Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(DOSIS,String)
            End If
            If (INTERVALO Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(INTERVALO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_MÉDICO(ByVal CODIGOM As Global.System.Nullable(Of Decimal), ByVal NOMBRE1 As String, ByVal NOMBRE2 As String, ByVal APELLIDO1 As String, ByVal APELLIDO2 As String, ByVal DIRECCION As String, ByVal EMERGENCIA As String, ByVal INGRESO As Global.System.Nullable(Of Date)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(39),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOM.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (NOMBRE1 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE1,String)
            End If
            If (NOMBRE2 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(NOMBRE2,String)
            End If
            If (APELLIDO1 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(APELLIDO1,String)
            End If
            If (APELLIDO2 Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(APELLIDO2,String)
            End If
            If (DIRECCION Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(DIRECCION,String)
            End If
            If (EMERGENCIA Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(EMERGENCIA,String)
            End If
            If (INGRESO.HasValue = true) Then
                command.Parameters(7).Value = CType(INGRESO.Value,Date)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_PACIENTE(ByVal CODIGOP As Global.System.Nullable(Of Decimal), ByVal NOMBREP As String, ByVal CODIGOR As Global.System.Nullable(Of Decimal), ByVal CODIGOD As Global.System.Nullable(Of Decimal), ByVal CODIGOM As Global.System.Nullable(Of Decimal), ByVal FOTOP As Object, ByVal FECHAI As Global.System.Nullable(Of Date)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(40),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOP.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOP.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (NOMBREP Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBREP,String)
            End If
            If (CODIGOR.HasValue = true) Then
                command.Parameters(2).Value = CType(CODIGOR.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (CODIGOD.HasValue = true) Then
                command.Parameters(3).Value = CType(CODIGOD.Value,Decimal)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CODIGOM.HasValue = true) Then
                command.Parameters(4).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FOTOP Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(FOTOP,Object)
            End If
            If (FECHAI.HasValue = true) Then
                command.Parameters(6).Value = CType(FECHAI.Value,Date)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_RAZA(ByVal CODIGOR As Global.System.Nullable(Of Decimal), ByVal RAZA As String, ByVal CODIGOE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(41),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOR.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOR.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (RAZA Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(RAZA,String)
            End If
            If (CODIGOE.HasValue = true) Then
                command.Parameters(2).Value = CType(CODIGOE.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_TEL_DUEÑO(ByVal CODIGOD As Global.System.Nullable(Of Decimal), ByVal TEL As String, ByVal TELN As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(42),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOD.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOD.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (TEL Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(TEL,String)
            End If
            If (TELN Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(TELN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_TEL_MÉDICO(ByVal CODIGOM As Global.System.Nullable(Of Decimal), ByVal TEL As String, ByVal TELN As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(43),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOM.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOM.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (TEL Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(TEL,String)
            End If
            If (TELN Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(TELN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_TURNO(ByVal CODIGOT As Global.System.Nullable(Of Decimal), ByVal HORAI As Global.System.Nullable(Of Date), ByVal HORAF As Global.System.Nullable(Of Date), ByVal TIPO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(44),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (CODIGOT.HasValue = true) Then
                command.Parameters(0).Value = CType(CODIGOT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (HORAI.HasValue = true) Then
                command.Parameters(1).Value = CType(HORAI.Value,Date)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (HORAF.HasValue = true) Then
                command.Parameters(2).Value = CType(HORAF.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TIPO Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function U_USUARIO(ByVal USUARIO As String, ByVal NOMBRE1 As String, ByVal NOMBRE2 As String, ByVal APELLIDO1 As String, ByVal APELLIDO2 As String, ByVal TEL As String, ByVal DIRECCION As String, ByVal CONTRASEÑA As String, ByVal TIPO As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = CType(Me.CommandCollection(45),Global.Oracle.ManagedDataAccess.Client.OracleCommand)
            If (USUARIO Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(USUARIO,String)
            End If
            If (NOMBRE1 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(NOMBRE1,String)
            End If
            If (NOMBRE2 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(NOMBRE2,String)
            End If
            If (APELLIDO1 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(APELLIDO1,String)
            End If
            If (APELLIDO2 Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(APELLIDO2,String)
            End If
            If (TEL Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(TEL,String)
            End If
            If (DIRECCION Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(DIRECCION,String)
            End If
            If (CONTRASEÑA Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(CONTRASEÑA,String)
            End If
            If (TIPO Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(TIPO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _aUDITORIASTableAdapter As AUDITORIASTableAdapter
        
        Private _cIRUGIASTableAdapter As CIRUGIASTableAdapter
        
        Private _cITASTableAdapter As CITASTableAdapter
        
        Private _dUEÑOSTableAdapter As DUEÑOSTableAdapter
        
        Private _eNFERMEDADESTableAdapter As ENFERMEDADESTableAdapter
        
        Private _eSPECIESTableAdapter As ESPECIESTableAdapter
        
        Private _fECHATableAdapter As FECHATableAdapter
        
        Private _mEDICINASTableAdapter As MEDICINASTableAdapter
        
        Private _mÉDICOSTableAdapter As MÉDICOSTableAdapter
        
        Private _pACIENTESTableAdapter As PACIENTESTableAdapter
        
        Private _rEPORTETableAdapter As REPORTETableAdapter
        
        Private _tEL_DUEÑOTableAdapter As TEL_DUEÑOTableAdapter
        
        Private _tEL_MÉDICOTableAdapter As TEL_MÉDICOTableAdapter
        
        Private _tURNOSTableAdapter As TURNOSTableAdapter
        
        Private _tURNOXMÉDICOTableAdapter As TURNOXMÉDICOTableAdapter
        
        Private _uSUARIOSTableAdapter As USUARIOSTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AUDITORIASTableAdapter() As AUDITORIASTableAdapter
            Get
                Return Me._aUDITORIASTableAdapter
            End Get
            Set
                Me._aUDITORIASTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CIRUGIASTableAdapter() As CIRUGIASTableAdapter
            Get
                Return Me._cIRUGIASTableAdapter
            End Get
            Set
                Me._cIRUGIASTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CITASTableAdapter() As CITASTableAdapter
            Get
                Return Me._cITASTableAdapter
            End Get
            Set
                Me._cITASTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DUEÑOSTableAdapter() As DUEÑOSTableAdapter
            Get
                Return Me._dUEÑOSTableAdapter
            End Get
            Set
                Me._dUEÑOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ENFERMEDADESTableAdapter() As ENFERMEDADESTableAdapter
            Get
                Return Me._eNFERMEDADESTableAdapter
            End Get
            Set
                Me._eNFERMEDADESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ESPECIESTableAdapter() As ESPECIESTableAdapter
            Get
                Return Me._eSPECIESTableAdapter
            End Get
            Set
                Me._eSPECIESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FECHATableAdapter() As FECHATableAdapter
            Get
                Return Me._fECHATableAdapter
            End Get
            Set
                Me._fECHATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MEDICINASTableAdapter() As MEDICINASTableAdapter
            Get
                Return Me._mEDICINASTableAdapter
            End Get
            Set
                Me._mEDICINASTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MÉDICOSTableAdapter() As MÉDICOSTableAdapter
            Get
                Return Me._mÉDICOSTableAdapter
            End Get
            Set
                Me._mÉDICOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PACIENTESTableAdapter() As PACIENTESTableAdapter
            Get
                Return Me._pACIENTESTableAdapter
            End Get
            Set
                Me._pACIENTESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property REPORTETableAdapter() As REPORTETableAdapter
            Get
                Return Me._rEPORTETableAdapter
            End Get
            Set
                Me._rEPORTETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TEL_DUEÑOTableAdapter() As TEL_DUEÑOTableAdapter
            Get
                Return Me._tEL_DUEÑOTableAdapter
            End Get
            Set
                Me._tEL_DUEÑOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TEL_MÉDICOTableAdapter() As TEL_MÉDICOTableAdapter
            Get
                Return Me._tEL_MÉDICOTableAdapter
            End Get
            Set
                Me._tEL_MÉDICOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TURNOSTableAdapter() As TURNOSTableAdapter
            Get
                Return Me._tURNOSTableAdapter
            End Get
            Set
                Me._tURNOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TURNOXMÉDICOTableAdapter() As TURNOXMÉDICOTableAdapter
            Get
                Return Me._tURNOXMÉDICOTableAdapter
            End Get
            Set
                Me._tURNOXMÉDICOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property USUARIOSTableAdapter() As USUARIOSTableAdapter
            Get
                Return Me._uSUARIOSTableAdapter
            End Get
            Set
                Me._uSUARIOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._aUDITORIASTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aUDITORIASTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aUDITORIASTableAdapter.Connection
                End If
                If ((Not (Me._cIRUGIASTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cIRUGIASTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cIRUGIASTableAdapter.Connection
                End If
                If ((Not (Me._cITASTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cITASTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cITASTableAdapter.Connection
                End If
                If ((Not (Me._dUEÑOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dUEÑOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dUEÑOSTableAdapter.Connection
                End If
                If ((Not (Me._eNFERMEDADESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eNFERMEDADESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eNFERMEDADESTableAdapter.Connection
                End If
                If ((Not (Me._eSPECIESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eSPECIESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eSPECIESTableAdapter.Connection
                End If
                If ((Not (Me._fECHATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fECHATableAdapter.Connection) Is Nothing)) Then
                    Return Me._fECHATableAdapter.Connection
                End If
                If ((Not (Me._mEDICINASTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mEDICINASTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mEDICINASTableAdapter.Connection
                End If
                If ((Not (Me._mÉDICOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mÉDICOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mÉDICOSTableAdapter.Connection
                End If
                If ((Not (Me._pACIENTESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pACIENTESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pACIENTESTableAdapter.Connection
                End If
                If ((Not (Me._rEPORTETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rEPORTETableAdapter.Connection) Is Nothing)) Then
                    Return Me._rEPORTETableAdapter.Connection
                End If
                If ((Not (Me._tEL_DUEÑOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tEL_DUEÑOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tEL_DUEÑOTableAdapter.Connection
                End If
                If ((Not (Me._tEL_MÉDICOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tEL_MÉDICOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tEL_MÉDICOTableAdapter.Connection
                End If
                If ((Not (Me._tURNOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tURNOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tURNOSTableAdapter.Connection
                End If
                If ((Not (Me._tURNOXMÉDICOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tURNOXMÉDICOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tURNOXMÉDICOTableAdapter.Connection
                End If
                If ((Not (Me._uSUARIOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uSUARIOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uSUARIOSTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._aUDITORIASTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cIRUGIASTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cITASTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dUEÑOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eNFERMEDADESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eSPECIESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fECHATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mEDICINASTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mÉDICOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pACIENTESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rEPORTETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tEL_DUEÑOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tEL_MÉDICOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tURNOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tURNOXMÉDICOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._uSUARIOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As databases, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._eSPECIESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ESPECIES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eSPECIESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dUEÑOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DUEÑOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dUEÑOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eNFERMEDADESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ENFERMEDADES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eNFERMEDADESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mÉDICOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MÉDICOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mÉDICOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tURNOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TURNOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tURNOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cIRUGIASTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CIRUGIAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cIRUGIASTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mEDICINASTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MEDICINAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mEDICINASTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pACIENTESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PACIENTES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pACIENTESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tEL_MÉDICOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TEL_MÉDICO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tEL_MÉDICOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tEL_DUEÑOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TEL_DUEÑO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tEL_DUEÑOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rEPORTETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.REPORTE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rEPORTETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fECHATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FECHA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fECHATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tURNOXMÉDICOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TURNOXMÉDICO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tURNOXMÉDICOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cITASTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CITAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cITASTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aUDITORIASTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AUDITORIAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aUDITORIASTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._uSUARIOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.USUARIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uSUARIOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As databases, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._eSPECIESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ESPECIES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eSPECIESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dUEÑOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DUEÑOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dUEÑOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eNFERMEDADESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ENFERMEDADES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eNFERMEDADESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mÉDICOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MÉDICOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mÉDICOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tURNOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TURNOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tURNOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cIRUGIASTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CIRUGIAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cIRUGIASTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mEDICINASTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MEDICINAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mEDICINASTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pACIENTESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PACIENTES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pACIENTESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tEL_MÉDICOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TEL_MÉDICO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tEL_MÉDICOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tEL_DUEÑOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TEL_DUEÑO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tEL_DUEÑOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rEPORTETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.REPORTE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rEPORTETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fECHATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FECHA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fECHATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tURNOXMÉDICOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TURNOXMÉDICO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tURNOXMÉDICOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cITASTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CITAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cITASTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aUDITORIASTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AUDITORIAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aUDITORIASTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._uSUARIOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.USUARIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uSUARIOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As databases, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._uSUARIOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.USUARIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uSUARIOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aUDITORIASTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AUDITORIAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aUDITORIASTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cITASTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CITAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cITASTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tURNOXMÉDICOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TURNOXMÉDICO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tURNOXMÉDICOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fECHATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FECHA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fECHATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rEPORTETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.REPORTE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rEPORTETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tEL_DUEÑOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TEL_DUEÑO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tEL_DUEÑOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tEL_MÉDICOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TEL_MÉDICO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tEL_MÉDICOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pACIENTESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PACIENTES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pACIENTESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mEDICINASTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MEDICINAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mEDICINASTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cIRUGIASTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CIRUGIAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cIRUGIASTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tURNOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TURNOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tURNOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mÉDICOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MÉDICOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mÉDICOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eNFERMEDADESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ENFERMEDADES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eNFERMEDADESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dUEÑOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DUEÑOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dUEÑOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eSPECIESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ESPECIES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eSPECIESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As databases) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._aUDITORIASTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aUDITORIASTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cIRUGIASTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cIRUGIASTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cITASTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cITASTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._dUEÑOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dUEÑOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._eNFERMEDADESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eNFERMEDADESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._eSPECIESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eSPECIESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._fECHATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fECHATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._mEDICINASTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mEDICINASTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._mÉDICOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mÉDICOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._pACIENTESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pACIENTESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._rEPORTETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rEPORTETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._tEL_DUEÑOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tEL_DUEÑOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._tEL_MÉDICOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tEL_MÉDICOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._tURNOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tURNOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._tURNOXMÉDICOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tURNOXMÉDICOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._uSUARIOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uSUARIOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._aUDITORIASTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aUDITORIASTableAdapter, Me._aUDITORIASTableAdapter.Connection)
                    Me._aUDITORIASTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._aUDITORIASTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._aUDITORIASTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aUDITORIASTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aUDITORIASTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cIRUGIASTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cIRUGIASTableAdapter, Me._cIRUGIASTableAdapter.Connection)
                    Me._cIRUGIASTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._cIRUGIASTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._cIRUGIASTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cIRUGIASTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cIRUGIASTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cITASTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cITASTableAdapter, Me._cITASTableAdapter.Connection)
                    Me._cITASTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._cITASTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._cITASTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cITASTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cITASTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dUEÑOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dUEÑOSTableAdapter, Me._dUEÑOSTableAdapter.Connection)
                    Me._dUEÑOSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._dUEÑOSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._dUEÑOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dUEÑOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dUEÑOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eNFERMEDADESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eNFERMEDADESTableAdapter, Me._eNFERMEDADESTableAdapter.Connection)
                    Me._eNFERMEDADESTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._eNFERMEDADESTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._eNFERMEDADESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eNFERMEDADESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eNFERMEDADESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eSPECIESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eSPECIESTableAdapter, Me._eSPECIESTableAdapter.Connection)
                    Me._eSPECIESTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._eSPECIESTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._eSPECIESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eSPECIESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eSPECIESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fECHATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fECHATableAdapter, Me._fECHATableAdapter.Connection)
                    Me._fECHATableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._fECHATableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._fECHATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fECHATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fECHATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mEDICINASTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mEDICINASTableAdapter, Me._mEDICINASTableAdapter.Connection)
                    Me._mEDICINASTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._mEDICINASTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._mEDICINASTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mEDICINASTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mEDICINASTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mÉDICOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mÉDICOSTableAdapter, Me._mÉDICOSTableAdapter.Connection)
                    Me._mÉDICOSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._mÉDICOSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._mÉDICOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mÉDICOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mÉDICOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pACIENTESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pACIENTESTableAdapter, Me._pACIENTESTableAdapter.Connection)
                    Me._pACIENTESTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pACIENTESTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._pACIENTESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pACIENTESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pACIENTESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rEPORTETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rEPORTETableAdapter, Me._rEPORTETableAdapter.Connection)
                    Me._rEPORTETableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._rEPORTETableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._rEPORTETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rEPORTETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rEPORTETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tEL_DUEÑOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tEL_DUEÑOTableAdapter, Me._tEL_DUEÑOTableAdapter.Connection)
                    Me._tEL_DUEÑOTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._tEL_DUEÑOTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._tEL_DUEÑOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tEL_DUEÑOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tEL_DUEÑOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tEL_MÉDICOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tEL_MÉDICOTableAdapter, Me._tEL_MÉDICOTableAdapter.Connection)
                    Me._tEL_MÉDICOTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._tEL_MÉDICOTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._tEL_MÉDICOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tEL_MÉDICOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tEL_MÉDICOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tURNOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tURNOSTableAdapter, Me._tURNOSTableAdapter.Connection)
                    Me._tURNOSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._tURNOSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._tURNOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tURNOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tURNOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tURNOXMÉDICOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tURNOXMÉDICOTableAdapter, Me._tURNOXMÉDICOTableAdapter.Connection)
                    Me._tURNOXMÉDICOTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._tURNOXMÉDICOTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._tURNOXMÉDICOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tURNOXMÉDICOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tURNOXMÉDICOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._uSUARIOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uSUARIOSTableAdapter, Me._uSUARIOSTableAdapter.Connection)
                    Me._uSUARIOSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._uSUARIOSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._uSUARIOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uSUARIOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uSUARIOSTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._aUDITORIASTableAdapter) Is Nothing) Then
                    Me._aUDITORIASTableAdapter.Connection = CType(revertConnections(Me._aUDITORIASTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._aUDITORIASTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cIRUGIASTableAdapter) Is Nothing) Then
                    Me._cIRUGIASTableAdapter.Connection = CType(revertConnections(Me._cIRUGIASTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._cIRUGIASTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cITASTableAdapter) Is Nothing) Then
                    Me._cITASTableAdapter.Connection = CType(revertConnections(Me._cITASTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._cITASTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dUEÑOSTableAdapter) Is Nothing) Then
                    Me._dUEÑOSTableAdapter.Connection = CType(revertConnections(Me._dUEÑOSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._dUEÑOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eNFERMEDADESTableAdapter) Is Nothing) Then
                    Me._eNFERMEDADESTableAdapter.Connection = CType(revertConnections(Me._eNFERMEDADESTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._eNFERMEDADESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eSPECIESTableAdapter) Is Nothing) Then
                    Me._eSPECIESTableAdapter.Connection = CType(revertConnections(Me._eSPECIESTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._eSPECIESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fECHATableAdapter) Is Nothing) Then
                    Me._fECHATableAdapter.Connection = CType(revertConnections(Me._fECHATableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._fECHATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mEDICINASTableAdapter) Is Nothing) Then
                    Me._mEDICINASTableAdapter.Connection = CType(revertConnections(Me._mEDICINASTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._mEDICINASTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mÉDICOSTableAdapter) Is Nothing) Then
                    Me._mÉDICOSTableAdapter.Connection = CType(revertConnections(Me._mÉDICOSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._mÉDICOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pACIENTESTableAdapter) Is Nothing) Then
                    Me._pACIENTESTableAdapter.Connection = CType(revertConnections(Me._pACIENTESTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pACIENTESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rEPORTETableAdapter) Is Nothing) Then
                    Me._rEPORTETableAdapter.Connection = CType(revertConnections(Me._rEPORTETableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._rEPORTETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tEL_DUEÑOTableAdapter) Is Nothing) Then
                    Me._tEL_DUEÑOTableAdapter.Connection = CType(revertConnections(Me._tEL_DUEÑOTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._tEL_DUEÑOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tEL_MÉDICOTableAdapter) Is Nothing) Then
                    Me._tEL_MÉDICOTableAdapter.Connection = CType(revertConnections(Me._tEL_MÉDICOTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._tEL_MÉDICOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tURNOSTableAdapter) Is Nothing) Then
                    Me._tURNOSTableAdapter.Connection = CType(revertConnections(Me._tURNOSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._tURNOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tURNOXMÉDICOTableAdapter) Is Nothing) Then
                    Me._tURNOXMÉDICOTableAdapter.Connection = CType(revertConnections(Me._tURNOXMÉDICOTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._tURNOXMÉDICOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._uSUARIOSTableAdapter) Is Nothing) Then
                    Me._uSUARIOSTableAdapter.Connection = CType(revertConnections(Me._uSUARIOSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._uSUARIOSTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
